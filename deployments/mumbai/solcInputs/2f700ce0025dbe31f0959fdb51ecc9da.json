{
  "language": "Solidity",
  "sources": {
    "contracts/PepemonBattle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\nimport \"./lib/AdminRole.sol\";\nimport \"./PepemonCardDeck.sol\";\nimport \"./PepemonCardOracle.sol\";\nimport \"./lib/ChainLinkRngOracle.sol\";\n\ncontract PepemonBattle is AdminRole {\n    \n    event BattleCreated(address indexed player1Addr, address indexed player2Addr, uint256 battleId);\n\n    mapping (uint => uint) public battleIdRNGSeed;\n\n    uint constant _max_inte = 8;\n    uint constant _max_cards_on_table = 5;\n    uint constant _refreshTurn = 5;\n\n    //Attacker can either be PLAYER_ONE or PLAYER_TWO\n    enum Attacker {\n        PLAYER_ONE,\n        PLAYER_TWO\n    }\n\n    //Game can either be in FIRST_HALF or SECOND_HALF\n    enum TurnHalves {\n        FIRST_HALF,\n        SECOND_HALF\n    }\n\n    //Battle contains:\n    //battleId = ID of this battle\n    //player1, player2 = players\n    //currentTurn\n    //attacker\n    //turnHalves => first half or second half?\n    struct Battle {\n        uint256 battleId;\n        Player player1;\n        Player player2;\n        uint256 currentTurn;\n        Attacker attacker;\n        TurnHalves turnHalves;\n    }\n\n    //playerAddr\n    //deckId = Id of deck\n    //hand = keeps track of current player's stats (such as health)\n    //totalSupportCardIds = all IDs of support cards\n    //playedCardCount = number of cards played already\n    struct Player {\n        address playerAddr;\n        uint256 deckId;\n        Hand hand;\n        uint256[60] totalSupportCardIds;\n        uint256 playedCardCount;\n    }\n\n    //health - health of player's battle card\n    // battleCardId = card id of player\n    // currentBCstats = all stats of the player's battle cards currently\n    // supportCardInHandIds = IDs of the support cards in your current hand\n    //                  the amount of support cards a player can play is determined by intelligence\n    // tableSupportCardStats = Number of support cards that are currently played on the table\n    // currentSuportCards = cards on the table, based on which turn ago they were played\n    //                      Notice that the number of turns is limited by _refreshTurn\n    struct Hand {\n        int256 health;\n        uint256 battleCardId;\n        CurrentBattleCardStats currentBCstats;\n        uint256[_max_inte] supportCardInHandIds;\n        uint256 tableSupportCardStats;\n        TableSupportCardStats[_max_cards_on_table] tableSupportCards;\n    }\n    //spd, inte, def, atk, sAtk, sDef - Current stats of battle card (with powerups included)\n    //Each param can go into the negatives\n    struct CurrentBattleCardStats {\n        int256 spd;\n        uint256 inte;\n        int256 def;\n        int256 atk;\n        int256 sAtk;\n        int256 sDef;\n    }\n\n    //links supportCardID with effectMany\n    struct TableSupportCardStats {\n        uint256 supportCardId;\n        PepemonCardOracle.EffectMany effectMany;\n    }\n\n    mapping(uint256 => Battle) public battles;\n\n    uint256 private _nextBattleId;\n\n\n    PepemonCardOracle private _cardContract;\n    PepemonCardDeck private _deckContract;\n    ChainLinkRngOracle private _randNrGenContract;\n\n    constructor(\n        address cardOracleAddress,\n        address deckOracleAddress,\n        address randOracleAddress\n    ) {\n        _cardContract = PepemonCardOracle(cardOracleAddress);\n        _deckContract = PepemonCardDeck(deckOracleAddress);\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\n        _nextBattleId = 1;\n    }\n\n    /**\n     * @dev Create battle\n     * @param p1Addr address player1\n     * @param p1DeckId uint256\n     * @param p2Addr address player2\n     * @param p2DeckId uint256\n     */\n    function createBattle(\n        address p1Addr,\n        uint256 p1DeckId,\n        address p2Addr,\n        uint256 p2DeckId\n    ) public onlyAdmin {\n        require(p1Addr != p2Addr, \"PepemonBattle: Cannot battle yourself\");\n\n        (uint256 p1BattleCardId, ) = _deckContract.decks(p1DeckId);\n        (uint256 p2BattleCardId, ) = _deckContract.decks(p2DeckId);\n\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(p1BattleCardId);\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(p2BattleCardId);\n\n        Battle storage newBattle;\n        // Initiate battle ID\n        newBattle.battleId = _nextBattleId;\n        // Initiate player1\n        newBattle.player1.hand.health = int256(p1BattleCard.hp);\n        newBattle.player1.hand.battleCardId = p1BattleCardId;\n        newBattle.player1.playerAddr = p1Addr;\n        newBattle.player1.deckId = p1DeckId;\n        // Initiate player2\n        newBattle.player2.hand.health = int256(p2BattleCard.hp);\n        newBattle.player2.hand.battleCardId = p2BattleCardId;\n        newBattle.player2.playerAddr = p2Addr;\n        newBattle.player2.deckId = p2DeckId;\n        // Set the RNG seed\n        battleIdRNGSeed[_nextBattleId] = _randSeed(newBattle);\n\n        //Write battle into mapping\n        battles[_nextBattleId] = newBattle;\n        //Emit event\n        emit BattleCreated(p1Addr, p2Addr, _nextBattleId);\n        _nextBattleId++;\n    }\n\n    function goForBattle(Battle memory battle) public view returns (Battle memory, address winner) {\n\n        //Initialize battle by starting the first turn\n        battle = goForNewTurn(battle);\n        address winnerAddr;\n        // Battle goes!\n        while (true) {\n            // Resolve attacker in the current turn\n            battle = resolveAttacker(battle);\n            // Fight\n            battle = fight(battle);\n\n            // Check if battle ended\n            (bool isEnded, address win) = checkIfBattleEnded(battle);\n            if (isEnded) {\n                winnerAddr = win;\n                break;\n            }\n\n            // Resolve turn halves\n            battle = updateTurnInfo(battle);\n        }\n        return (battle, winnerAddr);\n    }\n\n    //If currently in first half -> go to second half\n    //If currently in second half -> make a new turn\n    function updateTurnInfo(Battle memory battle) internal view returns (Battle memory) {\n        // If the current half is first, go over second half\n        // or go over next turn\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\n            battle.turnHalves = TurnHalves.SECOND_HALF;\n        } else {\n            battle = goForNewTurn(battle);\n        }\n\n        return battle;\n    }\n\n    //Things this function does:\n    //Reset both players hand infos back to base stats (stats with no support card powerups)\n    //Check if support cards need to be scrambled and redealt\n    //Redeal support cards if necessary\n    //Calculate support card's power\n    //Finally, draw Pepemon's intelligence number of cards.\n    function goForNewTurn(Battle memory battle) internal view returns (Battle memory) {\n        Player memory player1 = battle.player1;\n        Player memory player2 = battle.player2;\n\n        // Get base battle card stats (stats without any powerups)\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(\n            player1.hand.battleCardId\n        );\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(\n            player2.hand.battleCardId\n        );\n\n        //Reset both players' hand infos to base stats\n        player1.hand.currentBCstats = getCardStats(p1BattleCard);\n        player2.hand.currentBCstats = getCardStats(p2BattleCard);\n\n        //Refresh cards every 5 turns\n        bool isRefreshTurn = (battle.currentTurn % _refreshTurn == 0);\n\n        if (isRefreshTurn) {\n            //Need to refresh decks\n\n            // Shuffle player1 support cards\n            uint256 p1SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player1.deckId);\n\n            //Create a pseudorandom seed and shuffle the cards \n            uint[] memory scrambled = _deckContract.shuffleDeck(player1.deckId, \n                _randMod(\n                    69, battle\n                )\n            );\n            //Copy back scrambled cards to original list\n            for (uint i = 0 ; i < p1SupportCardIdsLength; i++){\n                player1.totalSupportCardIds[i]=scrambled[i];\n            }\n            \n            //Reset played card count\n            player1.playedCardCount = 0;\n\n            //Shuffling player 2 support cards\n            uint256 p2SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player2.deckId);\n\n            //Create a pseudorandom seed and shuffle the cards\n            uint[] memory scrambled2 = _deckContract.shuffleDeck(player2.deckId, \n                _randMod(\n                    420, battle\n                )\n            );\n\n            //Copy the support cards back into the list\n            for (uint256 i = 0; i < p2SupportCardIdsLength; i++) {\n                player1.totalSupportCardIds[i]=scrambled2[i];\n            }\n            \n            //Reset player2 played card counts\n            player2.playedCardCount = 0;\n        }\n        else \n        {\n            //Don't need to refresh cards now\n\n            // Get temp support info of previous turn's hands and calculate their effect for the new turn\n            player1.hand = calSupportCardsOnTable(player1.hand, player2.hand);\n            player2.hand = calSupportCardsOnTable(player2.hand, player1.hand);\n        }\n\n        // Draw player1 support cards for the new turn\n        for (uint256 i = 0; i < player1.hand.currentBCstats.inte; i++) {\n            player1.hand.supportCardInHandIds[i] = player1.totalSupportCardIds[i + player1.playedCardCount];\n        }\n        player1.playedCardCount += player1.hand.currentBCstats.inte;\n\n        // Draw player2 support cards for the new turn\n        for (uint256 i = 0; i < player2.hand.currentBCstats.inte; i++) {\n            player2.hand.supportCardInHandIds[i] = player2.totalSupportCardIds[i + player2.playedCardCount];\n        }\n        player2.playedCardCount += player2.hand.currentBCstats.inte;\n\n        //Update current battle info\n        battle.player1 = player1;\n        battle.player2 = player2;\n\n        // Increment current turn number of battle\n        battle.currentTurn++;\n\n        // Go for first half in turn\n        battle.turnHalves = TurnHalves.FIRST_HALF;\n\n        return battle;\n    }\n\n    //This method calculates the battle card's stats after taking into consideration all the support cards currently being played\n    function calSupportCardsOnTable(Hand memory hand, Hand memory oppHand) internal pure returns (Hand memory) {\n        for (uint256 i = 0; i < hand.tableSupportCardStats; i++) {\n            //Loop through every support card currently played\n\n            //Get the support card being considered now\n            TableSupportCardStats memory tableSupportCardStat = hand.tableSupportCards[i];\n            \n            //Get the effect of that support card\n            PepemonCardOracle.EffectMany memory effect = tableSupportCardStat.effectMany;\n            \n            //If there is at least 1 turn left\n            if (effect.numTurns >= 1) {\n\n                //If the effect is for me\n                if (effect.effectFor == PepemonCardOracle.EffectFor.ME) {\n                    // Change my card's stats using that support card\n                    // Currently effectTo of EffectMany can be ATTACK, DEFENSE, SPEED and INTELLIGENCE\n                    //Get the statistic changed and update it \n                    //Intelligence can't go into the negatives\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\n                        hand.currentBCstats.atk += effect.power;\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\n                        hand.currentBCstats.def += effect.power;\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\n                        hand.currentBCstats.spd += effect.power;\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\n                        int temp;\n                        temp = int256(hand.currentBCstats.inte) + effect.power;\n                        hand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\n                    }\n                } else {\n                    //The card affects the opp's pepemon\n                    //Update card stats of the opp's pepemon\n                    //Make sure INT stat can't go below zero\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\n                        oppHand.currentBCstats.atk += effect.power;\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\n                        oppHand.currentBCstats.def += effect.power;\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\n                        oppHand.currentBCstats.spd += effect.power;\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\n                        int temp;\n                        temp = int256(oppHand.currentBCstats.inte) + effect.power;\n                        oppHand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\n                    }\n                }\n                // Decrease effect numTurns by 1 since 1 turn has already passed\n                effect.numTurns--;\n                // Delete this one from tableSupportCardStat if all turns of the card have been exhausted\n                if (effect.numTurns == 0) {\n                    if (i < hand.tableSupportCardStats - 1) {\n                        hand.tableSupportCards[i] = hand.tableSupportCards[hand.tableSupportCardStats - 1];\n                    }\n                    delete hand.tableSupportCards[hand.tableSupportCardStats - 1];\n                    hand.tableSupportCardStats--;\n                }\n            }\n        }\n\n        return hand;\n    }\n\n    //This method gets the current attacker\n    function resolveAttacker(Battle memory battle) internal view returns (Battle memory) {\n        CurrentBattleCardStats memory p1CurrentBattleCardStats = battle.player1.hand.currentBCstats;\n        CurrentBattleCardStats memory p2CurrentBattleCardStats = battle.player2.hand.currentBCstats;\n\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\n            //Player with highest speed card goes first\n            if (p1CurrentBattleCardStats.spd > p2CurrentBattleCardStats.spd) {\n                battle.attacker = Attacker.PLAYER_ONE;\n            } else if (p1CurrentBattleCardStats.spd < p2CurrentBattleCardStats.spd) {\n                battle.attacker = Attacker.PLAYER_TWO;\n            } else {\n                //Tiebreak: intelligence\n                if (p1CurrentBattleCardStats.inte > p2CurrentBattleCardStats.inte) {\n                    battle.attacker = Attacker.PLAYER_ONE;\n                } else if (p1CurrentBattleCardStats.inte < p2CurrentBattleCardStats.inte) {\n                    battle.attacker = Attacker.PLAYER_TWO;\n                } else {\n                    //Second tiebreak: use RNG\n                    uint256 rand = _randMod(69420, battle) % 2;\n                    battle.attacker = (rand == 0 ? Attacker.PLAYER_ONE : Attacker.PLAYER_TWO);\n                }\n            }\n        } else {\n            //For second half, switch players\n            battle.attacker = (battle.attacker == Attacker.PLAYER_ONE ? Attacker.PLAYER_TWO : Attacker.PLAYER_ONE);\n        }\n\n        return battle;\n    }\n\n    //Create a random seed, using the chainlink number and the addresses of the combatants as entropy\n    function _randSeed(Battle memory battle) private view returns (uint256) {\n        //Get the chainlink random number\n        uint chainlinkNumber = _randNrGenContract.getRandomNumber();\n        //Create a new pseudorandom number using the seed and battle info as entropy\n        //This makes sure the RNG returns a different number every time\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(block.number, chainlinkNumber, battle.player1.playerAddr, battle.player2.playerAddr)));\n        return randomNumber;\n    }\n\n    function _randMod(uint256 seed, Battle memory battle) private view returns (uint256) {\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(seed, battle.currentTurn, battleIdRNGSeed[battle.battleId])));\n        return randomNumber;\n    }\n\n    //Check if battle ended by looking at player's health\n    function checkIfBattleEnded(Battle memory battle) public pure returns (bool, address) {\n        if (battle.player1.hand.health <= 0) {\n            return (true, battle.player1.playerAddr);\n        } else if (battle.player2.hand.health <= 0) {\n            return (true, battle.player2.playerAddr);\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function fight(Battle memory battle) public view returns (Battle memory) {\n        Hand memory atkHand;\n        Hand memory defHand;\n\n        //Get attacker and defender for current turn\n        if (battle.attacker == Attacker.PLAYER_ONE) {\n            atkHand = battle.player1.hand;\n            defHand = battle.player2.hand;\n        } else {\n            atkHand = battle.player2.hand;\n            defHand = battle.player1.hand;\n        }\n\n        (atkHand, defHand) = calSupportCardsInHand(atkHand, defHand);\n\n        // Fight\n\n        //Calculate HP loss for defending player\n        if (atkHand.currentBCstats.atk > defHand.currentBCstats.def) {\n            //If attacker's attack > defender's defense, find difference. That is the defending player's HP loss\n            defHand.health -= (atkHand.currentBCstats.atk - defHand.currentBCstats.def);\n        } else {\n            //Otherwise, defender loses 1 HP\n            defHand.health -= 1;\n        }\n\n        //Write updated info back into battle\n        if (battle.attacker == Attacker.PLAYER_ONE) {\n            battle.player1.hand = atkHand;\n            battle.player2.hand = defHand;\n        } else {\n            battle.player1.hand = defHand;\n            battle.player2.hand = atkHand;\n        }\n\n        return battle;\n    }\n\n    \n    //We calculate the effect of every card in the player's hand\n    function calSupportCardsInHand(Hand memory atkHand, Hand memory defHand) public view returns (Hand memory, Hand memory) {\n        // If this card is included in player's hand, adds an additional power equal to the total of\n        // all normal offense/defense cards\n        bool isPower0CardIncluded = false;\n        // Total sum of normal support cards\n        int256 totalNormalPower = 0;\n        // Cal attacker hand\n        for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\n            //Loop through every card the attacker has in his hand\n            uint256 id = atkHand.supportCardInHandIds[i];\n\n            //Get the support cardStats\n            PepemonCardOracle.SupportCardStats memory cardStats = _cardContract.getSupportCardById(id);\n            if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.OFFENSE) {\n                // Card type is OFFENSE.\n                // Calc effects of EffectOne array\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\n                    \n                    //Checks if that support card is triggered and by how much it is triggered by\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\n                    if (isTriggered) {\n                        //use triggeredPower if triggered\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\n                    }\n                    else{\n                        //use basePower if not\n                        atkHand.currentBCstats.atk += effectOne.basePower;\n                        totalNormalPower += effectOne.basePower;\n                    }\n                }\n            } else if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\n                // Card type is STRONG OFFENSE.\n\n                //Make sure unstackable cards can't be stacked\n                if (cardStats.unstackable) {\n                    bool isNew = true;\n                    // Check if card is new to previous cards\n                    for (uint256 j = 0; j < i; j++) {\n                        if (id == atkHand.supportCardInHandIds[j]) {\n                            isNew = false;\n                            break;\n                        }\n                    }\n                    if (!isNew) {\n                        //If it isn't - skip card\n                        continue;\n                    }\n                    // Check if card is new to temp support info cards\n                    for (uint256 j = 0; j < atkHand.tableSupportCardStats; j++) {\n                        if (id == atkHand.tableSupportCards[j].supportCardId) {\n                            isNew = false;\n                            break;\n                        }\n                    }\n                    if (!isNew) {\n                        //If it isn't - skip card\n                        continue;\n                    }\n                }\n\n                // Calc effects of EffectOne array\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\n                    if (isTriggered) {\n                        //If triggered: use triggered power\n                        if (multiplier > 1) {\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\n                        } else {\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_ATTACK) {\n                                // If it's a use Special Attack instead of Attack card\n                                atkHand.currentBCstats.atk = atkHand.currentBCstats.sAtk;\n                                continue;\n                            } else if (effectOne.triggeredPower == 0) {\n                                // We have a card that says ATK is increased by amount\n                                // Equal to the total of all offense cards in the current turn\n                                isPower0CardIncluded = true;\n                                continue;\n                            }\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower;\n                        }\n                    }\n                    else{\n                        //If not triggered: use base power instead\n                        atkHand.currentBCstats.atk += effectOne.basePower;\n                        totalNormalPower += effectOne.basePower;\n                    }\n                }\n                // If card lasts for >1 turns\n                if (cardStats.effectMany.power != 0) {\n                    // Add card  to table if <5 on table currently\n                    if (atkHand.tableSupportCardStats < 5) {\n                        atkHand.tableSupportCards[atkHand.tableSupportCardStats++] = TableSupportCardStats({\n                            supportCardId: id,\n                            effectMany: cardStats.effectMany\n                        });\n                    }\n                }\n            } else {\n                // Other card type is ignored.\n                continue;\n            }\n        }\n        if (isPower0CardIncluded) {\n            //If we have a card that says ATK is increased by amount equal to total of all offense cards\n            atkHand.currentBCstats.atk += totalNormalPower;\n        }\n        // Cal defense hand\n        isPower0CardIncluded = false;\n        totalNormalPower = 0;\n\n        for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\n            uint256 id = defHand.supportCardInHandIds[i];\n            PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(id);\n            if (card.supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\n                // Card type is DEFENSE\n                // Calc effects of EffectOne array\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\n                    if (isTriggered) {\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(multiplier);\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\n                    }\n                    else{\n                        //If not triggered, use base power instead\n                        defHand.currentBCstats.def += effectOne.basePower;\n                        totalNormalPower += effectOne.basePower;\n                    }\n                }\n            } else if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_DEFENSE) {\n                // Card type is STRONG DEFENSE\n                if (card.unstackable) {\n                    bool isNew = true;\n                    // Check if card is new to previous cards\n                    for (uint256 j = 0; j < i; j++) {\n                        if (id == defHand.supportCardInHandIds[j]) {\n                            isNew = false;\n                            break;\n                        }\n                    }\n                    // Check if card is new to temp support info cards\n                    for (uint256 j = 0; j < defHand.tableSupportCardStats; j++) {\n                        if (id == defHand.tableSupportCards[j].supportCardId) {\n                            isNew = false;\n                            break;\n                        }\n                    }\n                    if (!isNew) {\n                        continue;\n                    }\n                }\n                // Calc effects of EffectOne array\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\n                    (bool isTriggered, uint256 num) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\n                    if (isTriggered) {\n                        if (num > 0) {\n                            defHand.currentBCstats.def += effectOne.triggeredPower * int256(num);\n                        } else {\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_DEFENSE) {\n                                defHand.currentBCstats.def = defHand.currentBCstats.sDef;\n                                continue;\n                            } else if (effectOne.triggeredPower == 0) {\n                                // Equal to the total of all defense cards in the current turn\n                                isPower0CardIncluded = true;\n                                continue;\n                            }\n                            defHand.currentBCstats.def += effectOne.triggeredPower;\n                        }\n                    }\n                    else{\n                        //If not triggered, use base stats instead\n                        defHand.currentBCstats.def += effectOne.basePower;\n                        totalNormalPower += effectOne.basePower;\n                    }\n                }\n                // If card effect lasts >1 turn\n                if (card.effectMany.power != 0) {\n                    // Add card to table if there are <5 cards on table right now\n                    if (defHand.tableSupportCardStats < 5) {\n                        defHand.tableSupportCards[defHand.tableSupportCardStats++] = TableSupportCardStats({\n                            supportCardId: id,\n                            effectMany: card.effectMany\n                        });\n                    }\n                }\n            } else {\n                // Other card type is ignored.\n                continue;\n            }\n        }\n        if (isPower0CardIncluded) {\n            //If a \"add total of defense\" card is included\n            defHand.currentBCstats.def += totalNormalPower;\n        }\n\n        return (atkHand, defHand);\n    }\n\n    //Strip important game information (like speed, intelligence, etc.) from battle card\n    function getCardStats(PepemonCardOracle.BattleCardStats memory x) internal pure returns (CurrentBattleCardStats memory){\n        CurrentBattleCardStats memory ret;\n\n        ret.spd = int(x.spd);\n        ret.inte = x.inte;\n        ret.def = int(x.def);\n        ret.atk = int(x.atk);\n        ret.sAtk = int(x.sAtk);\n        ret.sDef = int(x.sDef);\n\n        return ret;\n    }\n\n//Checks if the requirements are satisfied for a certain code\n//returns bool - is satisfied?\n// uint - the multiplier for the card's attack power\n// for most cases multiplier is 1\nfunction checkReqCode(\n        Hand memory atkHand,\n        Hand memory defHand,\n        uint256 reqCode,\n        bool isAttacker\n    ) internal view returns (bool, uint256) {\n        bool isTriggered = false;\n        uint256 multiplier = 0;\n        if (reqCode == 0) {\n            // No requirement\n            isTriggered = true;\n            multiplier = 1;\n        } else if (reqCode == 1) {\n            // Intelligence of offense pepemon <= 5.\n            isTriggered = (atkHand.currentBCstats.inte <= 5 );\n            multiplier = 1;\n\n        } else if (reqCode == 2) {\n            // Number of defense cards of defense pepemon is 0.\n            isTriggered = true;\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardType supportCardType = _cardContract.getSupportCardTypeById(\n                    defHand.supportCardInHandIds[i]\n                );\n                if (supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\n                    isTriggered = false;\n                    break;\n                }\n            }\n            multiplier = 1;\n        } else if (reqCode == 3) {\n            // Each +2 offense cards of offense pepemon.\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\n                    atkHand.supportCardInHandIds[i]\n                );\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\n                    continue;\n                }\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\n                    if (effectOne.basePower == 2) {\n                        multiplier++;\n                    }\n                }\n            }\n            isTriggered = (multiplier > 0 );\n        } else if (reqCode == 4) {\n            // Each +3 offense cards of offense pepemon.\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\n                    atkHand.supportCardInHandIds[i]\n                );\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\n                    continue;\n                }\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\n                    if (effectOne.basePower == 3) {\n                        multiplier++;\n                    }\n                }\n            }\n            isTriggered = (multiplier > 0 );\n        } else if (reqCode == 5) {\n            // Each offense card of offense pepemon.\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\n                    atkHand.supportCardInHandIds[i]\n                );\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\n                    continue;\n                }\n                multiplier++;\n            }\n            isTriggered = (multiplier > 0 );\n        } else if (reqCode == 6) {\n            // Each +3 defense card of defense pepemon.\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\n                    defHand.supportCardInHandIds[i]\n                );\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\n                    continue;\n                }\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\n                    if (effectOne.basePower == 3) {\n                        multiplier++;\n                    }\n                }\n            }\n            isTriggered = (multiplier > 0 );\n        } else if (reqCode == 7) {\n            // Each +4 defense card of defense pepemon.\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\n                    defHand.supportCardInHandIds[i]\n                );\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\n                    continue;\n                }\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\n                    if (effectOne.basePower == 4) {\n                        multiplier++;\n                    }\n                }\n            }\n            isTriggered = (multiplier > 0 );\n        } else if (reqCode == 8) {\n            // Intelligence of defense pepemon <= 5.\n            isTriggered = (defHand.currentBCstats.inte <= 5 );\n            multiplier = 1;\n        } else if (reqCode == 9) {\n            // Intelligence of defense pepemon >= 7.\n            isTriggered = (defHand.currentBCstats.inte >= 7 );\n            multiplier = 1;\n        } else if (reqCode == 10) {\n            // Offense pepemon is using strong attack\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\n                    atkHand.supportCardInHandIds[i]\n                );\n                if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\n                    isTriggered = true;\n                    break;\n                }\n            }\n            multiplier = 1;\n        } else if (reqCode == 11) {\n            // The current HP is less than 50% of max HP.\n            if (isAttacker) {\n                isTriggered = (\n                    atkHand.health * 2 <= int256(_cardContract.getBattleCardById(atkHand.battleCardId).hp)\n                );\n            } else {\n                isTriggered = (\n                    defHand.health * 2 <= int256(_cardContract.getBattleCardById(defHand.battleCardId).hp)\n\n                );\n            }\n            multiplier = 1;\n        }\n        return (isTriggered, multiplier);\n    }\n}\n\n\n"
    },
    "contracts/lib/AdminRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Roles.sol\";\n\ncontract AdminRole {\n  using Roles for Roles.Role;\n\n  event AdminAdded(address indexed account);\n  event AdminRemoved(address indexed account);\n\n  Roles.Role private admins;\n\n  constructor() {\n    _addAdmin(msg.sender);\n  }\n\n  modifier onlyAdmin() {\n    require(isAdmin(msg.sender));\n    _;\n  }\n\n  function isAdmin(address account) public view returns (bool) {\n    return admins.has(account);\n  }\n\n  function addAdmin(address account) public onlyAdmin {\n    _addAdmin(account);\n  }\n\n  function renounceAdmin() public {\n    _removeAdmin(msg.sender);\n  }\n\n  function _addAdmin(address account) internal {\n    admins.add(account);\n    emit AdminAdded(account);\n  }\n\n  function _removeAdmin(address account) internal {\n    admins.remove(account);\n    emit AdminRemoved(account);\n  }\n}"
    },
    "contracts/PepemonCardDeck.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n//pragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./PepemonFactory.sol\";\nimport \"./PepemonCardOracle.sol\";\nimport \"./lib/Arrays.sol\";\n\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\n    using SafeMath for uint256;\n\n    struct Deck {\n        uint256 battleCardId;\n        uint256 supportCardCount;\n        mapping(uint256 => SupportCardType) supportCardTypes;\n        uint256[] supportCardTypeList;\n    }\n\n    struct SupportCardType {\n        uint256 supportCardId;\n        uint256 count;\n        uint256 pointer;\n        bool isEntity;\n    }\n\n    struct SupportCardRequest {\n        uint256 supportCardId;\n        uint256 amount;\n    }\n\n    uint256 public MAX_SUPPORT_CARDS;\n    uint256 public MIN_SUPPORT_CARDS;\n\n    uint256 nextDeckId;\n    address public battleCardAddress;\n    address public supportCardAddress;\n\n    mapping(uint256 => Deck) public decks;\n    mapping(address => uint256[]) public playerToDecks;\n\n    constructor() ERC721(\"Pepedeck\", \"Pepedeck\") {\n        nextDeckId = 1;\n        MAX_SUPPORT_CARDS = 60;\n        MIN_SUPPORT_CARDS = 40;\n    }\n\n    /**\n     * @dev Override supportInterface .\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, ERC1155Receiver)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // MODIFIERS\n    modifier sendersDeck(uint256 _deckId) {\n        require(msg.sender == ownerOf(_deckId), \"PepemonCardDeck: Not your deck\");\n        _;\n    }\n\n    // PUBLIC METHODS\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\n        battleCardAddress = _battleCardAddress;\n    }\n\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\n        supportCardAddress = _supportCardAddress;\n    }\n\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\n        MAX_SUPPORT_CARDS = _maxSupportCards;\n    }\n\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\n        MIN_SUPPORT_CARDS = _minSupportCards;\n    }\n\n    function createDeck() public {\n        _safeMint(msg.sender, nextDeckId);\n        playerToDecks[msg.sender].push(nextDeckId);\n        nextDeckId = nextDeckId.add(1);\n    }\n\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\n        require(\n            PepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\n            \"PepemonCardDeck: Don't own battle card\"\n        );\n\n        require(battleCardId != decks[deckId].battleCardId, \"PepemonCardDeck: Card already in deck\");\n\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\n        decks[deckId].battleCardId = battleCardId;\n\n        PepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \"\");\n\n        returnBattleCardFromDeck(oldBattleCardId);\n    }\n\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\n\n        decks[_deckId].battleCardId = 0;\n\n        returnBattleCardFromDeck(oldBattleCardId);\n    }\n\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\n        for (uint256 i = 0; i < supportCards.length; i++) {\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\n        }\n    }\n\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\n        for (uint256 i = 0; i < _supportCards.length; i++) {\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\n        }\n    }\n\n    // INTERNALS\n    function addSupportCardToDeck(\n        uint256 _deckId,\n        uint256 _supportCardId,\n        uint256 _amount\n    ) internal {\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \"PepemonCardDeck: Deck overflow\");\n        require(\n            PepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\n            \"PepemonCardDeck: You don't have enough of this card\"\n        );\n\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\n                supportCardId: _supportCardId,\n                count: _amount,\n                pointer: decks[_deckId].supportCardTypeList.length,\n                isEntity: true\n            });\n\n            // Prepend the ID to the list\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\n        } else {\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\n            supportCard.count = supportCard.count.add(_amount);\n        }\n\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\n\n        PepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \"\");\n    }\n\n    function removeSupportCardFromDeck(\n        uint256 _deckId,\n        uint256 _supportCardId,\n        uint256 _amount\n    ) internal {\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\n        supportCardList.count = supportCardList.count.sub(_amount);\n\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\n\n        if (supportCardList.count == 0) {\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\n\n            // update the pointer of the item to be swapped\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\n\n            // swap the last item of the list with the one to be deleted\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\n            decks[_deckId].supportCardTypeList.pop();\n\n            delete decks[_deckId].supportCardTypes[_supportCardId];\n        }\n\n        PepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \"\");\n    }\n\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\n        if (_battleCardId != 0) {\n            PepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \"\");\n        }\n    }\n\n    // VIEWS\n    function getDeckCount(address player) public view returns (uint256) {\n        return playerToDecks[player].length;\n    }\n\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\n        return decks[_deckId].battleCardId;\n    }\n\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\n        Deck storage deck = decks[_deckId];\n\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\n\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\n            supportCardTypes[i] = deck.supportCardTypeList[i];\n        }\n\n        return supportCardTypes;\n    }\n\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\n    }\n\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\n        return decks[deckId].supportCardCount;\n    }\n\n    /**\n     * @dev Returns array of support cards for a deck\n     * @param _deckId uint256 ID of the deck\n     */\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\n        Deck storage deck = decks[_deckId];\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\n        uint256 idx = 0;\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\n            uint256 supportCardId = deck.supportCardTypeList[i];\n            for (uint256 j = 0; j < deck.supportCardTypes[supportCardId].count; j++) {\n                supportCards[idx++] = supportCardId;\n            }\n        }\n        return supportCards;\n    }\n\n    /**\n     * @dev Shuffles deck\n     * @param _deckId uint256 ID of the deck\n     */\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\n        return Arrays.shuffle(totalSupportCards, _seed);\n    }\n}\n"
    },
    "contracts/PepemonCardOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./lib/AdminRole.sol\";\n\n/**\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\n**/\ncontract PepemonCardOracle is AdminRole {\n    enum BattleCardType {\n        PLANT,\n        FIRE\n    }\n\n    enum SupportCardType {\n        OFFENSE,\n        STRONG_OFFENSE,\n        DEFENSE,\n        STRONG_DEFENSE\n    }\n\n    enum EffectTo {\n        ATTACK,\n        STRONG_ATTACK,\n        DEFENSE,\n        STRONG_DEFENSE,\n        SPEED,\n        INTELLIGENCE\n    }\n\n    enum EffectFor {\n        ME,\n        ENEMY\n    }\n\n    struct BattleCardStats {\n        uint256 battleCardId;\n        BattleCardType battleCardType;\n        string name;\n        uint256 hp; // hitpoints\n        uint256 spd; // speed\n        uint256 inte; // intelligence\n        uint256 def; // defense\n        uint256 atk; // attack\n        uint256 sAtk; // special attack\n        uint256 sDef; // special defense\n    }\n\n    struct SupportCardStats {\n        uint256 supportCardId;\n        SupportCardType supportCardType;\n        string name;\n        EffectOne[] effectOnes;\n        EffectMany effectMany;\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\n        bool unstackable;\n        // This property is for EffectMany now.\n        // If true, assume the card is already in effect\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\n        bool unresettable;\n    }\n\n    struct EffectOne {\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\n        \n        //basePower = power if req not met\n        int256 basePower;\n\n        //triggeredPower = power if req met\n        int256 triggeredPower;\n        EffectTo effectTo;\n        EffectFor effectFor;\n        uint256 reqCode; //requirement code\n    }\n\n    struct EffectMany {\n        int256 power;\n        uint256 numTurns;\n        EffectTo effectTo;\n        EffectFor effectFor;\n        uint256 reqCode; //requirement code\n    }\n\n    mapping(uint256 => BattleCardStats) public battleCardStats;\n    mapping(uint256 => SupportCardStats) public supportCardStats;\n\n    event BattleCardCreated(address sender, uint256 cardId);\n    event BattleCardUpdated(address sender, uint256 cardId);\n    event SupportCardCreated(address sender, uint256 cardId);\n    event SupportCardUpdated(address sender, uint256 cardId);\n\n    function addBattleCard(BattleCardStats memory cardData) public onlyAdmin {\n        require(battleCardStats[cardData.battleCardId].battleCardId == 0, \"PepemonCard: BattleCard already exists\");\n\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\n        _card.battleCardId = cardData.battleCardId;\n        _card.battleCardType = cardData.battleCardType;\n        _card.name = cardData.name;\n        _card.hp = cardData.hp;\n        _card.spd = cardData.spd;\n        _card.inte = cardData.inte;\n        _card.def = cardData.def;\n        _card.atk = cardData.atk;\n        _card.sDef = cardData.sDef;\n        _card.sAtk = cardData.sAtk;\n\n        emit BattleCardCreated(msg.sender, cardData.battleCardId);\n    }\n\n    function updateBattleCard(BattleCardStats memory cardData) public onlyAdmin {\n        require(battleCardStats[cardData.battleCardId].battleCardId != 0, \"PepemonCard: BattleCard not found\");\n\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\n        _card.hp = cardData.hp;\n        _card.battleCardType = cardData.battleCardType;\n        _card.name = cardData.name;\n        _card.spd = cardData.spd;\n        _card.inte = cardData.inte;\n        _card.def = cardData.def;\n        _card.atk = cardData.atk;\n        _card.sDef = cardData.sDef;\n        _card.sAtk = cardData.sAtk;\n\n        emit BattleCardUpdated(msg.sender, cardData.battleCardId);\n    }\n\n    function getBattleCardById(uint256 _id) public view returns (BattleCardStats memory) {\n        require(battleCardStats[_id].battleCardId != 0, \"PepemonCard: BattleCard not found\");\n        return battleCardStats[_id];\n    }\n\n    function addSupportCard(SupportCardStats memory cardData) public onlyAdmin {\n        require(supportCardStats[cardData.supportCardId].supportCardId == 0, \"PepemonCard: SupportCard already exists\");\n\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\n        _card.supportCardId = cardData.supportCardId;\n        _card.supportCardType = cardData.supportCardType;\n        _card.name = cardData.name;\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\n            _card.effectOnes.push(cardData.effectOnes[i]);\n        }\n        _card.effectMany = cardData.effectMany;\n        _card.unstackable = cardData.unstackable;\n        _card.unresettable = cardData.unresettable;\n\n        emit SupportCardCreated(msg.sender, cardData.supportCardId);\n    }\n\n    function updateSupportCard(SupportCardStats memory cardData) public onlyAdmin {\n        require(supportCardStats[cardData.supportCardId].supportCardId != 0, \"PepemonCard: SupportCard not found\");\n\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\n        _card.supportCardId = cardData.supportCardId;\n        _card.supportCardType = cardData.supportCardType;\n        _card.name = cardData.name;\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\n            _card.effectOnes.push(cardData.effectOnes[i]);\n        }\n        _card.effectMany = cardData.effectMany;\n        _card.unstackable = cardData.unstackable;\n        _card.unresettable = cardData.unresettable;\n\n        emit SupportCardUpdated(msg.sender, cardData.supportCardId);\n    }\n\n    function getSupportCardById(uint256 _id) public view returns (SupportCardStats memory) {\n        require(supportCardStats[_id].supportCardId != 0, \"PepemonCard: SupportCard not found\");\n        return supportCardStats[_id];\n    }\n\n    /**\n     * @dev Get supportCardType of supportCard\n     * @param _id uint256\n     */\n    function getSupportCardTypeById(uint256 _id) public view returns (SupportCardType) {\n        return getSupportCardById(_id).supportCardType;\n    }\n}\n"
    },
    "contracts/lib/ChainLinkRngOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\nimport \"./AdminRole.sol\";\n\nabstract contract ChainLinkRngOracle is VRFConsumerBase, AdminRole {\n    bytes32 immutable keyHash;\n    bytes32 public lastRequestId;\n    uint256 internal fee;\n\n    address constant maticLink = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\n    address constant maticVrfCoordinator = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\n    bytes32 constant maticKeyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\n\n    address constant mumbaiLink = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\n    address constant mumbaiVrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;\n    bytes32 constant mumbaiKeyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\n\n\n\n    mapping(bytes32 => uint256) internal results;\n\n    constructor() VRFConsumerBase(mumbaiVrfCoordinator, mumbaiLink) {\n        keyHash = mumbaiKeyHash;\n        fee = 1 ether / 1000;\n    }\n\n    //Get a new random number (paying link for it)\n    //Only callable by admin\n    function getNewRandomNumber() public onlyAdmin returns (bytes32 requestId) {\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n        lastRequestId = requestRandomness(keyHash, fee);\n        return lastRequestId;\n    }\n\n    /**\n     * Callback function used by VRF Coordinator\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        results[requestId] = randomness;\n    }\n\n    function fetchNumberByRequestId(bytes32 _requestId) public view returns (uint256) {\n        return results[_requestId];\n    }\n\n    //Get most recent random number and use that as randomness source    \n    function getRandomNumber() public view returns (uint256){\n        return fetchNumberByRequestId(lastRequestId);        \n    }\n}\n"
    },
    "contracts/lib/Roles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}"
    },
    "contracts/PepemonFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface PepemonFactory {\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n}\n"
    },
    "contracts/lib/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Arrays {\n    //Shuffles an array of uints with random seed\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\n        for (uint256 i = 0; i < _elements.length; i++) {\n            //Pick random index to swap current element with\n            uint256 n = i + _seed % (_elements.length - i);\n\n            //swap elements\n            uint256 temp = _elements[n];\n            _elements[n] = _elements[i];\n            _elements[i] = temp;\n\n            //Create new pseudorandom number using seed.\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\n        }\n        return _elements;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"./extensions/IERC721Enumerable.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping (uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping (address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId\n            || interfaceId == type(IERC721Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\n            : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n     * in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    internal\n    virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(\n    bytes32 _keyHash,\n    uint256 _fee\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(\n    address _vrfCoordinator,\n    address _link\n  ) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    external\n  {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash,\n    uint256 _vRFInputSeed\n  )\n    internal\n    pure\n    returns (\n      bytes32\n    )\n  {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}