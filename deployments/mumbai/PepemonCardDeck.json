{
  "address": "0xa784b4fcFe0cF627aD2Be650d5467597FCFBFf67",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPORT_CARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_SUPPORT_CARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deckId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "battleCardId",
          "type": "uint256"
        }
      ],
      "name": "addBattleCardToDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deckId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "supportCardId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PepemonCardDeck.SupportCardRequest[]",
          "name": "supportCards",
          "type": "tuple[]"
        }
      ],
      "name": "addSupportCardsToDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleCardAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "battleCardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportCardCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        }
      ],
      "name": "getAllSupportCardsInDeck",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        }
      ],
      "name": "getBattleCardInDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        }
      ],
      "name": "getCardTypesInDeck",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cardTypeId",
          "type": "uint256"
        }
      ],
      "name": "getCountOfCardTypeInDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getDeckCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deckId",
          "type": "uint256"
        }
      ],
      "name": "getSupportCardCountInDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerToDecks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        }
      ],
      "name": "removeBattleCardFromDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "supportCardId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PepemonCardDeck.SupportCardRequest[]",
          "name": "_supportCards",
          "type": "tuple[]"
        }
      ],
      "name": "removeSupportCardsFromDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battleCardAddress",
          "type": "address"
        }
      ],
      "name": "setBattleCardAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupportCards",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupportCards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSupportCards",
          "type": "uint256"
        }
      ],
      "name": "setMinSupportCards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supportCardAddress",
          "type": "address"
        }
      ],
      "name": "setSupportCardAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deckId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "shuffleDeck",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportCardAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd512c48b7b2e397a624d4f21ed4f263742d6b58a9d1e7f765e08c1dd196b142d",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0xa784b4fcFe0cF627aD2Be650d5467597FCFBFf67",
    "transactionIndex": 11,
    "gasUsed": "2702471",
    "logsBloom": "0x
    "blockHash": "0xf1c074f17d0cd9f80d840b38bcef9cab57b6e771e7fe2d7bb519a9429628cc89",
    "transactionHash": "0xd512c48b7b2e397a624d4f21ed4f263742d6b58a9d1e7f765e08c1dd196b142d",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 29436557,
        "transactionHash": "0xd512c48b7b2e397a624d4f21ed4f263742d6b58a9d1e7f765e08c1dd196b142d",
        "address": "0xa784b4fcFe0cF627aD2Be650d5467597FCFBFf67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0xf1c074f17d0cd9f80d840b38bcef9cab57b6e771e7fe2d7bb519a9429628cc89"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 29436557,
        "transactionHash": "0xd512c48b7b2e397a624d4f21ed4f263742d6b58a9d1e7f765e08c1dd196b142d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000e66d2bee1096100000000000000000000000000000000000000000000000004ab9518fdc3aea7000000000000000000000000000000000000000000000036ba781c12aed096b9000000000000000000000000000000000000000000000000049d2e463ee2a546000000000000000000000000000000000000000000000036ba8682e56db1a01a",
        "logIndex": 74,
        "blockHash": "0xf1c074f17d0cd9f80d840b38bcef9cab57b6e771e7fe2d7bb519a9429628cc89"
      }
    ],
    "blockNumber": 29436557,
    "cumulativeGasUsed": "3990139",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2f700ce0025dbe31f0959fdb51ecc9da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPORT_CARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SUPPORT_CARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"}],\"name\":\"addBattleCardToDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardDeck.SupportCardRequest[]\",\"name\":\"supportCards\",\"type\":\"tuple[]\"}],\"name\":\"addSupportCardsToDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleCardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportCardCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"}],\"name\":\"getAllSupportCardsInDeck\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"}],\"name\":\"getBattleCardInDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"}],\"name\":\"getCardTypesInDeck\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cardTypeId\",\"type\":\"uint256\"}],\"name\":\"getCountOfCardTypeInDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getDeckCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"}],\"name\":\"getSupportCardCountInDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerToDecks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"}],\"name\":\"removeBattleCardFromDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardDeck.SupportCardRequest[]\",\"name\":\"_supportCards\",\"type\":\"tuple[]\"}],\"name\":\"removeSupportCardsFromDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battleCardAddress\",\"type\":\"address\"}],\"name\":\"setBattleCardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupportCards\",\"type\":\"uint256\"}],\"name\":\"setMaxSupportCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSupportCards\",\"type\":\"uint256\"}],\"name\":\"setMinSupportCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supportCardAddress\",\"type\":\"address\"}],\"name\":\"setSupportCardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deckId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"shuffleDeck\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportCardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getAllSupportCardsInDeck(uint256)\":{\"details\":\"Returns array of support cards for a deck\",\"params\":{\"_deckId\":\"uint256 ID of the deck\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"shuffleDeck(uint256,uint256)\":{\"details\":\"Shuffles deck\",\"params\":{\"_deckId\":\"uint256 ID of the deck\"}},\"supportsInterface(bytes4)\":{\"details\":\"Override supportInterface .\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonCardDeck.sol\":\"PepemonCardDeck\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/PepemonCardDeck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n//pragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PepemonFactory.sol\\\";\\nimport \\\"./PepemonCardOracle.sol\\\";\\nimport \\\"./lib/Arrays.sol\\\";\\n\\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\\n    using SafeMath for uint256;\\n\\n    struct Deck {\\n        uint256 battleCardId;\\n        uint256 supportCardCount;\\n        mapping(uint256 => SupportCardType) supportCardTypes;\\n        uint256[] supportCardTypeList;\\n    }\\n\\n    struct SupportCardType {\\n        uint256 supportCardId;\\n        uint256 count;\\n        uint256 pointer;\\n        bool isEntity;\\n    }\\n\\n    struct SupportCardRequest {\\n        uint256 supportCardId;\\n        uint256 amount;\\n    }\\n\\n    uint256 public MAX_SUPPORT_CARDS;\\n    uint256 public MIN_SUPPORT_CARDS;\\n\\n    uint256 nextDeckId;\\n    address public battleCardAddress;\\n    address public supportCardAddress;\\n\\n    mapping(uint256 => Deck) public decks;\\n    mapping(address => uint256[]) public playerToDecks;\\n\\n    constructor() ERC721(\\\"Pepedeck\\\", \\\"Pepedeck\\\") {\\n        nextDeckId = 1;\\n        MAX_SUPPORT_CARDS = 60;\\n        MIN_SUPPORT_CARDS = 40;\\n    }\\n\\n    /**\\n     * @dev Override supportInterface .\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC1155Receiver)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // MODIFIERS\\n    modifier sendersDeck(uint256 _deckId) {\\n        require(msg.sender == ownerOf(_deckId), \\\"PepemonCardDeck: Not your deck\\\");\\n        _;\\n    }\\n\\n    // PUBLIC METHODS\\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\\n        battleCardAddress = _battleCardAddress;\\n    }\\n\\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\\n        supportCardAddress = _supportCardAddress;\\n    }\\n\\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\\n        MAX_SUPPORT_CARDS = _maxSupportCards;\\n    }\\n\\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\\n        MIN_SUPPORT_CARDS = _minSupportCards;\\n    }\\n\\n    function createDeck() public {\\n        _safeMint(msg.sender, nextDeckId);\\n        playerToDecks[msg.sender].push(nextDeckId);\\n        nextDeckId = nextDeckId.add(1);\\n    }\\n\\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\\n        require(\\n            PepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\\n            \\\"PepemonCardDeck: Don't own battle card\\\"\\n        );\\n\\n        require(battleCardId != decks[deckId].battleCardId, \\\"PepemonCardDeck: Card already in deck\\\");\\n\\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\\n        decks[deckId].battleCardId = battleCardId;\\n\\n        PepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \\\"\\\");\\n\\n        returnBattleCardFromDeck(oldBattleCardId);\\n    }\\n\\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\\n\\n        decks[_deckId].battleCardId = 0;\\n\\n        returnBattleCardFromDeck(oldBattleCardId);\\n    }\\n\\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\\n        for (uint256 i = 0; i < supportCards.length; i++) {\\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\\n        }\\n    }\\n\\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\\n        for (uint256 i = 0; i < _supportCards.length; i++) {\\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\\n        }\\n    }\\n\\n    // INTERNALS\\n    function addSupportCardToDeck(\\n        uint256 _deckId,\\n        uint256 _supportCardId,\\n        uint256 _amount\\n    ) internal {\\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \\\"PepemonCardDeck: Deck overflow\\\");\\n        require(\\n            PepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\\n            \\\"PepemonCardDeck: You don't have enough of this card\\\"\\n        );\\n\\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\\n                supportCardId: _supportCardId,\\n                count: _amount,\\n                pointer: decks[_deckId].supportCardTypeList.length,\\n                isEntity: true\\n            });\\n\\n            // Prepend the ID to the list\\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\\n        } else {\\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\\n            supportCard.count = supportCard.count.add(_amount);\\n        }\\n\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\\n\\n        PepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \\\"\\\");\\n    }\\n\\n    function removeSupportCardFromDeck(\\n        uint256 _deckId,\\n        uint256 _supportCardId,\\n        uint256 _amount\\n    ) internal {\\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\\n        supportCardList.count = supportCardList.count.sub(_amount);\\n\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\\n\\n        if (supportCardList.count == 0) {\\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\\n\\n            // update the pointer of the item to be swapped\\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\\n\\n            // swap the last item of the list with the one to be deleted\\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\\n            decks[_deckId].supportCardTypeList.pop();\\n\\n            delete decks[_deckId].supportCardTypes[_supportCardId];\\n        }\\n\\n        PepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \\\"\\\");\\n    }\\n\\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\\n        if (_battleCardId != 0) {\\n            PepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \\\"\\\");\\n        }\\n    }\\n\\n    // VIEWS\\n    function getDeckCount(address player) public view returns (uint256) {\\n        return playerToDecks[player].length;\\n    }\\n\\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\\n        return decks[_deckId].battleCardId;\\n    }\\n\\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\n        Deck storage deck = decks[_deckId];\\n\\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\\n\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\n            supportCardTypes[i] = deck.supportCardTypeList[i];\\n        }\\n\\n        return supportCardTypes;\\n    }\\n\\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\\n    }\\n\\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\\n        return decks[deckId].supportCardCount;\\n    }\\n\\n    /**\\n     * @dev Returns array of support cards for a deck\\n     * @param _deckId uint256 ID of the deck\\n     */\\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\n        Deck storage deck = decks[_deckId];\\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\\n        uint256 idx = 0;\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\n            uint256 supportCardId = deck.supportCardTypeList[i];\\n            for (uint256 j = 0; j < deck.supportCardTypes[supportCardId].count; j++) {\\n                supportCards[idx++] = supportCardId;\\n            }\\n        }\\n        return supportCards;\\n    }\\n\\n    /**\\n     * @dev Shuffles deck\\n     * @param _deckId uint256 ID of the deck\\n     */\\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\\n        return Arrays.shuffle(totalSupportCards, _seed);\\n    }\\n}\\n\",\"keccak256\":\"0xd7dd58a2dc42f98d02cdbc31db7c14314b001b6a9fedb86fc1d21c65611ef3c9\",\"license\":\"MIT\"},\"contracts/PepemonCardOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/AdminRole.sol\\\";\\n\\n/**\\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\\n**/\\ncontract PepemonCardOracle is AdminRole {\\n    enum BattleCardType {\\n        PLANT,\\n        FIRE\\n    }\\n\\n    enum SupportCardType {\\n        OFFENSE,\\n        STRONG_OFFENSE,\\n        DEFENSE,\\n        STRONG_DEFENSE\\n    }\\n\\n    enum EffectTo {\\n        ATTACK,\\n        STRONG_ATTACK,\\n        DEFENSE,\\n        STRONG_DEFENSE,\\n        SPEED,\\n        INTELLIGENCE\\n    }\\n\\n    enum EffectFor {\\n        ME,\\n        ENEMY\\n    }\\n\\n    struct BattleCardStats {\\n        uint256 battleCardId;\\n        BattleCardType battleCardType;\\n        string name;\\n        uint256 hp; // hitpoints\\n        uint256 spd; // speed\\n        uint256 inte; // intelligence\\n        uint256 def; // defense\\n        uint256 atk; // attack\\n        uint256 sAtk; // special attack\\n        uint256 sDef; // special defense\\n    }\\n\\n    struct SupportCardStats {\\n        uint256 supportCardId;\\n        SupportCardType supportCardType;\\n        string name;\\n        EffectOne[] effectOnes;\\n        EffectMany effectMany;\\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\\n        bool unstackable;\\n        // This property is for EffectMany now.\\n        // If true, assume the card is already in effect\\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\\n        bool unresettable;\\n    }\\n\\n    struct EffectOne {\\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\\n        \\n        //basePower = power if req not met\\n        int256 basePower;\\n\\n        //triggeredPower = power if req met\\n        int256 triggeredPower;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    struct EffectMany {\\n        int256 power;\\n        uint256 numTurns;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    mapping(uint256 => BattleCardStats) public battleCardStats;\\n    mapping(uint256 => SupportCardStats) public supportCardStats;\\n\\n    event BattleCardCreated(address sender, uint256 cardId);\\n    event BattleCardUpdated(address sender, uint256 cardId);\\n    event SupportCardCreated(address sender, uint256 cardId);\\n    event SupportCardUpdated(address sender, uint256 cardId);\\n\\n    function addBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId == 0, \\\"PepemonCard: BattleCard already exists\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.battleCardId = cardData.battleCardId;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.hp = cardData.hp;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardCreated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function updateBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.hp = cardData.hp;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardUpdated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function getBattleCardById(uint256 _id) public view returns (BattleCardStats memory) {\\n        require(battleCardStats[_id].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n        return battleCardStats[_id];\\n    }\\n\\n    function addSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId == 0, \\\"PepemonCard: SupportCard already exists\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardCreated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function updateSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardUpdated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function getSupportCardById(uint256 _id) public view returns (SupportCardStats memory) {\\n        require(supportCardStats[_id].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n        return supportCardStats[_id];\\n    }\\n\\n    /**\\n     * @dev Get supportCardType of supportCard\\n     * @param _id uint256\\n     */\\n    function getSupportCardTypeById(uint256 _id) public view returns (SupportCardType) {\\n        return getSupportCardById(_id).supportCardType;\\n    }\\n}\\n\",\"keccak256\":\"0x491c921c6ca5ce63e59a94385e481fb4ae7b7ffa84949bbb4765c34592684cb7\",\"license\":\"MIT\"},\"contracts/PepemonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface PepemonFactory {\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f04dfad7e690dca80f5924be4849209f7032ab29e1597745424ec6913ae459b\",\"license\":\"MIT\"},\"contracts/lib/AdminRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AdminRole {\\n  using Roles for Roles.Role;\\n\\n  event AdminAdded(address indexed account);\\n  event AdminRemoved(address indexed account);\\n\\n  Roles.Role private admins;\\n\\n  constructor() {\\n    _addAdmin(msg.sender);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender));\\n    _;\\n  }\\n\\n  function isAdmin(address account) public view returns (bool) {\\n    return admins.has(account);\\n  }\\n\\n  function addAdmin(address account) public onlyAdmin {\\n    _addAdmin(account);\\n  }\\n\\n  function renounceAdmin() public {\\n    _removeAdmin(msg.sender);\\n  }\\n\\n  function _addAdmin(address account) internal {\\n    admins.add(account);\\n    emit AdminAdded(account);\\n  }\\n\\n  function _removeAdmin(address account) internal {\\n    admins.remove(account);\\n    emit AdminRemoved(account);\\n  }\\n}\",\"keccak256\":\"0x087322ecbf7bdc39315bedc5ec603149a119a35910f82ceb131820c1b7bb9804\",\"license\":\"MIT\"},\"contracts/lib/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Arrays {\\n    //Shuffles an array of uints with random seed\\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            //Pick random index to swap current element with\\n            uint256 n = i + _seed % (_elements.length - i);\\n\\n            //swap elements\\n            uint256 temp = _elements[n];\\n            _elements[n] = _elements[i];\\n            _elements[i] = temp;\\n\\n            //Create new pseudorandom number using seed.\\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\\n        }\\n        return _elements;\\n    }\\n}\\n\",\"keccak256\":\"0x61371b66c2b9849ea3837a60073233c577f8978017339fcd3bf169cb498a1828\",\"license\":\"MIT\"},\"contracts/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an account access to this role\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(!has(role, account));\\n\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev remove an account's access to this role\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(has(role, account));\\n\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev check if an account has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address account)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    require(account != address(0));\\n    return role.bearer[account];\\n  }\\n}\",\"keccak256\":\"0xd66f1c8050d61971204bf1249496bd98b69fd79b2011a630767f817d7201b56c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600880825267506570656465636b60c01b6020808401828152855180870190965292855284015281519192916200005591600091620000e7565b5080516200006b906001906020840190620000e7565b505050600062000080620000e360201b60201c565b600680546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600955603c6007556028600855620001ca565b3390565b828054620000f5906200018d565b90600052602060002090601f01602090048101928262000119576000855562000164565b82601f106200013457805160ff191683800117855562000164565b8280016001018555821562000164579182015b828111156200016457825182559160200191906001019062000147565b506200017292915062000176565b5090565b5b8082111562000172576000815560010162000177565b600281046001821680620001a257607f821691505b60208210811415620001c457634e487b7160e01b600052602260045260246000fd5b50919050565b612d5a80620001da6000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c8063715018a61161013b578063b226ef76116100b8578063e6624c321161007c578063e6624c32146104f5578063e985e9c5146104fd578063ef0c4ecf14610510578063f23a6e6114610523578063f2fde38b1461053657610248565b8063b226ef7614610489578063b88d4fde1461049c578063bc197c81146104af578063c87b56dd146104cf578063dc10b8bd146104e257610248565b80639895d749116100ff5780639895d7491461041c578063a090195d1461042f578063a22cb46514610450578063a4c6f63e14610463578063aabd8ff01461047657610248565b8063715018a6146103de57806372c47220146103e65780637b8ef827146103f95780638da5cb5b1461040c57806395d89b411461041457610248565b80633f6b7f97116101c957806365aab7341161018d57806365aab734146103955780636e4c16521461039d57806370104298146103b0578063706f75f2146103c357806370a08231146103cb57610248565b80633f6b7f971461034157806342842e0e146103545780634f3d4f9a146103675780636352211e1461037a5780636524b62f1461038d57610248565b806317afd5681161021057806317afd568146102d357806318ee7396146102f357806323b872dd146103135780632ed38bfc1461032657806330ecf94e1461033957610248565b806301ffc9a71461024d57806306fdde0314610276578063081812fc1461028b57806308bf8ae4146102ab578063095ea7b3146102c0575b600080fd5b61026061025b366004612309565b610549565b60405161026d91906125b2565b60405180910390f35b61027e61055c565b60405161026d91906125d2565b61029e610299366004612341565b6105ee565b60405161026d91906124cc565b6102be6102b93660046120b0565b61063a565b005b6102be6102ce3660046122e0565b61069b565b6102e66102e1366004612341565b610733565b60405161026d919061256e565b6103066103013660046120b0565b61081e565b60405161026d91906124c3565b6102be6103213660046121a2565b610839565b6102be610334366004612447565b610871565b610306610a05565b61030661034f3660046122e0565b610a0b565b6102be6103623660046121a2565b610a3c565b610306610375366004612447565b610a57565b61029e610388366004612341565b610a7b565b61029e610ab0565b610306610abf565b6102e66103ab366004612341565b610ac5565b6102be6103be366004612341565b610bf6565b61029e610c4c565b6103066103d93660046120b0565b610c5b565b6102be610c9f565b6102be6103f43660046120b0565b610d28565b6102e6610407366004612447565b610d89565b61029e610daa565b61027e610db9565b61030661042a366004612341565b610dc8565b61044261043d366004612341565b610ddd565b60405161026d929190612b97565b6102be61045e3660046122a6565b610df6565b610306610471366004612341565b610ec4565b6102be610484366004612341565b610ed6565b6102be610497366004612371565b610f1a565b6102be6104aa3660046121dd565b610fd3565b6104c26104bd3660046120fc565b61100c565b60405161026d91906125bd565b61027e6104dd366004612341565b61101d565b6102be6104f0366004612341565b6110a0565b6102be6110e4565b61026061050b3660046120ca565b61112b565b6102be61051e366004612371565b611159565b6104c2610531366004612243565b611212565b6102be6105443660046120b0565b611223565b6000610554826112e4565b90505b919050565b60606000805461056b90612c62565b80601f016020809104026020016040519081016040528092919081815260200182805461059790612c62565b80156105e45780601f106105b9576101008083540402835291602001916105e4565b820191906000526020600020905b8154815290600101906020018083116105c757829003601f168201915b5050505050905090565b60006105f982611309565b61061e5760405162461bcd60e51b81526004016106159061291c565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b610642611326565b6001600160a01b0316610653610daa565b6001600160a01b0316146106795760405162461bcd60e51b815260040161061590612968565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006106a682610a7b565b9050806001600160a01b0316836001600160a01b031614156106da5760405162461bcd60e51b815260040161061590612ab2565b806001600160a01b03166106ec611326565b6001600160a01b0316148061070857506107088161050b611326565b6107245760405162461bcd60e51b8152600401610615906127c0565b61072e838361132a565b505050565b6000818152600c6020526040812060038101546060929067ffffffffffffffff81111561077057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610799578160200160208202803683370190505b50905060005b6003830154811015610816578260030181815481106107ce57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548282815181106107f957634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061080e81612c9d565b91505061079f565b509392505050565b6001600160a01b03166000908152600d602052604090205490565b61084a610844611326565b82611398565b6108665760405162461bcd60e51b815260040161061590612af3565b61072e838383611415565b8161087b81610a7b565b6001600160a01b0316336001600160a01b0316146108ab5760405162461bcd60e51b8152600401610615906128e5565b600a54604051627eeac760e11b81526001916001600160a01b03169062fdd58e906108dc9033908790600401612555565b60206040518083038186803b1580156108f457600080fd5b505afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c9190612359565b101561094a5760405162461bcd60e51b815260040161061590612a35565b6000838152600c60205260409020548214156109785760405162461bcd60e51b8152600401610615906125e5565b6000838152600c602052604090819020805490849055600a549151637921219560e11b815290916001600160a01b03169063f242432a906109c49033903090889060019060040161251d565b600060405180830381600087803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b505050506109ff81611542565b50505050565b60085481565b600d6020528160005260406000208181548110610a2757600080fd5b90600052602060002001600091509150505481565b61072e83838360405180602001604052806000815250610fd3565b6000918252600c602090815260408084209284526002909201905290206001015490565b6000818152600260205260408120546001600160a01b0316806105545760405162461bcd60e51b815260040161061590612867565b600a546001600160a01b031681565b60075481565b6000818152600c6020526040812060018101546060929067ffffffffffffffff811115610b0257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b2b578160200160208202803683370190505b5090506000805b6003840154811015610bec576000846003018281548110610b6357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905060005b6000828152600287016020526040902060010154811015610bd757818585610b9a81612c9d565b965081518110610bba57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610bcf81612c9d565b915050610b73565b50508080610be490612c9d565b915050610b32565b5090949350505050565b80610c0081610a7b565b6001600160a01b0316336001600160a01b031614610c305760405162461bcd60e51b8152600401610615906128e5565b6000828152600c60205260408120805491905561072e81611542565b600b546001600160a01b031681565b60006001600160a01b038216610c835760405162461bcd60e51b81526004016106159061281d565b506001600160a01b031660009081526003602052604090205490565b610ca7611326565b6001600160a01b0316610cb8610daa565b6001600160a01b031614610cde5760405162461bcd60e51b815260040161061590612968565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b610d30611326565b6001600160a01b0316610d41610daa565b6001600160a01b031614610d675760405162461bcd60e51b815260040161061590612968565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60606000610d9684610ac5565b9050610da281846115b5565b949350505050565b6006546001600160a01b031690565b60606001805461056b90612c62565b6000908152600c602052604090206001015490565b600c602052600090815260409020805460019091015482565b610dfe611326565b6001600160a01b0316826001600160a01b03161415610e2f5760405162461bcd60e51b81526004016106159061273d565b8060056000610e3c611326565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610e80611326565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610eb891906125b2565b60405180910390a35050565b6000908152600c602052604090205490565b610ede611326565b6001600160a01b0316610eef610daa565b6001600160a01b031614610f155760405162461bcd60e51b815260040161061590612968565b600855565b81610f2481610a7b565b6001600160a01b0316336001600160a01b031614610f545760405162461bcd60e51b8152600401610615906128e5565b60005b82518110156109ff57610fc184848381518110610f8457634e487b7160e01b600052603260045260246000fd5b602002602001015160000151858481518110610fb057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516116de565b80610fcb81612c9d565b915050610f57565b610fe4610fde611326565b83611398565b6110005760405162461bcd60e51b815260040161061590612af3565b6109ff84848484611936565b63bc197c8160e01b95945050505050565b606061102882611309565b6110445760405162461bcd60e51b8152600401610615906129e6565b600061104e611969565b9050600081511161106e5760405180602001604052806000815250611099565b806110788461197b565b604051602001611089929190612494565b6040516020818303038152906040525b9392505050565b6110a8611326565b6001600160a01b03166110b9610daa565b6001600160a01b0316146110df5760405162461bcd60e51b815260040161061590612968565b600755565b6110f033600954611a96565b336000908152600d6020908152604082206009805482546001818101855593865293909420909201929092555461112691611ab4565b600955565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b8161116381610a7b565b6001600160a01b0316336001600160a01b0316146111935760405162461bcd60e51b8152600401610615906128e5565b60005b82518110156109ff57611200848483815181106111c357634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518584815181106111ef57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611ac0565b8061120a81612c9d565b915050611196565b63f23a6e6160e01b95945050505050565b61122b611326565b6001600160a01b031661123c610daa565b6001600160a01b0316146112625760405162461bcd60e51b815260040161061590612968565b6001600160a01b0381166112885760405162461bcd60e51b81526004016106159061267c565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216630271189760e51b1480610554575061055482611d2a565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061135f82610a7b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006113a382611309565b6113bf5760405162461bcd60e51b815260040161061590612774565b60006113ca83610a7b565b9050806001600160a01b0316846001600160a01b031614806114055750836001600160a01b03166113fa846105ee565b6001600160a01b0316145b80610da25750610da2818561112b565b826001600160a01b031661142882610a7b565b6001600160a01b03161461144e5760405162461bcd60e51b81526004016106159061299d565b6001600160a01b0382166114745760405162461bcd60e51b8152600401610615906126f9565b61147f83838361072e565b61148a60008261132a565b6001600160a01b03831660009081526003602052604081208054600192906114b3908490612c1f565b90915550506001600160a01b03821660009081526003602052604081208054600192906114e1908490612bf3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b80156115b257600a54604051637921219560e11b81526001600160a01b039091169063f242432a9061157f9030903390869060019060040161251d565b600060405180830381600087803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050505b50565b606060005b83518110156116d65760008185516115d29190612c1f565b6115dc9085612cb8565b6115e69083612bf3565b9050600085828151811061160a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905085838151811061163457634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061165c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508086848151811061168957634e487b7160e01b600052603260045260246000fd5b602002602001018181525050846040516020016116a691906124c3565b6040516020818303038152906040528051906020012060001c9450505080806116ce90612c9d565b9150506115ba565b509192915050565b6000838152600c60205260409020600101546116fa9082611ab4565b600754101561171b5760405162461bcd60e51b815260040161061590612a7b565b600b54604051627eeac760e11b815282916001600160a01b03169062fdd58e9061174b9033908790600401612555565b60206040518083038186803b15801561176357600080fd5b505afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190612359565b10156117b95760405162461bcd60e51b815260040161061590612b44565b6000838152600c6020908152604080832085845260020190915290206003015460ff16611865576040805160808101825283815260208082018481526000878152600c80845285822060038082018054888a01908152600160608a018181528d885260029586018a529a872099518a559651898801555192880192909255965195909601805460ff19169515159590951790945592825283549081018455928252902001829055611897565b6000838152600c60209081526040808320858452600201909152902060018101546118909083611ab4565b6001909101555b6000838152600c60205260409020600101546118b39082611ab4565b6000848152600c60205260409081902060010191909155600b549051637921219560e11b81526001600160a01b039091169063f242432a906118ff90339030908790879060040161251d565b600060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b50505050505050565b611941848484611415565b61194d84848484611d6a565b6109ff5760405162461bcd60e51b81526004016106159061262a565b60408051602081019091526000815290565b6060816119a057506040805180820190915260018152600360fc1b6020820152610557565b8160005b81156119ca57806119b481612c9d565b91506119c39050600a83612c0b565b91506119a4565b60008167ffffffffffffffff8111156119f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a1d576020820181803683370190505b5090505b8415610da257611a32600183612c1f565b9150611a3f600a86612cb8565b611a4a906030612bf3565b60f81b818381518110611a6d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611a8f600a86612c0b565b9450611a21565b611ab0828260405180602001604052806000815250611e85565b5050565b60006110998284612bf3565b6000838152600c6020908152604080832085845260020190915290206001810154611aeb9083611eb8565b6001808301919091556000858152600c602052604090200154611b0e9083611eb8565b6000858152600c60205260409020600190810191909155810154611cbc576000848152600c6020526040812060030154611b4a90600190612c1f565b6000868152600c602052604081206003018054929350909183908110611b8057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546002808701548a8552600c8085526040808720858852808501875290872090930191909155938a905292909152600390910180549192509083908110611be457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600c6000888152602001908152602001600020600301846002015481548110611c2857634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550600c6000878152602001908152602001600020600301805480611c6957634e487b7160e01b600052603160045260246000fd5b600082815260208082208301600019908101839055909201909255878252600c81526040808320888452600290810190925282208281556001810183905590810191909155600301805460ff1916905550505b600b54604051637921219560e11b81526001600160a01b039091169063f242432a90611cf290309033908890889060040161251d565b600060405180830381600087803b158015611d0c57600080fd5b505af1158015611d20573d6000803e3d6000fd5b5050505050505050565b60006001600160e01b031982166380ac58cd60e01b1480611d5b57506001600160e01b03198216635b5e139f60e01b145b80610554575061055482611ec4565b6000611d7e846001600160a01b0316611edd565b15611e7a57836001600160a01b031663150b7a02611d9a611326565b8786866040518563ffffffff1660e01b8152600401611dbc94939291906124e0565b602060405180830381600087803b158015611dd657600080fd5b505af1925050508015611e06575060408051601f3d908101601f19168201909252611e0391810190612325565b60015b611e60573d808015611e34576040519150601f19603f3d011682016040523d82523d6000602084013e611e39565b606091505b508051611e585760405162461bcd60e51b81526004016106159061262a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610da2565b506001949350505050565b611e8f8383611ee3565b611e9c6000848484611d6a565b61072e5760405162461bcd60e51b81526004016106159061262a565b60006110998284612c1f565b6001600160e01b031981166301ffc9a760e01b14919050565b3b151590565b6001600160a01b038216611f095760405162461bcd60e51b8152600401610615906128b0565b611f1281611309565b15611f2f5760405162461bcd60e51b8152600401610615906126c2565b611f3b6000838361072e565b6001600160a01b0382166000908152600360205260408120805460019290611f64908490612bf3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b038116811461055757600080fd5b600082601f830112611fe9578081fd5b81356020611ffe611ff983612bcf565b612ba5565b828152818101908583018385028701840188101561201a578586fd5b855b858110156120385781358452928401929084019060010161201c565b5090979650505050505050565b600082601f830112612055578081fd5b813567ffffffffffffffff81111561206f5761206f612cf8565b612082601f8201601f1916602001612ba5565b818152846020838601011115612096578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156120c1578081fd5b61109982611fc2565b600080604083850312156120dc578081fd5b6120e583611fc2565b91506120f360208401611fc2565b90509250929050565b600080600080600060a08688031215612113578081fd5b61211c86611fc2565b945061212a60208701611fc2565b9350604086013567ffffffffffffffff80821115612146578283fd5b61215289838a01611fd9565b94506060880135915080821115612167578283fd5b61217389838a01611fd9565b93506080880135915080821115612188578283fd5b5061219588828901612045565b9150509295509295909350565b6000806000606084860312156121b6578283fd5b6121bf84611fc2565b92506121cd60208501611fc2565b9150604084013590509250925092565b600080600080608085870312156121f2578384fd5b6121fb85611fc2565b935061220960208601611fc2565b925060408501359150606085013567ffffffffffffffff81111561222b578182fd5b61223787828801612045565b91505092959194509250565b600080600080600060a0868803121561225a578081fd5b61226386611fc2565b945061227160208701611fc2565b93506040860135925060608601359150608086013567ffffffffffffffff81111561229a578182fd5b61219588828901612045565b600080604083850312156122b8578182fd5b6122c183611fc2565b9150602083013580151581146122d5578182fd5b809150509250929050565b600080604083850312156122f2578182fd5b6122fb83611fc2565b946020939093013593505050565b60006020828403121561231a578081fd5b813561109981612d0e565b600060208284031215612336578081fd5b815161109981612d0e565b600060208284031215612352578081fd5b5035919050565b60006020828403121561236a578081fd5b5051919050565b6000806040808486031215612384578283fd5b8335925060208085013567ffffffffffffffff808211156123a3578485fd5b818701915087601f8301126123b6578485fd5b81356123c4611ff982612bcf565b81815284810190848601878402860187018c10156123e0578889fd5b8895505b838610156124355787818d0312156123fa578889fd5b8751888101818110878211171561241357612413612cf8565b89528135815287820135888201528352600195909501949186019187016123e4565b50809750505050505050509250929050565b60008060408385031215612459578182fd5b50508035926020909101359150565b60008151808452612480816020860160208601612c36565b601f01601f19169290920160200192915050565b600083516124a6818460208801612c36565b8351908301906124ba818360208801612c36565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061251390830184612468565b9695505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156125a65783518352928401929184019160010161258a565b50909695505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b6000602082526110996020830184612468565b60208082526025908201527f506570656d6f6e436172644465636b3a204361726420616c726561647920696e604082015264206465636b60d81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601e908201527f506570656d6f6e436172644465636b3a204e6f7420796f7572206465636b0000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526026908201527f506570656d6f6e436172644465636b3a20446f6e2774206f776e20626174746c604082015265194818d85c9960d21b606082015260800190565b6020808252601e908201527f506570656d6f6e436172644465636b3a204465636b206f766572666c6f770000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526033908201527f506570656d6f6e436172644465636b3a20596f7520646f6e2774206861766520604082015272195b9bdd59da081bd9881d1a1a5cc818d85c99606a1b606082015260800190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612bc757612bc7612cf8565b604052919050565b600067ffffffffffffffff821115612be957612be9612cf8565b5060209081020190565b60008219821115612c0657612c06612ccc565b500190565b600082612c1a57612c1a612ce2565b500490565b600082821015612c3157612c31612ccc565b500390565b60005b83811015612c51578181015183820152602001612c39565b838111156109ff5750506000910152565b600281046001821680612c7657607f821691505b60208210811415612c9757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612cb157612cb1612ccc565b5060010190565b600082612cc757612cc7612ce2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146115b257600080fdfea26469706673582212204b639c1d9ce4c2b53bdc860fe77728628204b3921a72fd68736ad5bf134181f464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c8063715018a61161013b578063b226ef76116100b8578063e6624c321161007c578063e6624c32146104f5578063e985e9c5146104fd578063ef0c4ecf14610510578063f23a6e6114610523578063f2fde38b1461053657610248565b8063b226ef7614610489578063b88d4fde1461049c578063bc197c81146104af578063c87b56dd146104cf578063dc10b8bd146104e257610248565b80639895d749116100ff5780639895d7491461041c578063a090195d1461042f578063a22cb46514610450578063a4c6f63e14610463578063aabd8ff01461047657610248565b8063715018a6146103de57806372c47220146103e65780637b8ef827146103f95780638da5cb5b1461040c57806395d89b411461041457610248565b80633f6b7f97116101c957806365aab7341161018d57806365aab734146103955780636e4c16521461039d57806370104298146103b0578063706f75f2146103c357806370a08231146103cb57610248565b80633f6b7f971461034157806342842e0e146103545780634f3d4f9a146103675780636352211e1461037a5780636524b62f1461038d57610248565b806317afd5681161021057806317afd568146102d357806318ee7396146102f357806323b872dd146103135780632ed38bfc1461032657806330ecf94e1461033957610248565b806301ffc9a71461024d57806306fdde0314610276578063081812fc1461028b57806308bf8ae4146102ab578063095ea7b3146102c0575b600080fd5b61026061025b366004612309565b610549565b60405161026d91906125b2565b60405180910390f35b61027e61055c565b60405161026d91906125d2565b61029e610299366004612341565b6105ee565b60405161026d91906124cc565b6102be6102b93660046120b0565b61063a565b005b6102be6102ce3660046122e0565b61069b565b6102e66102e1366004612341565b610733565b60405161026d919061256e565b6103066103013660046120b0565b61081e565b60405161026d91906124c3565b6102be6103213660046121a2565b610839565b6102be610334366004612447565b610871565b610306610a05565b61030661034f3660046122e0565b610a0b565b6102be6103623660046121a2565b610a3c565b610306610375366004612447565b610a57565b61029e610388366004612341565b610a7b565b61029e610ab0565b610306610abf565b6102e66103ab366004612341565b610ac5565b6102be6103be366004612341565b610bf6565b61029e610c4c565b6103066103d93660046120b0565b610c5b565b6102be610c9f565b6102be6103f43660046120b0565b610d28565b6102e6610407366004612447565b610d89565b61029e610daa565b61027e610db9565b61030661042a366004612341565b610dc8565b61044261043d366004612341565b610ddd565b60405161026d929190612b97565b6102be61045e3660046122a6565b610df6565b610306610471366004612341565b610ec4565b6102be610484366004612341565b610ed6565b6102be610497366004612371565b610f1a565b6102be6104aa3660046121dd565b610fd3565b6104c26104bd3660046120fc565b61100c565b60405161026d91906125bd565b61027e6104dd366004612341565b61101d565b6102be6104f0366004612341565b6110a0565b6102be6110e4565b61026061050b3660046120ca565b61112b565b6102be61051e366004612371565b611159565b6104c2610531366004612243565b611212565b6102be6105443660046120b0565b611223565b6000610554826112e4565b90505b919050565b60606000805461056b90612c62565b80601f016020809104026020016040519081016040528092919081815260200182805461059790612c62565b80156105e45780601f106105b9576101008083540402835291602001916105e4565b820191906000526020600020905b8154815290600101906020018083116105c757829003601f168201915b5050505050905090565b60006105f982611309565b61061e5760405162461bcd60e51b81526004016106159061291c565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b610642611326565b6001600160a01b0316610653610daa565b6001600160a01b0316146106795760405162461bcd60e51b815260040161061590612968565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006106a682610a7b565b9050806001600160a01b0316836001600160a01b031614156106da5760405162461bcd60e51b815260040161061590612ab2565b806001600160a01b03166106ec611326565b6001600160a01b0316148061070857506107088161050b611326565b6107245760405162461bcd60e51b8152600401610615906127c0565b61072e838361132a565b505050565b6000818152600c6020526040812060038101546060929067ffffffffffffffff81111561077057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610799578160200160208202803683370190505b50905060005b6003830154811015610816578260030181815481106107ce57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548282815181106107f957634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061080e81612c9d565b91505061079f565b509392505050565b6001600160a01b03166000908152600d602052604090205490565b61084a610844611326565b82611398565b6108665760405162461bcd60e51b815260040161061590612af3565b61072e838383611415565b8161087b81610a7b565b6001600160a01b0316336001600160a01b0316146108ab5760405162461bcd60e51b8152600401610615906128e5565b600a54604051627eeac760e11b81526001916001600160a01b03169062fdd58e906108dc9033908790600401612555565b60206040518083038186803b1580156108f457600080fd5b505afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c9190612359565b101561094a5760405162461bcd60e51b815260040161061590612a35565b6000838152600c60205260409020548214156109785760405162461bcd60e51b8152600401610615906125e5565b6000838152600c602052604090819020805490849055600a549151637921219560e11b815290916001600160a01b03169063f242432a906109c49033903090889060019060040161251d565b600060405180830381600087803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b505050506109ff81611542565b50505050565b60085481565b600d6020528160005260406000208181548110610a2757600080fd5b90600052602060002001600091509150505481565b61072e83838360405180602001604052806000815250610fd3565b6000918252600c602090815260408084209284526002909201905290206001015490565b6000818152600260205260408120546001600160a01b0316806105545760405162461bcd60e51b815260040161061590612867565b600a546001600160a01b031681565b60075481565b6000818152600c6020526040812060018101546060929067ffffffffffffffff811115610b0257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b2b578160200160208202803683370190505b5090506000805b6003840154811015610bec576000846003018281548110610b6357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905060005b6000828152600287016020526040902060010154811015610bd757818585610b9a81612c9d565b965081518110610bba57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610bcf81612c9d565b915050610b73565b50508080610be490612c9d565b915050610b32565b5090949350505050565b80610c0081610a7b565b6001600160a01b0316336001600160a01b031614610c305760405162461bcd60e51b8152600401610615906128e5565b6000828152600c60205260408120805491905561072e81611542565b600b546001600160a01b031681565b60006001600160a01b038216610c835760405162461bcd60e51b81526004016106159061281d565b506001600160a01b031660009081526003602052604090205490565b610ca7611326565b6001600160a01b0316610cb8610daa565b6001600160a01b031614610cde5760405162461bcd60e51b815260040161061590612968565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b610d30611326565b6001600160a01b0316610d41610daa565b6001600160a01b031614610d675760405162461bcd60e51b815260040161061590612968565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60606000610d9684610ac5565b9050610da281846115b5565b949350505050565b6006546001600160a01b031690565b60606001805461056b90612c62565b6000908152600c602052604090206001015490565b600c602052600090815260409020805460019091015482565b610dfe611326565b6001600160a01b0316826001600160a01b03161415610e2f5760405162461bcd60e51b81526004016106159061273d565b8060056000610e3c611326565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610e80611326565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610eb891906125b2565b60405180910390a35050565b6000908152600c602052604090205490565b610ede611326565b6001600160a01b0316610eef610daa565b6001600160a01b031614610f155760405162461bcd60e51b815260040161061590612968565b600855565b81610f2481610a7b565b6001600160a01b0316336001600160a01b031614610f545760405162461bcd60e51b8152600401610615906128e5565b60005b82518110156109ff57610fc184848381518110610f8457634e487b7160e01b600052603260045260246000fd5b602002602001015160000151858481518110610fb057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516116de565b80610fcb81612c9d565b915050610f57565b610fe4610fde611326565b83611398565b6110005760405162461bcd60e51b815260040161061590612af3565b6109ff84848484611936565b63bc197c8160e01b95945050505050565b606061102882611309565b6110445760405162461bcd60e51b8152600401610615906129e6565b600061104e611969565b9050600081511161106e5760405180602001604052806000815250611099565b806110788461197b565b604051602001611089929190612494565b6040516020818303038152906040525b9392505050565b6110a8611326565b6001600160a01b03166110b9610daa565b6001600160a01b0316146110df5760405162461bcd60e51b815260040161061590612968565b600755565b6110f033600954611a96565b336000908152600d6020908152604082206009805482546001818101855593865293909420909201929092555461112691611ab4565b600955565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b8161116381610a7b565b6001600160a01b0316336001600160a01b0316146111935760405162461bcd60e51b8152600401610615906128e5565b60005b82518110156109ff57611200848483815181106111c357634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518584815181106111ef57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611ac0565b8061120a81612c9d565b915050611196565b63f23a6e6160e01b95945050505050565b61122b611326565b6001600160a01b031661123c610daa565b6001600160a01b0316146112625760405162461bcd60e51b815260040161061590612968565b6001600160a01b0381166112885760405162461bcd60e51b81526004016106159061267c565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216630271189760e51b1480610554575061055482611d2a565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061135f82610a7b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006113a382611309565b6113bf5760405162461bcd60e51b815260040161061590612774565b60006113ca83610a7b565b9050806001600160a01b0316846001600160a01b031614806114055750836001600160a01b03166113fa846105ee565b6001600160a01b0316145b80610da25750610da2818561112b565b826001600160a01b031661142882610a7b565b6001600160a01b03161461144e5760405162461bcd60e51b81526004016106159061299d565b6001600160a01b0382166114745760405162461bcd60e51b8152600401610615906126f9565b61147f83838361072e565b61148a60008261132a565b6001600160a01b03831660009081526003602052604081208054600192906114b3908490612c1f565b90915550506001600160a01b03821660009081526003602052604081208054600192906114e1908490612bf3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b80156115b257600a54604051637921219560e11b81526001600160a01b039091169063f242432a9061157f9030903390869060019060040161251d565b600060405180830381600087803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050505b50565b606060005b83518110156116d65760008185516115d29190612c1f565b6115dc9085612cb8565b6115e69083612bf3565b9050600085828151811061160a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905085838151811061163457634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061165c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508086848151811061168957634e487b7160e01b600052603260045260246000fd5b602002602001018181525050846040516020016116a691906124c3565b6040516020818303038152906040528051906020012060001c9450505080806116ce90612c9d565b9150506115ba565b509192915050565b6000838152600c60205260409020600101546116fa9082611ab4565b600754101561171b5760405162461bcd60e51b815260040161061590612a7b565b600b54604051627eeac760e11b815282916001600160a01b03169062fdd58e9061174b9033908790600401612555565b60206040518083038186803b15801561176357600080fd5b505afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190612359565b10156117b95760405162461bcd60e51b815260040161061590612b44565b6000838152600c6020908152604080832085845260020190915290206003015460ff16611865576040805160808101825283815260208082018481526000878152600c80845285822060038082018054888a01908152600160608a018181528d885260029586018a529a872099518a559651898801555192880192909255965195909601805460ff19169515159590951790945592825283549081018455928252902001829055611897565b6000838152600c60209081526040808320858452600201909152902060018101546118909083611ab4565b6001909101555b6000838152600c60205260409020600101546118b39082611ab4565b6000848152600c60205260409081902060010191909155600b549051637921219560e11b81526001600160a01b039091169063f242432a906118ff90339030908790879060040161251d565b600060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b50505050505050565b611941848484611415565b61194d84848484611d6a565b6109ff5760405162461bcd60e51b81526004016106159061262a565b60408051602081019091526000815290565b6060816119a057506040805180820190915260018152600360fc1b6020820152610557565b8160005b81156119ca57806119b481612c9d565b91506119c39050600a83612c0b565b91506119a4565b60008167ffffffffffffffff8111156119f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a1d576020820181803683370190505b5090505b8415610da257611a32600183612c1f565b9150611a3f600a86612cb8565b611a4a906030612bf3565b60f81b818381518110611a6d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611a8f600a86612c0b565b9450611a21565b611ab0828260405180602001604052806000815250611e85565b5050565b60006110998284612bf3565b6000838152600c6020908152604080832085845260020190915290206001810154611aeb9083611eb8565b6001808301919091556000858152600c602052604090200154611b0e9083611eb8565b6000858152600c60205260409020600190810191909155810154611cbc576000848152600c6020526040812060030154611b4a90600190612c1f565b6000868152600c602052604081206003018054929350909183908110611b8057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546002808701548a8552600c8085526040808720858852808501875290872090930191909155938a905292909152600390910180549192509083908110611be457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600c6000888152602001908152602001600020600301846002015481548110611c2857634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550600c6000878152602001908152602001600020600301805480611c6957634e487b7160e01b600052603160045260246000fd5b600082815260208082208301600019908101839055909201909255878252600c81526040808320888452600290810190925282208281556001810183905590810191909155600301805460ff1916905550505b600b54604051637921219560e11b81526001600160a01b039091169063f242432a90611cf290309033908890889060040161251d565b600060405180830381600087803b158015611d0c57600080fd5b505af1158015611d20573d6000803e3d6000fd5b5050505050505050565b60006001600160e01b031982166380ac58cd60e01b1480611d5b57506001600160e01b03198216635b5e139f60e01b145b80610554575061055482611ec4565b6000611d7e846001600160a01b0316611edd565b15611e7a57836001600160a01b031663150b7a02611d9a611326565b8786866040518563ffffffff1660e01b8152600401611dbc94939291906124e0565b602060405180830381600087803b158015611dd657600080fd5b505af1925050508015611e06575060408051601f3d908101601f19168201909252611e0391810190612325565b60015b611e60573d808015611e34576040519150601f19603f3d011682016040523d82523d6000602084013e611e39565b606091505b508051611e585760405162461bcd60e51b81526004016106159061262a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610da2565b506001949350505050565b611e8f8383611ee3565b611e9c6000848484611d6a565b61072e5760405162461bcd60e51b81526004016106159061262a565b60006110998284612c1f565b6001600160e01b031981166301ffc9a760e01b14919050565b3b151590565b6001600160a01b038216611f095760405162461bcd60e51b8152600401610615906128b0565b611f1281611309565b15611f2f5760405162461bcd60e51b8152600401610615906126c2565b611f3b6000838361072e565b6001600160a01b0382166000908152600360205260408120805460019290611f64908490612bf3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b038116811461055757600080fd5b600082601f830112611fe9578081fd5b81356020611ffe611ff983612bcf565b612ba5565b828152818101908583018385028701840188101561201a578586fd5b855b858110156120385781358452928401929084019060010161201c565b5090979650505050505050565b600082601f830112612055578081fd5b813567ffffffffffffffff81111561206f5761206f612cf8565b612082601f8201601f1916602001612ba5565b818152846020838601011115612096578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156120c1578081fd5b61109982611fc2565b600080604083850312156120dc578081fd5b6120e583611fc2565b91506120f360208401611fc2565b90509250929050565b600080600080600060a08688031215612113578081fd5b61211c86611fc2565b945061212a60208701611fc2565b9350604086013567ffffffffffffffff80821115612146578283fd5b61215289838a01611fd9565b94506060880135915080821115612167578283fd5b61217389838a01611fd9565b93506080880135915080821115612188578283fd5b5061219588828901612045565b9150509295509295909350565b6000806000606084860312156121b6578283fd5b6121bf84611fc2565b92506121cd60208501611fc2565b9150604084013590509250925092565b600080600080608085870312156121f2578384fd5b6121fb85611fc2565b935061220960208601611fc2565b925060408501359150606085013567ffffffffffffffff81111561222b578182fd5b61223787828801612045565b91505092959194509250565b600080600080600060a0868803121561225a578081fd5b61226386611fc2565b945061227160208701611fc2565b93506040860135925060608601359150608086013567ffffffffffffffff81111561229a578182fd5b61219588828901612045565b600080604083850312156122b8578182fd5b6122c183611fc2565b9150602083013580151581146122d5578182fd5b809150509250929050565b600080604083850312156122f2578182fd5b6122fb83611fc2565b946020939093013593505050565b60006020828403121561231a578081fd5b813561109981612d0e565b600060208284031215612336578081fd5b815161109981612d0e565b600060208284031215612352578081fd5b5035919050565b60006020828403121561236a578081fd5b5051919050565b6000806040808486031215612384578283fd5b8335925060208085013567ffffffffffffffff808211156123a3578485fd5b818701915087601f8301126123b6578485fd5b81356123c4611ff982612bcf565b81815284810190848601878402860187018c10156123e0578889fd5b8895505b838610156124355787818d0312156123fa578889fd5b8751888101818110878211171561241357612413612cf8565b89528135815287820135888201528352600195909501949186019187016123e4565b50809750505050505050509250929050565b60008060408385031215612459578182fd5b50508035926020909101359150565b60008151808452612480816020860160208601612c36565b601f01601f19169290920160200192915050565b600083516124a6818460208801612c36565b8351908301906124ba818360208801612c36565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061251390830184612468565b9695505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156125a65783518352928401929184019160010161258a565b50909695505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b6000602082526110996020830184612468565b60208082526025908201527f506570656d6f6e436172644465636b3a204361726420616c726561647920696e604082015264206465636b60d81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601e908201527f506570656d6f6e436172644465636b3a204e6f7420796f7572206465636b0000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526026908201527f506570656d6f6e436172644465636b3a20446f6e2774206f776e20626174746c604082015265194818d85c9960d21b606082015260800190565b6020808252601e908201527f506570656d6f6e436172644465636b3a204465636b206f766572666c6f770000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526033908201527f506570656d6f6e436172644465636b3a20596f7520646f6e2774206861766520604082015272195b9bdd59da081bd9881d1a1a5cc818d85c99606a1b606082015260800190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612bc757612bc7612cf8565b604052919050565b600067ffffffffffffffff821115612be957612be9612cf8565b5060209081020190565b60008219821115612c0657612c06612ccc565b500190565b600082612c1a57612c1a612ce2565b500490565b600082821015612c3157612c31612ccc565b500390565b60005b83811015612c51578181015183820152602001612c39565b838111156109ff5750506000910152565b600281046001821680612c7657607f821691505b60208210811415612c9757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612cb157612cb1612ccc565b5060010190565b600082612cc757612cc7612ce2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146115b257600080fdfea26469706673582212204b639c1d9ce4c2b53bdc860fe77728628204b3921a72fd68736ad5bf134181f464736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getAllSupportCardsInDeck(uint256)": {
        "details": "Returns array of support cards for a deck",
        "params": {
          "_deckId": "uint256 ID of the deck"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "shuffleDeck(uint256,uint256)": {
        "details": "Shuffles deck",
        "params": {
          "_deckId": "uint256 ID of the deck"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Override supportInterface ."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 528,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 530,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 534,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 538,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 542,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 548,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 273,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5247,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "MAX_SUPPORT_CARDS",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5249,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "MIN_SUPPORT_CARDS",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5251,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "nextDeckId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5253,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "battleCardAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5255,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "supportCardAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5260,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "decks",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Deck)5231_storage)"
      },
      {
        "astId": 5265,
        "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
        "label": "playerToDecks",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Deck)5231_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonCardDeck.Deck)",
        "numberOfBytes": "32",
        "value": "t_struct(Deck)5231_storage"
      },
      "t_mapping(t_uint256,t_struct(SupportCardType)5240_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonCardDeck.SupportCardType)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportCardType)5240_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Deck)5231_storage": {
        "encoding": "inplace",
        "label": "struct PepemonCardDeck.Deck",
        "members": [
          {
            "astId": 5220,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "battleCardId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5222,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "supportCardCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5227,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "supportCardTypes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(SupportCardType)5240_storage)"
          },
          {
            "astId": 5230,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "supportCardTypeList",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SupportCardType)5240_storage": {
        "encoding": "inplace",
        "label": "struct PepemonCardDeck.SupportCardType",
        "members": [
          {
            "astId": 5233,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "supportCardId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5235,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5237,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "pointer",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5239,
            "contract": "contracts/PepemonCardDeck.sol:PepemonCardDeck",
            "label": "isEntity",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}