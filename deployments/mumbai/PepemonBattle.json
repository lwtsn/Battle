{
  "address": "0x0EA739B3c290E6194d37ba579948794cA0662705",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cardOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deckOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "randOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1Addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "BattleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battleIdRNGSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deckId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "health",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "battleCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "spd",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "inte",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "def",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "atk",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "sAtk",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "sDef",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                  "name": "currentBCstats",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[8]",
                  "name": "supportCardInHandIds",
                  "type": "uint256[8]"
                },
                {
                  "internalType": "uint256",
                  "name": "tableSupportCardStats",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "supportCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "power",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "numTurns",
                          "type": "uint256"
                        },
                        {
                          "internalType": "enum PepemonCardOracle.EffectTo",
                          "name": "effectTo",
                          "type": "uint8"
                        },
                        {
                          "internalType": "enum PepemonCardOracle.EffectFor",
                          "name": "effectFor",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "reqCode",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct PepemonCardOracle.EffectMany",
                      "name": "effectMany",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                  "name": "tableSupportCards",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct PepemonBattle.Hand",
              "name": "hand",
              "type": "tuple"
            },
            {
              "internalType": "uint256[60]",
              "name": "totalSupportCardIds",
              "type": "uint256[60]"
            },
            {
              "internalType": "uint256",
              "name": "playedCardCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PepemonBattle.Player",
          "name": "player1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deckId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "health",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "battleCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "spd",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "inte",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "def",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "atk",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "sAtk",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "sDef",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                  "name": "currentBCstats",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[8]",
                  "name": "supportCardInHandIds",
                  "type": "uint256[8]"
                },
                {
                  "internalType": "uint256",
                  "name": "tableSupportCardStats",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "supportCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "power",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "numTurns",
                          "type": "uint256"
                        },
                        {
                          "internalType": "enum PepemonCardOracle.EffectTo",
                          "name": "effectTo",
                          "type": "uint8"
                        },
                        {
                          "internalType": "enum PepemonCardOracle.EffectFor",
                          "name": "effectFor",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "reqCode",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct PepemonCardOracle.EffectMany",
                      "name": "effectMany",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                  "name": "tableSupportCards",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct PepemonBattle.Hand",
              "name": "hand",
              "type": "tuple"
            },
            {
              "internalType": "uint256[60]",
              "name": "totalSupportCardIds",
              "type": "uint256[60]"
            },
            {
              "internalType": "uint256",
              "name": "playedCardCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PepemonBattle.Player",
          "name": "player2",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentTurn",
          "type": "uint256"
        },
        {
          "internalType": "enum PepemonBattle.Attacker",
          "name": "attacker",
          "type": "uint8"
        },
        {
          "internalType": "enum PepemonBattle.TurnHalves",
          "name": "turnHalves",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "atkHand",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "defHand",
          "type": "tuple"
        }
      ],
      "name": "calSupportCardsInHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "checkIfBattleEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "p1Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "p1DeckId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "p2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "p2DeckId",
          "type": "uint256"
        }
      ],
      "name": "createBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "fight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "goForBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0aff12f01c2a8694091226ca06a3e50777859f30a4648de8da83a9b0517fed0",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0x0EA739B3c290E6194d37ba579948794cA0662705",
    "transactionIndex": 0,
    "gasUsed": "3827272",
    "logsBloom": "0x
    "blockHash": "0xff0375f96d7a937d556153d59446c0fea525253fbba76296678a0c4f11b0ec14",
    "transactionHash": "0xa0aff12f01c2a8694091226ca06a3e50777859f30a4648de8da83a9b0517fed0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30334639,
        "transactionHash": "0xa0aff12f01c2a8694091226ca06a3e50777859f30a4648de8da83a9b0517fed0",
        "address": "0x0EA739B3c290E6194d37ba579948794cA0662705",
        "topics": [
          "0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xff0375f96d7a937d556153d59446c0fea525253fbba76296678a0c4f11b0ec14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 30334639,
        "transactionHash": "0xa0aff12f01c2a8694091226ca06a3e50777859f30a4648de8da83a9b0517fed0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000017f045071f6c100000000000000000000000000000000000000000000000000476974451f680dd0000000000000000000000000000000000000000000018af9e8698e8c1f65952000000000000000000000000000000000000000000000000045ea6ff4ad714cd0000000000000000000000000000000000000000000018af9e9e892dc915c562",
        "logIndex": 1,
        "blockHash": "0xff0375f96d7a937d556153d59446c0fea525253fbba76296678a0c4f11b0ec14"
      }
    ],
    "blockNumber": 30334639,
    "cumulativeGasUsed": "3827272",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x15f4df42e54aa33c4ec48e9f0bb7f00535c29bf5",
    "0x84057fffc602f74c19848d86fc8e14d95cd9de35",
    "0x3d7e3ca6367d2328e17eb34891f93b78d1fb587a"
  ],
  "numDeployments": 3,
  "solcInputHash": "25f88fbef73d353082232ffe9ea48357",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deckOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1Addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"BattleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleIdRNGSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"atkHand\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"defHand\",\"type\":\"tuple\"}],\"name\":\"calSupportCardsInHand\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"checkIfBattleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"p1DeckId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"p2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"p2DeckId\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"fight\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"goForBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBattle(address,uint256,address,uint256)\":{\"details\":\"Create battle\",\"params\":{\"p1Addr\":\"address player1\",\"p1DeckId\":\"uint256\",\"p2Addr\":\"address player2\",\"p2DeckId\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonBattle.sol\":\"PepemonBattle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/PepemonBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./lib/AdminRole.sol\\\";\\nimport \\\"./PepemonCardDeck.sol\\\";\\nimport \\\"./PepemonCardOracle.sol\\\";\\nimport \\\"./lib/ChainLinkRngOracle.sol\\\";\\n\\ncontract PepemonBattle is AdminRole {\\n\\n    event BattleCreated(address indexed player1Addr, address indexed player2Addr, uint256 battleId);\\n\\n    mapping (uint => uint) public battleIdRNGSeed;\\n\\n    uint constant _max_inte = 8;\\n    uint constant _max_cards_on_table = 5;\\n    uint constant _refreshTurn = 5;\\n\\n    //Attacker can either be PLAYER_ONE or PLAYER_TWO\\n    enum Attacker {\\n        PLAYER_ONE,\\n        PLAYER_TWO\\n    }\\n\\n    //Game can either be in FIRST_HALF or SECOND_HALF\\n    enum TurnHalves {\\n        FIRST_HALF,\\n        SECOND_HALF\\n    }\\n\\n    //Battle contains:\\n    //battleId = ID of this battle\\n    //player1, player2 = players\\n    //currentTurn\\n    //attacker\\n    //turnHalves => first half or second half?\\n    struct Battle {\\n        uint256 battleId;\\n        Player player1;\\n        Player player2;\\n        uint256 currentTurn;\\n        Attacker attacker;\\n        TurnHalves turnHalves;\\n    }\\n\\n    //playerAddr\\n    //deckId = Id of deck\\n    //hand = keeps track of current player's stats (such as health)\\n    //totalSupportCardIds = all IDs of support cards\\n    //playedCardCount = number of cards played already\\n    struct Player {\\n        address playerAddr;\\n        uint256 deckId;\\n        Hand hand;\\n        uint256[60] totalSupportCardIds;\\n        uint256 playedCardCount;\\n    }\\n\\n    //health - health of player's battle card\\n    // battleCardId = card id of player\\n    // currentBCstats = all stats of the player's battle cards currently\\n    // supportCardInHandIds = IDs of the support cards in your current hand\\n    //                  the amount of support cards a player can play is determined by intelligence\\n    // tableSupportCardStats = Number of support cards that are currently played on the table\\n    // currentSuportCards = cards on the table, based on which turn ago they were played\\n    //                      Notice that the number of turns is limited by _refreshTurn\\n    struct Hand {\\n        int256 health;\\n        uint256 battleCardId;\\n        CurrentBattleCardStats currentBCstats;\\n        uint256[_max_inte] supportCardInHandIds;\\n        uint256 tableSupportCardStats;\\n        TableSupportCardStats[_max_cards_on_table] tableSupportCards;\\n    }\\n    //spd, inte, def, atk, sAtk, sDef - Current stats of battle card (with powerups included)\\n    //Each param can go into the negatives\\n    struct CurrentBattleCardStats {\\n        int256 spd;\\n        uint256 inte;\\n        int256 def;\\n        int256 atk;\\n        int256 sAtk;\\n        int256 sDef;\\n    }\\n\\n    //links supportCardID with effectMany\\n    struct TableSupportCardStats {\\n        uint256 supportCardId;\\n        PepemonCardOracle.EffectMany effectMany;\\n    }\\n\\n    mapping(uint256 => Battle) public battles;\\n\\n    uint256 private _nextBattleId;\\n\\n\\n    PepemonCardOracle private _cardContract;\\n    PepemonCardDeck private _deckContract;\\n    ChainLinkRngOracle private _randNrGenContract;\\n\\n    constructor(\\n        address cardOracleAddress,\\n        address deckOracleAddress,\\n        address randOracleAddress\\n    ) {\\n        _cardContract = PepemonCardOracle(cardOracleAddress);\\n        _deckContract = PepemonCardDeck(deckOracleAddress);\\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\\n        _nextBattleId = 1;\\n    }\\n\\n    /**\\n     * @dev Create battle\\n     * @param p1Addr address player1\\n     * @param p1DeckId uint256\\n     * @param p2Addr address player2\\n     * @param p2DeckId uint256\\n     */\\n    function createBattle(\\n        address p1Addr,\\n        uint256 p1DeckId,\\n        address p2Addr,\\n        uint256 p2DeckId\\n    ) public onlyAdmin returns (Battle memory, uint256 battleId)  {\\n        require(p1Addr != p2Addr, \\\"PepemonBattle: Cannot battle yourself\\\");\\n\\n        (uint256 p1BattleCardId, ) = _deckContract.decks(p1DeckId);\\n        (uint256 p2BattleCardId, ) = _deckContract.decks(p2DeckId);\\n\\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(p1BattleCardId);\\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(p2BattleCardId);\\n\\n        Battle memory newBattle;\\n        // Initiate battle ID\\n        newBattle.battleId = _nextBattleId;\\n        // Initiate player1\\n        newBattle.player1.hand.health = int256(p1BattleCard.hp);\\n        newBattle.player1.hand.battleCardId = p1BattleCardId;\\n        newBattle.player1.playerAddr = p1Addr;\\n        newBattle.player1.deckId = p1DeckId;\\n        // Initiate player2\\n        newBattle.player2.hand.health = int256(p2BattleCard.hp);\\n        newBattle.player2.hand.battleCardId = p2BattleCardId;\\n        newBattle.player2.playerAddr = p2Addr;\\n        newBattle.player2.deckId = p2DeckId;\\n        // Set the RNG seed\\n        battleIdRNGSeed[_nextBattleId] = _randSeed(newBattle);\\n\\n        //Emit event\\n        emit BattleCreated(p1Addr, p2Addr, _nextBattleId);\\n        return (newBattle, _nextBattleId++);\\n    }\\n\\n    function goForBattle(Battle memory battle) public view returns (Battle memory, address winner) {\\n\\n        //Initialize battle by starting the first turn\\n        battle = goForNewTurn(battle);\\n        address winnerAddr;\\n        // Battle goes!\\n        while (true) {\\n            // Resolve attacker in the current turn\\n            battle = resolveAttacker(battle);\\n            // Fight\\n            battle = fight(battle);\\n\\n            // Check if battle ended\\n            (bool isEnded, address win) = checkIfBattleEnded(battle);\\n            if (isEnded) {\\n                winnerAddr = win;\\n                break;\\n            }\\n\\n            // Resolve turn halves\\n            battle = updateTurnInfo(battle);\\n        }\\n        return (battle, winnerAddr);\\n    }\\n\\n    //If currently in first half -> go to second half\\n    //If currently in second half -> make a new turn\\n    function updateTurnInfo(Battle memory battle) internal view returns (Battle memory) {\\n        // If the current half is first, go over second half\\n        // or go over next turn\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\n            battle.turnHalves = TurnHalves.SECOND_HALF;\\n        } else {\\n            battle = goForNewTurn(battle);\\n        }\\n\\n        return battle;\\n    }\\n\\n    //Things this function does:\\n    //Reset both players hand infos back to base stats (stats with no support card powerups)\\n    //Check if support cards need to be scrambled and redealt\\n    //Redeal support cards if necessary\\n    //Calculate support card's power\\n    //Finally, draw Pepemon's intelligence number of cards.\\n    function goForNewTurn(Battle memory battle) internal view returns (Battle memory) {\\n        Player memory player1 = battle.player1;\\n        Player memory player2 = battle.player2;\\n\\n        // Get base battle card stats (stats without any powerups)\\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(\\n            player1.hand.battleCardId\\n        );\\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(\\n            player2.hand.battleCardId\\n        );\\n\\n        //Reset both players' hand infos to base stats\\n        player1.hand.currentBCstats = getCardStats(p1BattleCard);\\n        player2.hand.currentBCstats = getCardStats(p2BattleCard);\\n\\n        uint256 p1SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player1.deckId);\\n        uint256 p2SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player2.deckId);\\n\\n        //Refresh cards every 5 turns\\n        bool isRefreshTurn = (battle.currentTurn % _refreshTurn == 0);\\n\\n        if (isRefreshTurn) {\\n            //Need to refresh decks\\n\\n            // Shuffle player1 support cards\\n            //Create a pseudorandom seed and shuffle the cards \\n            uint[] memory scrambled = _deckContract.shuffleDeck(player1.deckId, // tbd: use in-place shuffling\\n                _randMod(\\n                    69, battle\\n                )\\n            );\\n            //Copy back scrambled cards to original list\\n            for (uint i = 0 ; i < p1SupportCardIdsLength; i++){\\n                player1.totalSupportCardIds[i]=scrambled[i];\\n            }\\n            \\n            //Reset played card count\\n            player1.playedCardCount = 0;\\n\\n            //Shuffling player 2 support cards\\n            //Create a pseudorandom seed and shuffle the cards\\n            uint[] memory scrambled2 = _deckContract.shuffleDeck(player2.deckId, \\n                _randMod(\\n                    420, battle\\n                )\\n            );\\n\\n            //Copy the support cards back into the list\\n            for (uint256 i = 0; i < p2SupportCardIdsLength; i++) {\\n                player2.totalSupportCardIds[i]=scrambled2[i];\\n            }\\n            \\n            //Reset player2 played card counts\\n            player2.playedCardCount = 0;\\n        }\\n        else \\n        {\\n            //Don't need to refresh cards now\\n\\n            // Get temp support info of previous turn's hands and calculate their effect for the new turn\\n            player1.hand = calSupportCardsOnTable(player1.hand, player2.hand);\\n            player2.hand = calSupportCardsOnTable(player2.hand, player1.hand);\\n        }\\n\\n        // Draw player1 support cards for the new turn\\n        for (uint256 i = 0; i < player1.hand.currentBCstats.inte; i++) {\\n            player1.hand.supportCardInHandIds[i] = player1.totalSupportCardIds[(i + player1.playedCardCount) % p1SupportCardIdsLength];\\n        }\\n        player1.playedCardCount += player1.hand.currentBCstats.inte;\\n\\n        // Draw player2 support cards for the new turn\\n        for (uint256 i = 0; i < player2.hand.currentBCstats.inte; i++) {\\n            player2.hand.supportCardInHandIds[i] = player2.totalSupportCardIds[(i + player2.playedCardCount) % p2SupportCardIdsLength];\\n        }\\n        player2.playedCardCount += player2.hand.currentBCstats.inte;\\n\\n        //Update current battle info\\n        battle.player1 = player1;\\n        battle.player2 = player2;\\n\\n        // Increment current turn number of battle\\n        battle.currentTurn++;\\n\\n        // Go for first half in turn\\n        battle.turnHalves = TurnHalves.FIRST_HALF;\\n\\n        return battle;\\n    }\\n\\n    //This method calculates the battle card's stats after taking into consideration all the support cards currently being played\\n    function calSupportCardsOnTable(Hand memory hand, Hand memory oppHand) internal pure returns (Hand memory) {\\n        for (uint256 i = 0; i < hand.tableSupportCardStats; i++) {\\n            //Loop through every support card currently played\\n\\n            //Get the support card being considered now\\n            TableSupportCardStats memory tableSupportCardStat = hand.tableSupportCards[i];\\n            \\n            //Get the effect of that support card\\n            PepemonCardOracle.EffectMany memory effect = tableSupportCardStat.effectMany;\\n            \\n            //If there is at least 1 turn left\\n            if (effect.numTurns >= 1) {\\n\\n                //If the effect is for me\\n                if (effect.effectFor == PepemonCardOracle.EffectFor.ME) {\\n                    // Change my card's stats using that support card\\n                    // Currently effectTo of EffectMany can be ATTACK, DEFENSE, SPEED and INTELLIGENCE\\n                    //Get the statistic changed and update it \\n                    //Intelligence can't go into the negatives\\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\\n                        hand.currentBCstats.atk += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\\n                        hand.currentBCstats.def += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\\n                        hand.currentBCstats.spd += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\\n                        int temp;\\n                        temp = int256(hand.currentBCstats.inte) + effect.power;\\n                        hand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\n                    }\\n                } else {\\n                    //The card affects the opp's pepemon\\n                    //Update card stats of the opp's pepemon\\n                    //Make sure INT stat can't go below zero\\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\\n                        oppHand.currentBCstats.atk += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\\n                        oppHand.currentBCstats.def += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\\n                        oppHand.currentBCstats.spd += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\\n                        int temp;\\n                        temp = int256(oppHand.currentBCstats.inte) + effect.power;\\n                        oppHand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\n                    }\\n                }\\n                // Decrease effect numTurns by 1 since 1 turn has already passed\\n                effect.numTurns--;\\n                // Delete this one from tableSupportCardStat if all turns of the card have been exhausted\\n                if (effect.numTurns == 0) {\\n                    if (i < hand.tableSupportCardStats - 1) {\\n                        hand.tableSupportCards[i] = hand.tableSupportCards[hand.tableSupportCardStats - 1];\\n                    }\\n                    delete hand.tableSupportCards[hand.tableSupportCardStats - 1];\\n                    hand.tableSupportCardStats--;\\n                }\\n            }\\n        }\\n\\n        return hand;\\n    }\\n\\n    //This method gets the current attacker\\n    function resolveAttacker(Battle memory battle) internal view returns (Battle memory) {\\n        CurrentBattleCardStats memory p1CurrentBattleCardStats = battle.player1.hand.currentBCstats;\\n        CurrentBattleCardStats memory p2CurrentBattleCardStats = battle.player2.hand.currentBCstats;\\n\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\n            //Player with highest speed card goes first\\n            if (p1CurrentBattleCardStats.spd > p2CurrentBattleCardStats.spd) {\\n                battle.attacker = Attacker.PLAYER_ONE;\\n            } else if (p1CurrentBattleCardStats.spd < p2CurrentBattleCardStats.spd) {\\n                battle.attacker = Attacker.PLAYER_TWO;\\n            } else {\\n                //Tiebreak: intelligence\\n                if (p1CurrentBattleCardStats.inte > p2CurrentBattleCardStats.inte) {\\n                    battle.attacker = Attacker.PLAYER_ONE;\\n                } else if (p1CurrentBattleCardStats.inte < p2CurrentBattleCardStats.inte) {\\n                    battle.attacker = Attacker.PLAYER_TWO;\\n                } else {\\n                    //Second tiebreak: use RNG\\n                    uint256 rand = _randMod(69420, battle) % 2;\\n                    battle.attacker = (rand == 0 ? Attacker.PLAYER_ONE : Attacker.PLAYER_TWO);\\n                }\\n            }\\n        } else {\\n            //For second half, switch players\\n            battle.attacker = (battle.attacker == Attacker.PLAYER_ONE ? Attacker.PLAYER_TWO : Attacker.PLAYER_ONE);\\n        }\\n\\n        return battle;\\n    }\\n\\n    //Create a random seed, using the chainlink number and the addresses of the combatants as entropy\\n    function _randSeed(Battle memory battle) private view returns (uint256) {\\n        //Get the chainlink random number\\n        uint chainlinkNumber = _randNrGenContract.getRandomNumber();\\n        //Create a new pseudorandom number using the seed and battle info as entropy\\n        //This makes sure the RNG returns a different number every time\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(block.number, chainlinkNumber, battle.player1.playerAddr, battle.player2.playerAddr)));\\n        return randomNumber;\\n    }\\n\\n    function _randMod(uint256 seed, Battle memory battle) private view returns (uint256) {\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(seed, battle.currentTurn, battleIdRNGSeed[battle.battleId])));\\n        return randomNumber;\\n    }\\n\\n    //Check if battle ended by looking at player's health\\n    function checkIfBattleEnded(Battle memory battle) public pure returns (bool, address) {\\n        if (battle.player1.hand.health <= 0) {\\n            return (true, battle.player1.playerAddr);\\n        } else if (battle.player2.hand.health <= 0) {\\n            return (true, battle.player2.playerAddr);\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function fight(Battle memory battle) public view returns (Battle memory) {\\n        Hand memory atkHand;\\n        Hand memory defHand;\\n\\n        //Get attacker and defender for current turn\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\n            atkHand = battle.player1.hand;\\n            defHand = battle.player2.hand;\\n        } else {\\n            atkHand = battle.player2.hand;\\n            defHand = battle.player1.hand;\\n        }\\n\\n        (atkHand, defHand) = calSupportCardsInHand(atkHand, defHand);\\n\\n        // Fight\\n\\n        //Calculate HP loss for defending player\\n        if (atkHand.currentBCstats.atk > defHand.currentBCstats.def) {\\n            //If attacker's attack > defender's defense, find difference. That is the defending player's HP loss\\n            defHand.health -= (atkHand.currentBCstats.atk - defHand.currentBCstats.def);\\n        } else {\\n            //Otherwise, defender loses 1 HP\\n            defHand.health -= 1;\\n        }\\n\\n        //Write updated info back into battle\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\n            battle.player1.hand = atkHand;\\n            battle.player2.hand = defHand;\\n        } else {\\n            battle.player1.hand = defHand;\\n            battle.player2.hand = atkHand;\\n        }\\n\\n        return battle;\\n    }\\n\\n    \\n    //We calculate the effect of every card in the player's hand\\n    function calSupportCardsInHand(Hand memory atkHand, Hand memory defHand) public view returns (Hand memory, Hand memory) {\\n        // If this card is included in player's hand, adds an additional power equal to the total of\\n        // all normal offense/defense cards\\n        bool isPower0CardIncluded = false;\\n        // Total sum of normal support cards\\n        int256 totalNormalPower = 0;\\n        // Cal attacker hand\\n        for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n            //Loop through every card the attacker has in his hand\\n            uint256 id = atkHand.supportCardInHandIds[i];\\n\\n            //Get the support cardStats\\n            PepemonCardOracle.SupportCardStats memory cardStats = _cardContract.getSupportCardById(id);\\n            if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.OFFENSE) {\\n                // Card type is OFFENSE.\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\\n                    \\n                    //Checks if that support card is triggered and by how much it is triggered by\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\n                    if (isTriggered) {\\n                        //use triggeredPower if triggered\\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\n                    }\\n                    else{\\n                        //use basePower if not\\n                        atkHand.currentBCstats.atk += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n            } else if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\n                // Card type is STRONG OFFENSE.\\n\\n                //Make sure unstackable cards can't be stacked\\n                if (cardStats.unstackable) {\\n                    bool isNew = true;\\n                    // Check if card is new to previous cards\\n                    for (uint256 j = 0; j < i; j++) {\\n                        if (id == atkHand.supportCardInHandIds[j]) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    if (!isNew) {\\n                        //If it isn't - skip card\\n                        continue;\\n                    }\\n                    // Check if card is new to temp support info cards\\n                    for (uint256 j = 0; j < atkHand.tableSupportCardStats; j++) {\\n                        if (id == atkHand.tableSupportCards[j].supportCardId) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    if (!isNew) {\\n                        //If it isn't - skip card\\n                        continue;\\n                    }\\n                }\\n\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\n                    if (isTriggered) {\\n                        //If triggered: use triggered power\\n                        if (multiplier > 1) {\\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\n                        } else {\\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_ATTACK) {\\n                                // If it's a use Special Attack instead of Attack card\\n                                atkHand.currentBCstats.atk = atkHand.currentBCstats.sAtk;\\n                                continue;\\n                            } else if (effectOne.triggeredPower == 0) {\\n                                // We have a card that says ATK is increased by amount\\n                                // Equal to the total of all offense cards in the current turn\\n                                isPower0CardIncluded = true;\\n                                continue;\\n                            }\\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower;\\n                        }\\n                    }\\n                    else{\\n                        //If not triggered: use base power instead\\n                        atkHand.currentBCstats.atk += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n                // If card lasts for >1 turns\\n                if (cardStats.effectMany.power != 0) {\\n                    // Add card  to table if <5 on table currently\\n                    if (atkHand.tableSupportCardStats < 5) {\\n                        atkHand.tableSupportCards[atkHand.tableSupportCardStats++] = TableSupportCardStats({\\n                            supportCardId: id,\\n                            effectMany: cardStats.effectMany\\n                        });\\n                    }\\n                }\\n            } else {\\n                // Other card type is ignored.\\n                continue;\\n            }\\n        }\\n        if (isPower0CardIncluded) {\\n            //If we have a card that says ATK is increased by amount equal to total of all offense cards\\n            atkHand.currentBCstats.atk += totalNormalPower;\\n        }\\n        // Cal defense hand\\n        isPower0CardIncluded = false;\\n        totalNormalPower = 0;\\n\\n        for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n            uint256 id = defHand.supportCardInHandIds[i];\\n            PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(id);\\n            if (card.supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\\n                // Card type is DEFENSE\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\n                    if (isTriggered) {\\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(multiplier);\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\n                    }\\n                    else{\\n                        //If not triggered, use base power instead\\n                        defHand.currentBCstats.def += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n            } else if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_DEFENSE) {\\n                // Card type is STRONG DEFENSE\\n                if (card.unstackable) {\\n                    bool isNew = true;\\n                    // Check if card is new to previous cards\\n                    for (uint256 j = 0; j < i; j++) {\\n                        if (id == defHand.supportCardInHandIds[j]) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    // Check if card is new to temp support info cards\\n                    for (uint256 j = 0; j < defHand.tableSupportCardStats; j++) {\\n                        if (id == defHand.tableSupportCards[j].supportCardId) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    if (!isNew) {\\n                        continue;\\n                    }\\n                }\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    (bool isTriggered, uint256 num) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\n                    if (isTriggered) {\\n                        if (num > 0) {\\n                            defHand.currentBCstats.def += effectOne.triggeredPower * int256(num);\\n                        } else {\\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_DEFENSE) {\\n                                defHand.currentBCstats.def = defHand.currentBCstats.sDef;\\n                                continue;\\n                            } else if (effectOne.triggeredPower == 0) {\\n                                // Equal to the total of all defense cards in the current turn\\n                                isPower0CardIncluded = true;\\n                                continue;\\n                            }\\n                            defHand.currentBCstats.def += effectOne.triggeredPower;\\n                        }\\n                    }\\n                    else{\\n                        //If not triggered, use base stats instead\\n                        defHand.currentBCstats.def += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n                // If card effect lasts >1 turn\\n                if (card.effectMany.power != 0) {\\n                    // Add card to table if there are <5 cards on table right now\\n                    if (defHand.tableSupportCardStats < 5) {\\n                        defHand.tableSupportCards[defHand.tableSupportCardStats++] = TableSupportCardStats({\\n                            supportCardId: id,\\n                            effectMany: card.effectMany\\n                        });\\n                    }\\n                }\\n            } else {\\n                // Other card type is ignored.\\n                continue;\\n            }\\n        }\\n        if (isPower0CardIncluded) {\\n            //If a \\\"add total of defense\\\" card is included\\n            defHand.currentBCstats.def += totalNormalPower;\\n        }\\n\\n        return (atkHand, defHand);\\n    }\\n\\n    //Strip important game information (like speed, intelligence, etc.) from battle card\\n    function getCardStats(PepemonCardOracle.BattleCardStats memory x) internal pure returns (CurrentBattleCardStats memory){\\n        CurrentBattleCardStats memory ret;\\n\\n        ret.spd = int(x.spd);\\n        ret.inte = x.inte;\\n        ret.def = int(x.def);\\n        ret.atk = int(x.atk);\\n        ret.sAtk = int(x.sAtk);\\n        ret.sDef = int(x.sDef);\\n\\n        return ret;\\n    }\\n\\n//Checks if the requirements are satisfied for a certain code\\n//returns bool - is satisfied?\\n// uint - the multiplier for the card's attack power\\n// for most cases multiplier is 1\\nfunction checkReqCode(\\n        Hand memory atkHand,\\n        Hand memory defHand,\\n        uint256 reqCode,\\n        bool isAttacker\\n    ) internal view returns (bool, uint256) {\\n        bool isTriggered = false;\\n        uint256 multiplier = 0;\\n        if (reqCode == 0) {\\n            // No requirement\\n            isTriggered = true;\\n            multiplier = 1;\\n        } else if (reqCode == 1) {\\n            // Intelligence of offense pepemon <= 5.\\n            isTriggered = (atkHand.currentBCstats.inte <= 5 );\\n            multiplier = 1;\\n\\n        } else if (reqCode == 2) {\\n            // Number of defense cards of defense pepemon is 0.\\n            isTriggered = true;\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardType supportCardType = _cardContract.getSupportCardTypeById(\\n                    defHand.supportCardInHandIds[i]\\n                );\\n                if (supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\\n                    isTriggered = false;\\n                    break;\\n                }\\n            }\\n            multiplier = 1;\\n        } else if (reqCode == 3) {\\n            // Each +2 offense cards of offense pepemon.\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 2) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 4) {\\n            // Each +3 offense cards of offense pepemon.\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 3) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 5) {\\n            // Each offense card of offense pepemon.\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\n                    continue;\\n                }\\n                multiplier++;\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 6) {\\n            // Each +3 defense card of defense pepemon.\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    defHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 3) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 7) {\\n            // Each +4 defense card of defense pepemon.\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    defHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 4) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 8) {\\n            // Intelligence of defense pepemon <= 5.\\n            isTriggered = (defHand.currentBCstats.inte <= 5 );\\n            multiplier = 1;\\n        } else if (reqCode == 9) {\\n            // Intelligence of defense pepemon >= 7.\\n            isTriggered = (defHand.currentBCstats.inte >= 7 );\\n            multiplier = 1;\\n        } else if (reqCode == 10) {\\n            // Offense pepemon is using strong attack\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\n                    isTriggered = true;\\n                    break;\\n                }\\n            }\\n            multiplier = 1;\\n        } else if (reqCode == 11) {\\n            // The current HP is less than 50% of max HP.\\n            if (isAttacker) {\\n                isTriggered = (\\n                    atkHand.health * 2 <= int256(_cardContract.getBattleCardById(atkHand.battleCardId).hp)\\n                );\\n            } else {\\n                isTriggered = (\\n                    defHand.health * 2 <= int256(_cardContract.getBattleCardById(defHand.battleCardId).hp)\\n\\n                );\\n            }\\n            multiplier = 1;\\n        }\\n        return (isTriggered, multiplier);\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x2efae25275dd9e433a6d8adf83f04f3fdfa2cde310e1def5d0d182672088512a\",\"license\":\"MIT\"},\"contracts/PepemonCardDeck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n//pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./PepemonFactory.sol\\\";\\r\\nimport \\\"./PepemonCardOracle.sol\\\";\\r\\nimport \\\"./lib/Arrays.sol\\\";\\r\\n\\r\\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Deck {\\r\\n        uint256 battleCardId;\\r\\n        uint256 supportCardCount;\\r\\n        mapping(uint256 => SupportCardType) supportCardTypes;\\r\\n        uint256[] supportCardTypeList;\\r\\n    }\\r\\n\\r\\n    struct SupportCardType {\\r\\n        uint256 supportCardId;\\r\\n        uint256 count;\\r\\n        uint256 pointer;\\r\\n        bool isEntity;\\r\\n    }\\r\\n\\r\\n    struct SupportCardRequest {\\r\\n        uint256 supportCardId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    uint256 public MAX_SUPPORT_CARDS;\\r\\n    uint256 public MIN_SUPPORT_CARDS;\\r\\n\\r\\n    uint256 nextDeckId;\\r\\n    address public battleCardAddress;\\r\\n    address public supportCardAddress;\\r\\n\\r\\n    mapping(uint256 => Deck) public decks;\\r\\n    mapping(address => uint256[]) public playerToDecks;\\r\\n\\r\\n    constructor() ERC721(\\\"Pepedeck\\\", \\\"Pepedeck\\\") {\\r\\n        nextDeckId = 1;\\r\\n        MAX_SUPPORT_CARDS = 60;\\r\\n        MIN_SUPPORT_CARDS = 40;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override supportInterface .\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC1155Receiver)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier sendersDeck(uint256 _deckId) {\\r\\n        require(msg.sender == ownerOf(_deckId), \\\"PepemonCardDeck: Not your deck\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // PUBLIC METHODS\\r\\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\\r\\n        battleCardAddress = _battleCardAddress;\\r\\n    }\\r\\n\\r\\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\\r\\n        supportCardAddress = _supportCardAddress;\\r\\n    }\\r\\n\\r\\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\\r\\n        MAX_SUPPORT_CARDS = _maxSupportCards;\\r\\n    }\\r\\n\\r\\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\\r\\n        MIN_SUPPORT_CARDS = _minSupportCards;\\r\\n    }\\r\\n\\r\\n    function createDeck() public {\\r\\n        _safeMint(msg.sender, nextDeckId);\\r\\n        playerToDecks[msg.sender].push(nextDeckId);\\r\\n        nextDeckId = nextDeckId.add(1);\\r\\n    }\\r\\n\\r\\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\\r\\n        require(\\r\\n            PepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\\r\\n            \\\"PepemonCardDeck: Don't own battle card\\\"\\r\\n        );\\r\\n\\r\\n        require(battleCardId != decks[deckId].battleCardId, \\\"PepemonCardDeck: Card already in deck\\\");\\r\\n\\r\\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\\r\\n        decks[deckId].battleCardId = battleCardId;\\r\\n\\r\\n        PepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \\\"\\\");\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\\r\\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\\r\\n\\r\\n        decks[_deckId].battleCardId = 0;\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\\r\\n        for (uint256 i = 0; i < supportCards.length; i++) {\\r\\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\\r\\n        for (uint256 i = 0; i < _supportCards.length; i++) {\\r\\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // INTERNALS\\r\\n    function addSupportCardToDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \\\"PepemonCardDeck: Deck overflow\\\");\\r\\n        require(\\r\\n            PepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\\r\\n            \\\"PepemonCardDeck: You don't have enough of this card\\\"\\r\\n        );\\r\\n\\r\\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\\r\\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\\r\\n                supportCardId: _supportCardId,\\r\\n                count: _amount,\\r\\n                pointer: decks[_deckId].supportCardTypeList.length,\\r\\n                isEntity: true\\r\\n            });\\r\\n\\r\\n            // Prepend the ID to the list\\r\\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\\r\\n        } else {\\r\\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n            supportCard.count = supportCard.count.add(_amount);\\r\\n        }\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\\r\\n\\r\\n        PepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function removeSupportCardFromDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        supportCardList.count = supportCardList.count.sub(_amount);\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\\r\\n\\r\\n        if (supportCardList.count == 0) {\\r\\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\\r\\n\\r\\n            // update the pointer of the item to be swapped\\r\\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\\r\\n\\r\\n            // swap the last item of the list with the one to be deleted\\r\\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypeList.pop();\\r\\n\\r\\n            delete decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        }\\r\\n\\r\\n        PepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\\r\\n        if (_battleCardId != 0) {\\r\\n            PepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // VIEWS\\r\\n    function getDeckCount(address player) public view returns (uint256) {\\r\\n        return playerToDecks[player].length;\\r\\n    }\\r\\n\\r\\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\\r\\n        return decks[_deckId].battleCardId;\\r\\n    }\\r\\n\\r\\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n\\r\\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            supportCardTypes[i] = deck.supportCardTypeList[i];\\r\\n        }\\r\\n\\r\\n        return supportCardTypes;\\r\\n    }\\r\\n\\r\\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\\r\\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\\r\\n    }\\r\\n\\r\\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\\r\\n        return decks[deckId].supportCardCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns array of support cards for a deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\\r\\n        uint256 idx = 0;\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            uint256 supportCardId = deck.supportCardTypeList[i];\\r\\n            for (uint256 j = 0; j < deck.supportCardTypes[supportCardId].count; j++) {\\r\\n                supportCards[idx++] = supportCardId;\\r\\n            }\\r\\n        }\\r\\n        return supportCards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Shuffles deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\\r\\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\\r\\n        return Arrays.shuffle(totalSupportCards, _seed);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdb7a4694edf904ec8d629bfeb20d0e07992f7f59f8da5868ba50ae5583ef94f1\",\"license\":\"MIT\"},\"contracts/PepemonCardOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/AdminRole.sol\\\";\\n\\n/**\\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\\n**/\\ncontract PepemonCardOracle is AdminRole {\\n    enum BattleCardType {\\n        PLANT,\\n        FIRE\\n    }\\n\\n    enum SupportCardType {\\n        OFFENSE,\\n        STRONG_OFFENSE,\\n        DEFENSE,\\n        STRONG_DEFENSE\\n    }\\n\\n    enum EffectTo {\\n        ATTACK,\\n        STRONG_ATTACK,\\n        DEFENSE,\\n        STRONG_DEFENSE,\\n        SPEED,\\n        INTELLIGENCE\\n    }\\n\\n    enum EffectFor {\\n        ME,\\n        ENEMY\\n    }\\n\\n    struct BattleCardStats {\\n        uint256 battleCardId;\\n        BattleCardType battleCardType;\\n        string name;\\n        uint256 hp; // hitpoints\\n        uint256 spd; // speed\\n        uint256 inte; // intelligence\\n        uint256 def; // defense\\n        uint256 atk; // attack\\n        uint256 sAtk; // special attack\\n        uint256 sDef; // special defense\\n    }\\n\\n    struct SupportCardStats {\\n        uint256 supportCardId;\\n        SupportCardType supportCardType;\\n        string name;\\n        EffectOne[] effectOnes;\\n        EffectMany effectMany;\\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\\n        bool unstackable;\\n        // This property is for EffectMany now.\\n        // If true, assume the card is already in effect\\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\\n        bool unresettable;\\n    }\\n\\n    struct EffectOne {\\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\\n        \\n        //basePower = power if req not met\\n        int256 basePower;\\n\\n        //triggeredPower = power if req met\\n        int256 triggeredPower;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    struct EffectMany {\\n        int256 power;\\n        uint256 numTurns;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    mapping(uint256 => BattleCardStats) public battleCardStats;\\n    mapping(uint256 => SupportCardStats) public supportCardStats;\\n\\n    event BattleCardCreated(address sender, uint256 cardId);\\n    event BattleCardUpdated(address sender, uint256 cardId);\\n    event SupportCardCreated(address sender, uint256 cardId);\\n    event SupportCardUpdated(address sender, uint256 cardId);\\n\\n    function addBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId == 0, \\\"PepemonCard: BattleCard already exists\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.battleCardId = cardData.battleCardId;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.hp = cardData.hp;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardCreated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function updateBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.hp = cardData.hp;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardUpdated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function getBattleCardById(uint256 _id) public view returns (BattleCardStats memory) {\\n        require(battleCardStats[_id].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n        return battleCardStats[_id];\\n    }\\n\\n    function addSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId == 0, \\\"PepemonCard: SupportCard already exists\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardCreated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function updateSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardUpdated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function getSupportCardById(uint256 _id) public view returns (SupportCardStats memory) {\\n        require(supportCardStats[_id].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n        return supportCardStats[_id];\\n    }\\n\\n    /**\\n     * @dev Get supportCardType of supportCard\\n     * @param _id uint256\\n     */\\n    function getSupportCardTypeById(uint256 _id) public view returns (SupportCardType) {\\n        return getSupportCardById(_id).supportCardType;\\n    }\\n}\\n\",\"keccak256\":\"0x491c921c6ca5ce63e59a94385e481fb4ae7b7ffa84949bbb4765c34592684cb7\",\"license\":\"MIT\"},\"contracts/PepemonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface PepemonFactory {\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f04dfad7e690dca80f5924be4849209f7032ab29e1597745424ec6913ae459b\",\"license\":\"MIT\"},\"contracts/lib/AdminRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AdminRole {\\n  using Roles for Roles.Role;\\n\\n  event AdminAdded(address indexed account);\\n  event AdminRemoved(address indexed account);\\n\\n  Roles.Role private admins;\\n\\n  constructor() {\\n    _addAdmin(msg.sender);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender));\\n    _;\\n  }\\n\\n  function isAdmin(address account) public view returns (bool) {\\n    return admins.has(account);\\n  }\\n\\n  function addAdmin(address account) public onlyAdmin {\\n    _addAdmin(account);\\n  }\\n\\n  function renounceAdmin() public {\\n    _removeAdmin(msg.sender);\\n  }\\n\\n  function _addAdmin(address account) internal {\\n    admins.add(account);\\n    emit AdminAdded(account);\\n  }\\n\\n  function _removeAdmin(address account) internal {\\n    admins.remove(account);\\n    emit AdminRemoved(account);\\n  }\\n}\",\"keccak256\":\"0x087322ecbf7bdc39315bedc5ec603149a119a35910f82ceb131820c1b7bb9804\",\"license\":\"MIT\"},\"contracts/lib/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Arrays {\\n    //Shuffles an array of uints with random seed\\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            //Pick random index to swap current element with\\n            uint256 n = i + _seed % (_elements.length - i);\\n\\n            //swap elements\\n            uint256 temp = _elements[n];\\n            _elements[n] = _elements[i];\\n            _elements[i] = temp;\\n\\n            //Create new pseudorandom number using seed.\\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\\n        }\\n        return _elements;\\n    }\\n}\\n\",\"keccak256\":\"0x61371b66c2b9849ea3837a60073233c577f8978017339fcd3bf169cb498a1828\",\"license\":\"MIT\"},\"contracts/lib/ChainLinkRngOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"./AdminRole.sol\\\";\\n\\nabstract contract ChainLinkRngOracle is VRFConsumerBase, AdminRole {\\n    bytes32 immutable keyHash;\\n    bytes32 public lastRequestId;\\n    uint256 internal fee;\\n\\n    address constant maticLink = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\n    address constant maticVrfCoordinator = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\\n    bytes32 constant maticKeyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\\n\\n    address constant mumbaiLink = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\\n    address constant mumbaiVrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;\\n    bytes32 constant mumbaiKeyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\\n\\n\\n\\n    mapping(bytes32 => uint256) internal results;\\n\\n    constructor() VRFConsumerBase(mumbaiVrfCoordinator, mumbaiLink) {\\n        keyHash = mumbaiKeyHash;\\n        fee = 1 ether / 1000;\\n    }\\n\\n    //Get a new random number (paying link for it)\\n    //Only callable by admin\\n    function getNewRandomNumber() public onlyAdmin returns (bytes32 requestId) {\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        lastRequestId = requestRandomness(keyHash, fee);\\n        return lastRequestId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        results[requestId] = randomness;\\n    }\\n\\n    function fetchNumberByRequestId(bytes32 _requestId) public view returns (uint256) {\\n        return results[_requestId];\\n    }\\n\\n    //Get most recent random number and use that as randomness source    \\n    function getRandomNumber() public view returns (uint256){\\n        return fetchNumberByRequestId(lastRequestId);        \\n    }\\n}\\n\",\"keccak256\":\"0xed1b3081f066d98cdfbaa4f9a050e5186ff7e4c44925bf9222a98b15c0dae13f\",\"license\":\"MIT\"},\"contracts/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an account access to this role\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(!has(role, account));\\n\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev remove an account's access to this role\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(has(role, account));\\n\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev check if an account has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address account)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    require(account != address(0));\\n    return role.bearer[account];\\n  }\\n}\",\"keccak256\":\"0xd66f1c8050d61971204bf1249496bd98b69fd79b2011a630767f817d7201b56c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620043f3380380620043f383398101604081905262000034916200017c565b6200003f3362000087565b600480546001600160a01b039485166001600160a01b0319918216179091556005805493851693821693909317909255600680549190931691161790556001600355620001c5565b620000a2816000620000d960201b6200168d1790919060201c565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b6001600160a01b038116620000ed57600080fd5b620000f9828262000129565b156200010457600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166200013f57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b80516001600160a01b03811681146200017757600080fd5b919050565b60008060006060848603121562000191578283fd5b6200019c846200015f565b9250620001ac602085016200015f565b9150620001bc604085016200015f565b90509250925092565b61421e80620001d56000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063abd6b07511610066578063abd6b0751461012f578063c3ee543b14610150578063c6b34e1c14610171578063edc85a9114610192578063ee56b391146101b25761009e565b8063047a4130146100a357806324d7806c146100cd578063606d2e96146100ed57806370480275146101125780638bad0c0a14610127575b600080fd5b6100b66100b1366004613a09565b6101d2565b6040516100c4929190613e51565b60405180910390f35b6100e06100db36600461382b565b610225565b6040516100c49190613e46565b6101006100fb366004613bb4565b610239565b6040516100c496959493929190613f29565b61012561012036600461382b565b6106fc565b005b61012561071a565b61014261013d366004613a09565b610725565b6040516100c4929190613ebe565b61016361015e366004613a9f565b61078b565b6040516100c4929190613f03565b61018461017f366004613845565b611161565b6040516100c4929190613ee6565b6101a56101a0366004613a09565b61152d565b6040516100c49190613eaf565b6101c56101c0366004613bb4565b61167b565b6040516100c49190613f20565b600080600083602001516040015160000151136101f9575050602081015151600190610220565b604080840151015151600012610219575050604081015151600190610220565b5060009050805b915091565b600061023181836116d9565b90505b919050565b6002602081815260009283526040928390208054845160a080820187526001840180546001600160a01b031683529584015482860152865160c08082018952600386018054835260048701548389015289519182018a52600587015482526006870154978201979097526007860154818a015260088087015460608084019190915260098801546080840152600a88015494830194909452828a019190915288516101008101808b5295999698949794968801959294938501929091600b8a019182845b8154815260200190600101908083116102fd575050509183525050601082015460208201526040805160a0810182529101906011830160056000835b828210156104475783826005020160405180604001604052908160008201548152602001600182016040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660058111156103b257634e487b7160e01b600052602160045260246000fd5b60058111156103d157634e487b7160e01b600052602160045260246000fd5b81526020016002820160019054906101000a900460ff16600181111561040757634e487b7160e01b600052602160045260246000fd5b600181111561042657634e487b7160e01b600052602160045260246000fd5b81526020016003820154815250508152505081526020019060010190610339565b5050509152505081526040805161078081019182905260209092019190602c840190603c9082845b81548152602001906001019080831161046f575050509183525050606891909101546020918201526040805160a08082018352606a860180546001600160a01b03168352606b87015483860152835160c08082018652606c890180548352606d8a01548389015286519182018752606e8a01548252606f8a015497820197909752607089015481870152607189015460608083019190915260728a0154608083015260738a0154948201949094528186015284516101008101808752979897949692958701949193840191607489019060089082845b815481526020019060010190808311610545575050509183525050601082015460208201526040805160a0810182529101906011830160056000835b8282101561068f5783826005020160405180604001604052908160008201548152602001600182016040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660058111156105fa57634e487b7160e01b600052602160045260246000fd5b600581111561061957634e487b7160e01b600052602160045260246000fd5b81526020016002820160019054906101000a900460ff16600181111561064f57634e487b7160e01b600052602160045260246000fd5b600181111561066e57634e487b7160e01b600052602160045260246000fd5b81526020016003820154815250508152505081526020019060010190610581565b5050509152505081526040805161078081019182905260209092019190602c840190603c9082845b8154815260200190600101908083116106b75750505091835250506068919091015460209091015260d382015460d49092015490919060ff8082169161010090041686565b61070533610225565b61070e57600080fd5b61071781611712565b50565b61072333611754565b565b61072d6130f6565b600061073883611796565b925060005b61074684611e1d565b93506107518461152d565b935060008061075f866101d2565b9150915081156107725791506107849050565b61077b86611ff0565b9550505061073d565b9293915050565b610793613157565b61079b613157565b60008060005b866040015160200151811015610c61576000876060015182600881106107d757634e487b7160e01b600052603260045260246000fd5b602002015160048054604051634ca7d96360e11b81529293506000926001600160a01b039091169163994fb2c69161081191869101613f20565b60006040518083038186803b15801561082957600080fd5b505afa15801561083d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108659190810190613ad5565b905060008160200151600381111561088d57634e487b7160e01b600052602160045260246000fd5b141561097f5760005b816060015151811015610979576000826060015182815181106108c957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806108e78d8d85608001516001612040565b91509150811561093a578083602001516109019190614051565b8d604001516060018181516109169190613ff8565b9052506020830151610929908290614051565b6109339089613ff8565b9750610963565b825160408e01516060018051610951908390613ff8565b90525082516109609089613ff8565b97505b505050808061097190614141565b915050610896565b50610c4c565b6001816020015160038111156109a557634e487b7160e01b600052602160045260246000fd5b1415610c45578060a0015115610a8657600160005b84811015610a0d578a6060015181600881106109e657634e487b7160e01b600052603260045260246000fd5b60200201518414156109fb5760009150610a0d565b80610a0581614141565b9150506109ba565b5080610a1b57505050610c4f565b60005b8a60800151811015610a76578a60a001518160058110610a4e57634e487b7160e01b600052603260045260246000fd5b602002015151841415610a645760009150610a76565b80610a6e81614141565b915050610a1e565b5080610a8457505050610c4f565b505b60005b816060015151811015610bd557600082606001518281518110610abc57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080610ada8d8d85608001516001612040565b915091508115610b96576001811115610b1a57808360200151610afd9190614051565b8d60400151606001818151610b129190613ff8565b905250610b91565b600183604001516005811115610b4057634e487b7160e01b600052602160045260246000fd5b1415610b5e5750505060408a01516080810151606090910152610bc3565b6020830151610b735760019850505050610bc3565b82602001518d60400151606001818151610b8d9190613ff8565b9052505b610bbf565b825160408e01516060018051610bad908390613ff8565b9052508251610bbc9089613ff8565b97505b5050505b80610bcd81614141565b915050610a89565b5060808101515115610c4057600589608001511015610c405760408051808201909152828152608080830151602083015260a08b0151908b01805190610c1a82614141565b905260058110610c3a57634e487b7160e01b600052603260045260246000fd5b60200201525b610c4c565b5050610c4f565b50505b80610c5981614141565b9150506107a1565b508115610c8257808660400151606001818151610c7e9190613ff8565b9052505b506000905080805b85604001516020015181101561113657600086606001518260088110610cc057634e487b7160e01b600052603260045260246000fd5b602002015160048054604051634ca7d96360e11b81529293506000926001600160a01b039091169163994fb2c691610cfa91869101613f20565b60006040518083038186803b158015610d1257600080fd5b505afa158015610d26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4e9190810190613ad5565b9050600281602001516003811115610d7657634e487b7160e01b600052602160045260246000fd5b1415610e675760005b816060015151811015610e6157600082606001518281518110610db257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080610dd08d8d85608001516000612040565b915091508115610e2357808360200151610dea9190614051565b8c60400151604001818151610dff9190613ff8565b9052506020830151610e12908290614051565b610e1c9089613ff8565b9750610e4b565b82516040808e0151018051610e39908390613ff8565b9052508251610e489089613ff8565b97505b5050508080610e5990614141565b915050610d7f565b50611121565b600381602001516003811115610e8d57634e487b7160e01b600052602160045260246000fd5b141561111a578060a0015115610f6157600160005b84811015610ef55789606001518160088110610ece57634e487b7160e01b600052603260045260246000fd5b6020020151841415610ee35760009150610ef5565b80610eed81614141565b915050610ea2565b5060005b8960800151811015610f51578960a001518160058110610f2957634e487b7160e01b600052603260045260246000fd5b602002015151841415610f3f5760009150610f51565b80610f4981614141565b915050610ef9565b5080610f5f57505050611124565b505b60005b8160600151518110156110aa57600082606001518281518110610f9757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080610fb58d8d85608001516000612040565b91509150811561106c578015610ff257808360200151610fd59190614051565b8c60400151604001818151610fea9190613ff8565b905250611067565b60038360400151600581111561101857634e487b7160e01b600052602160045260246000fd5b1415611034575050506040808a015160a0810151910152611098565b60208301516110495760019850505050611098565b82602001518c604001516040018181516110639190613ff8565b9052505b611094565b82516040808e0151018051611082908390613ff8565b90525082516110919089613ff8565b97505b5050505b806110a281614141565b915050610f64565b5060808101515115611115576005886080015110156111155760408051808201909152828152608080830151602083015260a08a0151908a018051906110ef82614141565b90526005811061110f57634e487b7160e01b600052603260045260246000fd5b60200201525b611121565b5050611124565b50505b8061112e81614141565b915050610c8a565b508115611157578085604001516040018181516111539190613ff8565b9052505b5093949293505050565b6111696130f6565b600061117433610225565b61117d57600080fd5b836001600160a01b0316866001600160a01b031614156111b85760405162461bcd60e51b81526004016111af90613e6a565b60405180910390fd5b60055460405163a090195d60e01b81526000916001600160a01b03169063a090195d906111e9908990600401613f20565b604080518083038186803b15801561120057600080fd5b505afa158015611214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112389190613be4565b5060055460405163a090195d60e01b81529192506000916001600160a01b039091169063a090195d9061126f908890600401613f20565b604080518083038186803b15801561128657600080fd5b505afa15801561129a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112be9190613be4565b5060048054604051632552294360e11b81529293506000926001600160a01b0390911691634aa45286916112f491879101613f20565b60006040518083038186803b15801561130c57600080fd5b505afa158015611320573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113489190810190613931565b60048054604051632552294360e11b81529293506000926001600160a01b0390911691634aa452869161137d91879101613f20565b60006040518083038186803b15801561139557600080fd5b505afa1580156113a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d19190810190613931565b90506113db6130f6565b600354816000018181525050826060015181602001516040015160000181815250508481602001516040015160200181815250508a8160200151600001906001600160a01b031690816001600160a01b031681525050898160200151602001818152505081606001518160400151604001516000018181525050838160400151604001516020018181525050888160400151600001906001600160a01b031690816001600160a01b03168152505087816040015160200181815250506114a081612b71565b60016000600354815260200190815260200160002081905550886001600160a01b03168b6001600160a01b03167ffc09ac3d11089b107ccf634445378f0fd381d1be0f6ef37cf5dcc6272c433f176003546040516114fe9190613f20565b60405180910390a3600380548291600061151783614141565b9190505596509650505050505094509492505050565b6115356130f6565b61153d613157565b611545613157565b60008460800151600181111561156b57634e487b7160e01b600052602160045260246000fd5b141561158c57836020015160400151915083604001516040015190506115a3565b836040015160400151915083602001516040015190505b6115ad828261078b565b80925081935050508060400151604001518260400151606001511315611600578060400151604001518260400151606001516115e991906140d4565b815182906115f89083906140d4565b905250611617565b60018160000181815161161391906140d4565b9052505b60008460800151600181111561163d57634e487b7160e01b600052602160045260246000fd5b141561165d57602084015160409081018390528085015101819052611673565b6020840151604090810182905280850151018290525b509192915050565b60016020526000908152604090205481565b6001600160a01b0381166116a057600080fd5b6116aa82826116d9565b156116b457600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166116ee57600080fd5b506001600160a01b03811660009081526020839052604090205460ff165b92915050565b61171d60008261168d565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b61175f600082612c45565b6040516001600160a01b038216907fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90600090a250565b61179e6130f6565b6020808301516040808501516004805483850151909501519251632552294360e11b8152939491936000936001600160a01b0390931692634aa45286926117e59201613f20565b60006040518083038186803b1580156117fd57600080fd5b505afa158015611811573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118399190810190613931565b60048054604080860151602001519051632552294360e11b81529394506000936001600160a01b0390921692634aa4528692611876929101613f20565b60006040518083038186803b15801561188e57600080fd5b505afa1580156118a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ca9190810190613931565b90506118d582612c8d565b60408086015101526118e681612c8d565b60408085015181019190915260055460208601519151639895d74960e01b81526000926001600160a01b0390921691639895d749916119289190600401613f20565b60206040518083038186803b15801561194057600080fd5b505afa158015611954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119789190613bcc565b6005546020860151604051639895d74960e01b81529293506000926001600160a01b0390921691639895d749916119b191600401613f20565b60206040518083038186803b1580156119c957600080fd5b505afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190613bcc565b9050600060058960600151611a16919061415c565b1590508015611c465760055460208801516000916001600160a01b031690637b8ef82790611a4560458e612ce2565b6040518363ffffffff1660e01b8152600401611a62929190613f7e565b60006040518083038186803b158015611a7a57600080fd5b505afa158015611a8e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ab69190810190613888565b905060005b84811015611b2657818181518110611ae357634e487b7160e01b600052603260045260246000fd5b6020026020010151896060015182603c8110611b0f57634e487b7160e01b600052603260045260246000fd5b602002015280611b1e81614141565b915050611abb565b5060006080890181905260055460208901516001600160a01b0390911690637b8ef82790611b566101a48f612ce2565b6040518363ffffffff1660e01b8152600401611b73929190613f7e565b60006040518083038186803b158015611b8b57600080fd5b505afa158015611b9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bc79190810190613888565b905060005b84811015611c3757818181518110611bf457634e487b7160e01b600052603260045260246000fd5b6020026020010151896060015182603c8110611c2057634e487b7160e01b600052603260045260246000fd5b602002015280611c2f81614141565b915050611bcc565b50506000608088015250611c72565b611c5887604001518760400151612d0e565b6040808901829052870151611c6c91612d0e565b60408701525b60005b87604001516040015160200151811015611d0b57876060015184896080015183611c9f9190614039565b611ca9919061415c565b603c8110611cc757634e487b7160e01b600052603260045260246000fd5b60200201518860400151606001518260088110611cf457634e487b7160e01b600052603260045260246000fd5b602002015280611d0381614141565b915050611c75565b508660400151604001516020015187608001818151611d2a9190614039565b90525060005b86604001516040015160200151811015611dc657866060015183886080015183611d5a9190614039565b611d64919061415c565b603c8110611d8257634e487b7160e01b600052603260045260246000fd5b60200201518760400151606001518260088110611daf57634e487b7160e01b600052603260045260246000fd5b602002015280611dbe81614141565b915050611d30565b508560400151604001516020015186608001818151611de59190614039565b905250602089018790526040890186905260608901805190611e0682614141565b90525050600060a089015250959695505050505050565b611e256130f6565b6020820151604090810151810151818401518201519091015160008460a001516001811115611e6457634e487b7160e01b600052602160045260246000fd5b1415611f6b57805182511315611ea4576080840160005b90816001811115611e9c57634e487b7160e01b600052602160045260246000fd5b905250611f66565b805182511215611eb957608084016001611e7b565b806020015182602001511115611ed457608084016000611e7b565b806020015182602001511015611eef57608084016001611e7b565b60006002611f0062010f2c87612ce2565b611f0a919061415c565b90508015611f19576001611f1c565b60005b85608001906001811115611f4057634e487b7160e01b600052602160045260246000fd5b90816001811115611f6157634e487b7160e01b600052602160045260246000fd5b905250505b611673565b600084608001516001811115611f9157634e487b7160e01b600052602160045260246000fd5b14611f9d576000611fa0565b60015b84608001906001811115611fc457634e487b7160e01b600052602160045260246000fd5b90816001811115611fe557634e487b7160e01b600052602160045260246000fd5b905250929392505050565b611ff86130f6565b60008260a00151600181111561201e57634e487b7160e01b600052602160045260246000fd5b141561203057600160a083015261203c565b61203982611796565b91505b5090565b60008080808561205557506001905080612b64565b8560011415612074575050604086015160200151600510156001612b64565b8560021415612190576001915060005b8760400151602001518110156121865760045460608901516000916001600160a01b031690634bcb96139084600881106120ce57634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016120ef9190613f20565b60206040518083038186803b15801561210757600080fd5b505afa15801561211b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213f9190613917565b9050600281600381111561216357634e487b7160e01b600052602160045260246000fd5b1415612173576000935050612186565b508061217e81614141565b915050612084565b5060019050612b64565b856003141561231d5760005b8860400151602001518110156123115760045460608a01516000916001600160a01b03169063994fb2c69084600881106121e657634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016122079190613f20565b60006040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261225b9190810190613ad5565b905060008160200151600381111561228357634e487b7160e01b600052602160045260246000fd5b1461228e57506122ff565b60005b8160600151518110156122fc576000826060015182815181106122c457634e487b7160e01b600052603260045260246000fd5b602002602001015190508060000151600214156122e957846122e581614141565b9550505b50806122f481614141565b915050612291565b50505b8061230981614141565b91505061219c565b50600081119150612b64565b856004141561249e5760005b8860400151602001518110156123115760045460608a01516000916001600160a01b03169063994fb2c690846008811061237357634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016123949190613f20565b60006040518083038186803b1580156123ac57600080fd5b505afa1580156123c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123e89190810190613ad5565b905060008160200151600381111561241057634e487b7160e01b600052602160045260246000fd5b1461241b575061248c565b60005b8160600151518110156124895760008260600151828151811061245157634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160031415612476578461247281614141565b9550505b508061248181614141565b91505061241e565b50505b8061249681614141565b915050612329565b85600514156125bd5760005b8860400151602001518110156123115760045460608a01516000916001600160a01b03169063994fb2c69084600881106124f457634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016125159190613f20565b60006040518083038186803b15801561252d57600080fd5b505afa158015612541573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125699190810190613ad5565b905060008160200151600381111561259157634e487b7160e01b600052602160045260246000fd5b1461259c57506125ab565b826125a681614141565b935050505b806125b581614141565b9150506124aa565b856006141561273e5760005b8760400151602001518110156123115760045460608901516000916001600160a01b03169063994fb2c690846008811061261357634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016126349190613f20565b60006040518083038186803b15801561264c57600080fd5b505afa158015612660573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126889190810190613ad5565b90506002816020015160038111156126b057634e487b7160e01b600052602160045260246000fd5b146126bb575061272c565b60005b816060015151811015612729576000826060015182815181106126f157634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160031415612716578461271281614141565b9550505b508061272181614141565b9150506126be565b50505b8061273681614141565b9150506125c9565b85600714156128bf5760005b8760400151602001518110156123115760045460608901516000916001600160a01b03169063994fb2c690846008811061279457634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016127b59190613f20565b60006040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128099190810190613ad5565b905060028160200151600381111561283157634e487b7160e01b600052602160045260246000fd5b1461283c57506128ad565b60005b8160600151518110156128aa5760008260600151828151811061287257634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160041415612897578461289381614141565b9550505b50806128a281614141565b91505061283f565b50505b806128b781614141565b91505061274a565b85600814156128de575050604085015160200151600510156001612b64565b85600914156128fd575050604085015160200151600711156001612b64565b85600a1415612a135760005b8860400151602001518110156121865760045460608a01516000916001600160a01b03169063994fb2c690846008811061295357634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016129749190613f20565b60006040518083038186803b15801561298c57600080fd5b505afa1580156129a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129c89190810190613ad5565b90506001816020015160038111156129f057634e487b7160e01b600052602160045260246000fd5b1415612a00576001935050612186565b5080612a0b81614141565b915050612909565b85600b1415612b64578415612ac3576004805460208a0151604051632552294360e11b81526001600160a01b0390921692634aa4528692612a55929101613f20565b60006040518083038186803b158015612a6d57600080fd5b505afa158015612a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612aa99190810190613931565b606001518851612aba906002614051565b13159150612b60565b600480546020890151604051632552294360e11b81526001600160a01b0390921692634aa4528692612af6929101613f20565b60006040518083038186803b158015612b0e57600080fd5b505afa158015612b22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b4a9190810190613931565b606001518751612b5b906002614051565b131591505b5060015b9097909650945050505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663dbdff2c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc257600080fd5b505afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa9190613bcc565b905060004382856020015160000151866040015160000151604051602001612c259493929190613dfc565b60408051808303601f190181529190528051602090910120949350505050565b6001600160a01b038116612c5857600080fd5b612c6282826116d9565b612c6b57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b612c95613199565b612c9d613199565b608080840151825260a080850151602084015260c0850151604084015260e0850151606084015261010085015191830191909152610120840151908201529050919050565b60608101518151600090815260016020908152604080832054905192938493612c259388939101613e30565b612d16613157565b60005b83608001518110156116735760008460a001518260058110612d4b57634e487b7160e01b600052603260045260246000fd5b6020020151905060008160200151905060018160200151106130e157600081606001516001811115612d8d57634e487b7160e01b600052602160045260246000fd5b1415612ec657600081604001516005811115612db957634e487b7160e01b600052602160045260246000fd5b1415612dde57805160408701516060018051612dd6908390613ff8565b905250612ec1565b600281604001516005811115612e0457634e487b7160e01b600052602160045260246000fd5b1415612e20578051604080880151018051612dd6908390613ff8565b600481604001516005811115612e4657634e487b7160e01b600052602160045260246000fd5b1415612e6057805160408701518051612dd6908390613ff8565b600581604001516005811115612e8657634e487b7160e01b600052602160045260246000fd5b1415612ec1578051604087015160200151600091612ea391613ff8565b905060008113612eb4576000612eb6565b805b604088015160200152505b612ff4565b600081604001516005811115612eec57634e487b7160e01b600052602160045260246000fd5b1415612f1157805160408601516060018051612f09908390613ff8565b905250612ff4565b600281604001516005811115612f3757634e487b7160e01b600052602160045260246000fd5b1415612f53578051604080870151018051612f09908390613ff8565b600481604001516005811115612f7957634e487b7160e01b600052602160045260246000fd5b1415612f9357805160408601518051612f09908390613ff8565b600581604001516005811115612fb957634e487b7160e01b600052602160045260246000fd5b1415612ff4578051604086015160200151600091612fd691613ff8565b905060008113612fe7576000612fe9565b805b604087015160200152505b602081018051906130048261412a565b90525060208101516130e157600186608001516130219190614113565b83101561308b578560a001516001876080015161303e9190614113565b6005811061305c57634e487b7160e01b600052603260045260246000fd5b60200201518660a00151846005811061308557634e487b7160e01b600052603260045260246000fd5b60200201525b8560a00151600187608001516130a19190614113565b600581106130bf57634e487b7160e01b600052603260045260246000fd5b602002016130cb6131cf565b9052608086018051906130dd8261412a565b9052505b505080806130ee90614141565b915050612d19565b6040518060c00160405280600081526020016131106131e9565b815260200161311d6131e9565b8152602001600081526020016000600181111561314a57634e487b7160e01b600052602160045260246000fd5b815260200160005b905290565b6040518060c001604052806000815260200160008152602001613178613199565b8152602001613185613222565b815260200160008152602001613152613241565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180604001604052806000815260200161315261326e565b6040805160a08101825260008082526020820152908101613208613157565b81526020016132156132b4565b8152602001600081525090565b6040518061010001604052806008906020820280368337509192915050565b6040518060a001604052806005905b6132586131cf565b8152602001906001900390816132505790505090565b6040518060a001604052806000815260200160008152602001600060058111156132a857634e487b7160e01b600052602160045260246000fd5b81526020016000613215565b604051806107800160405280603c906020820280368337509192915050565b60006132e66132e184613fd8565b613f8c565b90508082602086818702860111156132fd57600080fd5b60005b8681101561331c57823584529281019291810191600101613300565b505050509392505050565b80356001600160a01b038116811461023457600080fd5b600082601f83011261334e578081fd5b8151602061335e6132e183613fb5565b8281528181019085830160a08086028801850189101561337c578687fd5b865b868110156134095781838b031215613394578788fd5b604080518381018181106001600160401b03821117156133b6576133b66141a8565b8252845181528785015188820152848201516133d1816141db565b808383015250606091506133e6828601613566565b91810191909152608084810151908201528552938501939181019160010161337e565b509198975050505050505050565b600082601f830112613427578081fd5b60056134356132e182613fd8565b8084866103c087011115613447578485fd5b845b8481101561351c5781880360c080821215613462578788fd5b604080518181016001600160401b038282108183111715613485576134856141a8565b9083528635825260209060a0601f1987018113156134a1578c8dfd5b8451965080870187811083821117156134bc576134bc6141a8565b8552888301358752888501358784015260609150818901356134dd816141db565b808689015250608094506134f2858a0161355b565b91870191909152870135928501929092528082019390935291865294019390910190600101613449565b50909695505050505050565b600082601f830112613538578081fd5b613544836008846132d3565b9392505050565b8051801515811461023457600080fd5b8035610234816141ce565b8051610234816141ce565b80516004811061023457600080fd5b600082601f830112613590578081fd5b81516001600160401b038111156135a9576135a96141a8565b60206135bd601f8301601f19168201613f8c565b82815285828487010111156135d0578384fd5b835b838110156135ed5785810183015182820184015282016135d2565b838111156135fd57848385840101525b5095945050505050565b600060c08284031215613618578081fd5b60405160c081018181106001600160401b038211171561363a5761363a6141a8565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b600060a08284031215613690578081fd5b60405160a081018181106001600160401b03821117156136b2576136b26141a8565b8060405250809150825181526020830151602082015260408301516136d6816141db565b604082015260608301516136e9816141ce565b6060820152608092830151920191909152919050565b60006105e08284031215613711578081fd5b60405160c081018181106001600160401b0382111715613733576137336141a8565b806040525080915082358152602083013560208201526137568460408501613607565b6040820152613769846101008501613528565b60608201526102008301356080820152613787846102208501613417565b60a08201525092915050565b6000610dc082840312156137a5578081fd5b60405160a081018181106001600160401b03821117156137c7576137c76141a8565b6040529050806137d683613327565b8152602083013560208201526137ef84604085016136ff565b60408201528361063f84011261380457600080fd5b61381484603c61062086016132d3565b6060820152610da083013560808201525092915050565b60006020828403121561383c578081fd5b61354482613327565b6000806000806080858703121561385a578283fd5b61386385613327565b93506020850135925061387860408601613327565b9396929550929360600135925050565b6000602080838503121561389a578182fd5b82516001600160401b038111156138af578283fd5b8301601f810185136138bf578283fd5b80516138cd6132e182613fb5565b81815283810190838501858402850186018910156138e9578687fd5b8694505b8385101561390b5780518352600194909401939185019185016138ed565b50979650505050505050565b600060208284031215613928578081fd5b61354482613571565b600060208284031215613942578081fd5b81516001600160401b0380821115613958578283fd5b818401915061014080838703121561396e578384fd5b61397781613f8c565b90508251815261398960208401613566565b602082015260408301518281111561399f578485fd5b6139ab87828601613580565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100915081830151828201526101209150818301518282015280935050505092915050565b6000611c008284031215613a1b578081fd5b60405160c081018181106001600160401b0382111715613a3d57613a3d6141a8565b60405282358152613a518460208501613793565b6020820152613a6484610de08501613793565b6040820152611ba08301356060820152613a81611bc0840161355b565b6080820152613a93611be0840161355b565b60a08201529392505050565b600080610bc08385031215613ab2578182fd5b613abc84846136ff565b9150613acc846105e085016136ff565b90509250929050565b600060208284031215613ae6578081fd5b81516001600160401b0380821115613afc578283fd5b908301906101608286031215613b10578283fd5b613b1a60e0613f8c565b82518152613b2a60208401613571565b6020820152604083015182811115613b40578485fd5b613b4c87828601613580565b604083015250606083015182811115613b63578485fd5b613b6f8782860161333e565b606083015250613b82866080850161367f565b6080820152613b94610120840161354b565b60a0820152613ba6610140840161354b565b60c082015295945050505050565b600060208284031215613bc5578081fd5b5035919050565b600060208284031215613bdd578081fd5b5051919050565b60008060408385031215613bf6578182fd5b505080516020909101519092909150565b8060005b6005811015613c845781518051855260209081015180518287015280820151604080880191909152810151909190606060068210613c4b57613c4b614192565b878101919091528201516080613c60826141be565b87810191909152919091015160a086015260c0909401939190910190600101613c0b565b50505050565b8060005b6008811015613c84578151845260209384019390910190600101613c8e565b805182526020810151613cc36020840182613d95565b506040810151613cd7610de0840182613d95565b506060810151611ba08301526080810151613cf1816141be565b611bc083015260a0810151613d05816141be565b80611be0840152505050565b80518252602081015160208301526040810151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e0840152506060810151613d71610100840182613c8a565b50608081015161020083015260a0810151613d90610220840182613c07565b505050565b80516001600160a01b031682526020808201518184015260408083015190613dbf90850182613d11565b506060820151610620840160005b603c811015613dea57825182529183019190830190600101613dcd565b5050505060800151610da09190910152565b93845260208401929092526bffffffffffffffffffffffff19606091821b8116604085015291901b16605482015260680190565b9283526020830191909152604082015260600190565b901515815260200190565b91151582526001600160a01b0316602082015260400190565b60208082526025908201527f506570656d6f6e426174746c653a2043616e6e6f7420626174746c6520796f756040820152643939b2b63360d91b606082015260800190565b611c00810161170c8284613cad565b611c208101613ecd8285613cad565b6001600160a01b0392909216611c009190910152919050565b611c208101613ef58285613cad565b82611c008301529392505050565b610bc08101613f128285613d11565b6135446105e0830184613d11565b90815260200190565b868152611c008101613f3e6020830188613d95565b613f4c610de0830187613d95565b84611ba0830152613f5c846141be565b83611bc0830152613f6c836141be565b82611be0830152979650505050505050565b918252602082015260400190565b6040518181016001600160401b0381118282101715613fad57613fad6141a8565b604052919050565b60006001600160401b03821115613fce57613fce6141a8565b5060209081020190565b60006001600160401b03821115613ff157613ff16141a8565b5060200290565b600080821280156001600160ff1b038490038513161561401a5761401a61417c565b600160ff1b83900384128116156140335761403361417c565b50500190565b6000821982111561404c5761404c61417c565b500190565b60006001600160ff1b03818413828413808216868404861116156140775761407761417c565b600160ff1b848712828116878305891216156140955761409561417c565b8587129250878205871284841616156140b0576140b061417c565b878505871281841616156140c6576140c661417c565b505050929093029392505050565b60008083128015600160ff1b8501841216156140f2576140f261417c565b6001600160ff1b038401831381161561410d5761410d61417c565b50500390565b6000828210156141255761412561417c565b500390565b6000816141395761413961417c565b506000190190565b60006000198214156141555761415561417c565b5060010190565b60008261417757634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6002811061071757610717614192565b6002811061071757600080fd5b6006811061071757600080fdfea2646970667358221220730a5201ee463e73acd758b889f592a0aa4927f6de0ee98e9228e35fd719687164736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBattle(address,uint256,address,uint256)": {
        "details": "Create battle",
        "params": {
          "p1Addr": "address player1",
          "p1DeckId": "uint256",
          "p2Addr": "address player2",
          "p2DeckId": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8826,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "admins",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)9314_storage"
      },
      {
        "astId": 3575,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "battleIdRNGSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3664,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "battles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Battle)3607_storage)"
      },
      {
        "astId": 3666,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_nextBattleId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3669,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_cardContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PepemonCardOracle)7824"
      },
      {
        "astId": 3672,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_deckContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PepemonCardDeck)7229"
      },
      {
        "astId": 3675,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_randNrGenContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ChainLinkRngOracle)9110"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TableSupportCardStats)3659_storage)5_storage": {
        "base": "t_struct(TableSupportCardStats)3659_storage",
        "encoding": "inplace",
        "label": "struct PepemonBattle.TableSupportCardStats[5]",
        "numberOfBytes": "800"
      },
      "t_array(t_uint256)60_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[60]",
        "numberOfBytes": "1920"
      },
      "t_array(t_uint256)8_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[8]",
        "numberOfBytes": "256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ChainLinkRngOracle)9110": {
        "encoding": "inplace",
        "label": "contract ChainLinkRngOracle",
        "numberOfBytes": "20"
      },
      "t_contract(PepemonCardDeck)7229": {
        "encoding": "inplace",
        "label": "contract PepemonCardDeck",
        "numberOfBytes": "20"
      },
      "t_contract(PepemonCardOracle)7824": {
        "encoding": "inplace",
        "label": "contract PepemonCardOracle",
        "numberOfBytes": "20"
      },
      "t_enum(Attacker)3587": {
        "encoding": "inplace",
        "label": "enum PepemonBattle.Attacker",
        "numberOfBytes": "1"
      },
      "t_enum(EffectFor)7254": {
        "encoding": "inplace",
        "label": "enum PepemonCardOracle.EffectFor",
        "numberOfBytes": "1"
      },
      "t_enum(EffectTo)7251": {
        "encoding": "inplace",
        "label": "enum PepemonCardOracle.EffectTo",
        "numberOfBytes": "1"
      },
      "t_enum(TurnHalves)3590": {
        "encoding": "inplace",
        "label": "enum PepemonBattle.TurnHalves",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Battle)3607_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonBattle.Battle)",
        "numberOfBytes": "32",
        "value": "t_struct(Battle)3607_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Battle)3607_storage": {
        "encoding": "inplace",
        "label": "struct PepemonBattle.Battle",
        "members": [
          {
            "astId": 3592,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "battleId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3595,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Player)3621_storage"
          },
          {
            "astId": 3598,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "player2",
            "offset": 0,
            "slot": "106",
            "type": "t_struct(Player)3621_storage"
          },
          {
            "astId": 3600,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "currentTurn",
            "offset": 0,
            "slot": "211",
            "type": "t_uint256"
          },
          {
            "astId": 3603,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "attacker",
            "offset": 0,
            "slot": "212",
            "type": "t_enum(Attacker)3587"
          },
          {
            "astId": 3606,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "turnHalves",
            "offset": 1,
            "slot": "212",
            "type": "t_enum(TurnHalves)3590"
          }
        ],
        "numberOfBytes": "6816"
      },
      "t_struct(CurrentBattleCardStats)3653_storage": {
        "encoding": "inplace",
        "label": "struct PepemonBattle.CurrentBattleCardStats",
        "members": [
          {
            "astId": 3642,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "spd",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3644,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "inte",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3646,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "def",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 3648,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "atk",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 3650,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "sAtk",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 3652,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "sDef",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(EffectMany)7321_storage": {
        "encoding": "inplace",
        "label": "struct PepemonCardOracle.EffectMany",
        "members": [
          {
            "astId": 7310,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "power",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 7312,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "numTurns",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7315,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "effectTo",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(EffectTo)7251"
          },
          {
            "astId": 7318,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "effectFor",
            "offset": 1,
            "slot": "2",
            "type": "t_enum(EffectFor)7254"
          },
          {
            "astId": 7320,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "reqCode",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Hand)3640_storage": {
        "encoding": "inplace",
        "label": "struct PepemonBattle.Hand",
        "members": [
          {
            "astId": 3623,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3625,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "battleCardId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3628,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "currentBCstats",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(CurrentBattleCardStats)3653_storage"
          },
          {
            "astId": 3632,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "supportCardInHandIds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)8_storage"
          },
          {
            "astId": 3634,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "tableSupportCardStats",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 3639,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "tableSupportCards",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(TableSupportCardStats)3659_storage)5_storage"
          }
        ],
        "numberOfBytes": "1344"
      },
      "t_struct(Player)3621_storage": {
        "encoding": "inplace",
        "label": "struct PepemonBattle.Player",
        "members": [
          {
            "astId": 3609,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "playerAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3611,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "deckId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3614,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "hand",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Hand)3640_storage"
          },
          {
            "astId": 3618,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "totalSupportCardIds",
            "offset": 0,
            "slot": "44",
            "type": "t_array(t_uint256)60_storage"
          },
          {
            "astId": 3620,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "playedCardCount",
            "offset": 0,
            "slot": "104",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "3360"
      },
      "t_struct(Role)9314_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 9313,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TableSupportCardStats)3659_storage": {
        "encoding": "inplace",
        "label": "struct PepemonBattle.TableSupportCardStats",
        "members": [
          {
            "astId": 3655,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "supportCardId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3658,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "effectMany",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(EffectMany)7321_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}