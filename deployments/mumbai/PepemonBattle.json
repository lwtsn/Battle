{
  "address": "0x4b8a5c488F8D1094555c8875fF5c47D6eFb62Ab2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cardOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deckOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "randOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1Addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "BattleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battleIdRNGSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "atkHand",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "defHand",
          "type": "tuple"
        }
      ],
      "name": "calSupportCardsInHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "power",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numTurns",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reqCode",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct PepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "checkIfBattleEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "p1Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "p1DeckId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "p2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "p2DeckId",
          "type": "uint256"
        }
      ],
      "name": "createBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "fight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "goForBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int256",
                              "name": "power",
                              "type": "int256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "numTurns",
                              "type": "uint256"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum PepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint256",
                              "name": "reqCode",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct PepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7925780ea2a29c20088d9ac706496880c51289bbbd3d99c5e81394840ef8a656",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0x4b8a5c488F8D1094555c8875fF5c47D6eFb62Ab2",
    "transactionIndex": 3,
    "gasUsed": "3536597",
    "logsBloom": "0x
    "blockHash": "0xa30d08cb20332f6082ac86e22f21e623ca710fde25b9a41923f1cce871003337",
    "transactionHash": "0x7925780ea2a29c20088d9ac706496880c51289bbbd3d99c5e81394840ef8a656",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 30338429,
        "transactionHash": "0x7925780ea2a29c20088d9ac706496880c51289bbbd3d99c5e81394840ef8a656",
        "address": "0x4b8a5c488F8D1094555c8875fF5c47D6eFb62Ab2",
        "topics": [
          "0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xa30d08cb20332f6082ac86e22f21e623ca710fde25b9a41923f1cce871003337"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 30338429,
        "transactionHash": "0x7925780ea2a29c20088d9ac706496880c51289bbbd3d99c5e81394840ef8a656",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012dbfdacd42790000000000000000000000000000000000000000000000000043903a545b3b8e900000000000000000000000000000000000000000000017b9e89ab5e04897503000000000000000000000000000000000000000000000000042627a798df915900000000000000000000000000000000000000000000017b9e9c875bb15d9c93",
        "logIndex": 13,
        "blockHash": "0xa30d08cb20332f6082ac86e22f21e623ca710fde25b9a41923f1cce871003337"
      }
    ],
    "blockNumber": 30338429,
    "cumulativeGasUsed": "4263926",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x15f4df42e54aa33c4ec48e9f0bb7f00535c29bf5",
    "0x84057fffc602f74c19848d86fc8e14d95cd9de35",
    "0x3d7e3ca6367d2328e17eb34891f93b78d1fb587a"
  ],
  "numDeployments": 4,
  "solcInputHash": "7fe3445701323b61a0464c2b0bd28771",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deckOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1Addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"BattleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleIdRNGSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"atkHand\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"defHand\",\"type\":\"tuple\"}],\"name\":\"calSupportCardsInHand\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"checkIfBattleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"p1DeckId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"p2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"p2DeckId\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"fight\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"goForBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"numTurns\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reqCode\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBattle(address,uint256,address,uint256)\":{\"details\":\"Create battle\",\"params\":{\"p1Addr\":\"address player1\",\"p1DeckId\":\"uint256\",\"p2Addr\":\"address player2\",\"p2DeckId\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonBattle.sol\":\"PepemonBattle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/PepemonBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./lib/AdminRole.sol\\\";\\nimport \\\"./PepemonCardDeck.sol\\\";\\nimport \\\"./PepemonCardOracle.sol\\\";\\nimport \\\"./lib/ChainLinkRngOracle.sol\\\";\\n\\ncontract PepemonBattle is AdminRole {\\n\\n    event BattleCreated(address indexed player1Addr, address indexed player2Addr, uint256 battleId);\\n\\n    mapping (uint => uint) public battleIdRNGSeed;\\n\\n    uint constant _max_inte = 8;\\n    uint constant _max_cards_on_table = 5;\\n    uint constant _refreshTurn = 5;\\n\\n    //Attacker can either be PLAYER_ONE or PLAYER_TWO\\n    enum Attacker {\\n        PLAYER_ONE,\\n        PLAYER_TWO\\n    }\\n\\n    //Game can either be in FIRST_HALF or SECOND_HALF\\n    enum TurnHalves {\\n        FIRST_HALF,\\n        SECOND_HALF\\n    }\\n\\n    //Battle contains:\\n    //battleId = ID of this battle\\n    //player1, player2 = players\\n    //currentTurn\\n    //attacker\\n    //turnHalves => first half or second half?\\n    struct Battle {\\n        uint256 battleId;\\n        Player player1;\\n        Player player2;\\n        uint256 currentTurn;\\n        Attacker attacker;\\n        TurnHalves turnHalves;\\n    }\\n\\n    //playerAddr\\n    //deckId = Id of deck\\n    //hand = keeps track of current player's stats (such as health)\\n    //totalSupportCardIds = all IDs of support cards\\n    //playedCardCount = number of cards played already\\n    struct Player {\\n        address playerAddr;\\n        uint256 deckId;\\n        Hand hand;\\n        uint256[60] totalSupportCardIds;\\n        uint256 playedCardCount;\\n    }\\n\\n    //health - health of player's battle card\\n    // battleCardId = card id of player\\n    // currentBCstats = all stats of the player's battle cards currently\\n    // supportCardInHandIds = IDs of the support cards in your current hand\\n    //                  the amount of support cards a player can play is determined by intelligence\\n    // tableSupportCardStats = Number of support cards that are currently played on the table\\n    // currentSuportCards = cards on the table, based on which turn ago they were played\\n    //                      Notice that the number of turns is limited by _refreshTurn\\n    struct Hand {\\n        int256 health;\\n        uint256 battleCardId;\\n        CurrentBattleCardStats currentBCstats;\\n        uint256[_max_inte] supportCardInHandIds;\\n        uint256 tableSupportCardStats;\\n        TableSupportCardStats[_max_cards_on_table] tableSupportCards;\\n    }\\n    //spd, inte, def, atk, sAtk, sDef - Current stats of battle card (with powerups included)\\n    //Each param can go into the negatives\\n    struct CurrentBattleCardStats {\\n        int256 spd;\\n        uint256 inte;\\n        int256 def;\\n        int256 atk;\\n        int256 sAtk;\\n        int256 sDef;\\n    }\\n\\n    //links supportCardID with effectMany\\n    struct TableSupportCardStats {\\n        uint256 supportCardId;\\n        PepemonCardOracle.EffectMany effectMany;\\n    }\\n\\n    uint256 private _nextBattleId;\\n\\n\\n    PepemonCardOracle private _cardContract;\\n    PepemonCardDeck private _deckContract;\\n    ChainLinkRngOracle private _randNrGenContract;\\n\\n    constructor(\\n        address cardOracleAddress,\\n        address deckOracleAddress,\\n        address randOracleAddress\\n    ) {\\n        _cardContract = PepemonCardOracle(cardOracleAddress);\\n        _deckContract = PepemonCardDeck(deckOracleAddress);\\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\\n        _nextBattleId = 1;\\n    }\\n\\n    /**\\n     * @dev Create battle\\n     * @param p1Addr address player1\\n     * @param p1DeckId uint256\\n     * @param p2Addr address player2\\n     * @param p2DeckId uint256\\n     */\\n    function createBattle(\\n        address p1Addr,\\n        uint256 p1DeckId,\\n        address p2Addr,\\n        uint256 p2DeckId\\n    ) public onlyAdmin returns (Battle memory, uint256 battleId)  {\\n        require(p1Addr != p2Addr, \\\"PepemonBattle: Cannot battle yourself\\\");\\n\\n        (uint256 p1BattleCardId, ) = _deckContract.decks(p1DeckId);\\n        (uint256 p2BattleCardId, ) = _deckContract.decks(p2DeckId);\\n\\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(p1BattleCardId);\\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(p2BattleCardId);\\n\\n        Battle memory newBattle;\\n        // Initiate battle ID\\n        newBattle.battleId = _nextBattleId;\\n        // Initiate player1\\n        newBattle.player1.hand.health = int256(p1BattleCard.hp);\\n        newBattle.player1.hand.battleCardId = p1BattleCardId;\\n        newBattle.player1.playerAddr = p1Addr;\\n        newBattle.player1.deckId = p1DeckId;\\n        // Initiate player2\\n        newBattle.player2.hand.health = int256(p2BattleCard.hp);\\n        newBattle.player2.hand.battleCardId = p2BattleCardId;\\n        newBattle.player2.playerAddr = p2Addr;\\n        newBattle.player2.deckId = p2DeckId;\\n        // Set the RNG seed\\n        battleIdRNGSeed[_nextBattleId] = _randSeed(newBattle);\\n\\n        //Emit event\\n        emit BattleCreated(p1Addr, p2Addr, _nextBattleId);\\n        return (newBattle, _nextBattleId++);\\n    }\\n\\n    function goForBattle(Battle memory battle) public view returns (Battle memory, address winner) {\\n\\n        //Initialize battle by starting the first turn\\n        battle = goForNewTurn(battle);\\n        address winnerAddr;\\n        // Battle goes!\\n        while (true) {\\n            // Resolve attacker in the current turn\\n            battle = resolveAttacker(battle);\\n            // Fight\\n            battle = fight(battle);\\n\\n            // Check if battle ended\\n            (bool isEnded, address win) = checkIfBattleEnded(battle);\\n            if (isEnded) {\\n                winnerAddr = win;\\n                break;\\n            }\\n\\n            // Resolve turn halves\\n            battle = updateTurnInfo(battle);\\n        }\\n        return (battle, winnerAddr);\\n    }\\n\\n    //If currently in first half -> go to second half\\n    //If currently in second half -> make a new turn\\n    function updateTurnInfo(Battle memory battle) internal view returns (Battle memory) {\\n        // If the current half is first, go over second half\\n        // or go over next turn\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\n            battle.turnHalves = TurnHalves.SECOND_HALF;\\n        } else {\\n            battle = goForNewTurn(battle);\\n        }\\n\\n        return battle;\\n    }\\n\\n    //Things this function does:\\n    //Reset both players hand infos back to base stats (stats with no support card powerups)\\n    //Check if support cards need to be scrambled and redealt\\n    //Redeal support cards if necessary\\n    //Calculate support card's power\\n    //Finally, draw Pepemon's intelligence number of cards.\\n    function goForNewTurn(Battle memory battle) internal view returns (Battle memory) {\\n        Player memory player1 = battle.player1;\\n        Player memory player2 = battle.player2;\\n\\n        // Get base battle card stats (stats without any powerups)\\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(\\n            player1.hand.battleCardId\\n        );\\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(\\n            player2.hand.battleCardId\\n        );\\n\\n        //Reset both players' hand infos to base stats\\n        player1.hand.currentBCstats = getCardStats(p1BattleCard);\\n        player2.hand.currentBCstats = getCardStats(p2BattleCard);\\n\\n        uint256 p1SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player1.deckId);\\n        uint256 p2SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player2.deckId);\\n\\n        //Refresh cards every 5 turns\\n        bool isRefreshTurn = (battle.currentTurn % _refreshTurn == 0);\\n\\n        if (isRefreshTurn) {\\n            //Need to refresh decks\\n\\n            // Shuffle player1 support cards\\n            //Create a pseudorandom seed and shuffle the cards \\n            uint[] memory scrambled = _deckContract.shuffleDeck(player1.deckId, // tbd: use in-place shuffling\\n                _randMod(\\n                    69, battle\\n                )\\n            );\\n            //Copy back scrambled cards to original list\\n            for (uint i = 0 ; i < p1SupportCardIdsLength; i++){\\n                player1.totalSupportCardIds[i]=scrambled[i];\\n            }\\n            \\n            //Reset played card count\\n            player1.playedCardCount = 0;\\n\\n            //Shuffling player 2 support cards\\n            //Create a pseudorandom seed and shuffle the cards\\n            uint[] memory scrambled2 = _deckContract.shuffleDeck(player2.deckId, \\n                _randMod(\\n                    420, battle\\n                )\\n            );\\n\\n            //Copy the support cards back into the list\\n            for (uint256 i = 0; i < p2SupportCardIdsLength; i++) {\\n                player2.totalSupportCardIds[i]=scrambled2[i];\\n            }\\n            \\n            //Reset player2 played card counts\\n            player2.playedCardCount = 0;\\n        }\\n        else \\n        {\\n            //Don't need to refresh cards now\\n\\n            // Get temp support info of previous turn's hands and calculate their effect for the new turn\\n            player1.hand = calSupportCardsOnTable(player1.hand, player2.hand);\\n            player2.hand = calSupportCardsOnTable(player2.hand, player1.hand);\\n        }\\n\\n        // Draw player1 support cards for the new turn\\n        for (uint256 i = 0; i < player1.hand.currentBCstats.inte; i++) {\\n            player1.hand.supportCardInHandIds[i] = player1.totalSupportCardIds[(i + player1.playedCardCount) % p1SupportCardIdsLength];\\n        }\\n        player1.playedCardCount += player1.hand.currentBCstats.inte;\\n\\n        // Draw player2 support cards for the new turn\\n        for (uint256 i = 0; i < player2.hand.currentBCstats.inte; i++) {\\n            player2.hand.supportCardInHandIds[i] = player2.totalSupportCardIds[(i + player2.playedCardCount) % p2SupportCardIdsLength];\\n        }\\n        player2.playedCardCount += player2.hand.currentBCstats.inte;\\n\\n        //Update current battle info\\n        battle.player1 = player1;\\n        battle.player2 = player2;\\n\\n        // Increment current turn number of battle\\n        battle.currentTurn++;\\n\\n        // Go for first half in turn\\n        battle.turnHalves = TurnHalves.FIRST_HALF;\\n\\n        return battle;\\n    }\\n\\n    //This method calculates the battle card's stats after taking into consideration all the support cards currently being played\\n    function calSupportCardsOnTable(Hand memory hand, Hand memory oppHand) internal pure returns (Hand memory) {\\n        for (uint256 i = 0; i < hand.tableSupportCardStats; i++) {\\n            //Loop through every support card currently played\\n\\n            //Get the support card being considered now\\n            TableSupportCardStats memory tableSupportCardStat = hand.tableSupportCards[i];\\n            \\n            //Get the effect of that support card\\n            PepemonCardOracle.EffectMany memory effect = tableSupportCardStat.effectMany;\\n            \\n            //If there is at least 1 turn left\\n            if (effect.numTurns >= 1) {\\n\\n                //If the effect is for me\\n                if (effect.effectFor == PepemonCardOracle.EffectFor.ME) {\\n                    // Change my card's stats using that support card\\n                    // Currently effectTo of EffectMany can be ATTACK, DEFENSE, SPEED and INTELLIGENCE\\n                    //Get the statistic changed and update it \\n                    //Intelligence can't go into the negatives\\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\\n                        hand.currentBCstats.atk += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\\n                        hand.currentBCstats.def += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\\n                        hand.currentBCstats.spd += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\\n                        int temp;\\n                        temp = int256(hand.currentBCstats.inte) + effect.power;\\n                        hand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\n                    }\\n                } else {\\n                    //The card affects the opp's pepemon\\n                    //Update card stats of the opp's pepemon\\n                    //Make sure INT stat can't go below zero\\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\\n                        oppHand.currentBCstats.atk += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\\n                        oppHand.currentBCstats.def += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\\n                        oppHand.currentBCstats.spd += effect.power;\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\\n                        int temp;\\n                        temp = int256(oppHand.currentBCstats.inte) + effect.power;\\n                        oppHand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\n                    }\\n                }\\n                // Decrease effect numTurns by 1 since 1 turn has already passed\\n                effect.numTurns--;\\n                // Delete this one from tableSupportCardStat if all turns of the card have been exhausted\\n                if (effect.numTurns == 0) {\\n                    if (i < hand.tableSupportCardStats - 1) {\\n                        hand.tableSupportCards[i] = hand.tableSupportCards[hand.tableSupportCardStats - 1];\\n                    }\\n                    delete hand.tableSupportCards[hand.tableSupportCardStats - 1];\\n                    hand.tableSupportCardStats--;\\n                }\\n            }\\n        }\\n\\n        return hand;\\n    }\\n\\n    //This method gets the current attacker\\n    function resolveAttacker(Battle memory battle) internal view returns (Battle memory) {\\n        CurrentBattleCardStats memory p1CurrentBattleCardStats = battle.player1.hand.currentBCstats;\\n        CurrentBattleCardStats memory p2CurrentBattleCardStats = battle.player2.hand.currentBCstats;\\n\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\n            //Player with highest speed card goes first\\n            if (p1CurrentBattleCardStats.spd > p2CurrentBattleCardStats.spd) {\\n                battle.attacker = Attacker.PLAYER_ONE;\\n            } else if (p1CurrentBattleCardStats.spd < p2CurrentBattleCardStats.spd) {\\n                battle.attacker = Attacker.PLAYER_TWO;\\n            } else {\\n                //Tiebreak: intelligence\\n                if (p1CurrentBattleCardStats.inte > p2CurrentBattleCardStats.inte) {\\n                    battle.attacker = Attacker.PLAYER_ONE;\\n                } else if (p1CurrentBattleCardStats.inte < p2CurrentBattleCardStats.inte) {\\n                    battle.attacker = Attacker.PLAYER_TWO;\\n                } else {\\n                    //Second tiebreak: use RNG\\n                    uint256 rand = _randMod(69420, battle) % 2;\\n                    battle.attacker = (rand == 0 ? Attacker.PLAYER_ONE : Attacker.PLAYER_TWO);\\n                }\\n            }\\n        } else {\\n            //For second half, switch players\\n            battle.attacker = (battle.attacker == Attacker.PLAYER_ONE ? Attacker.PLAYER_TWO : Attacker.PLAYER_ONE);\\n        }\\n\\n        return battle;\\n    }\\n\\n    //Create a random seed, using the chainlink number and the addresses of the combatants as entropy\\n    function _randSeed(Battle memory battle) private view returns (uint256) {\\n        //Get the chainlink random number\\n        uint chainlinkNumber = _randNrGenContract.getRandomNumber();\\n        //Create a new pseudorandom number using the seed and battle info as entropy\\n        //This makes sure the RNG returns a different number every time\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(block.number, chainlinkNumber, battle.player1.playerAddr, battle.player2.playerAddr)));\\n        return randomNumber;\\n    }\\n\\n    function _randMod(uint256 seed, Battle memory battle) private view returns (uint256) {\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(seed, battle.currentTurn, battleIdRNGSeed[battle.battleId])));\\n        return randomNumber;\\n    }\\n\\n    //Check if battle ended by looking at player's health\\n    function checkIfBattleEnded(Battle memory battle) public pure returns (bool, address) {\\n        if (battle.player1.hand.health <= 0) {\\n            return (true, battle.player1.playerAddr);\\n        } else if (battle.player2.hand.health <= 0) {\\n            return (true, battle.player2.playerAddr);\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function fight(Battle memory battle) public view returns (Battle memory) {\\n        Hand memory atkHand;\\n        Hand memory defHand;\\n\\n        //Get attacker and defender for current turn\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\n            atkHand = battle.player1.hand;\\n            defHand = battle.player2.hand;\\n        } else {\\n            atkHand = battle.player2.hand;\\n            defHand = battle.player1.hand;\\n        }\\n\\n        (atkHand, defHand) = calSupportCardsInHand(atkHand, defHand);\\n\\n        // Fight\\n\\n        //Calculate HP loss for defending player\\n        if (atkHand.currentBCstats.atk > defHand.currentBCstats.def) {\\n            //If attacker's attack > defender's defense, find difference. That is the defending player's HP loss\\n            defHand.health -= (atkHand.currentBCstats.atk - defHand.currentBCstats.def);\\n        } else {\\n            //Otherwise, defender loses 1 HP\\n            defHand.health -= 1;\\n        }\\n\\n        //Write updated info back into battle\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\n            battle.player1.hand = atkHand;\\n            battle.player2.hand = defHand;\\n        } else {\\n            battle.player1.hand = defHand;\\n            battle.player2.hand = atkHand;\\n        }\\n\\n        return battle;\\n    }\\n\\n    \\n    //We calculate the effect of every card in the player's hand\\n    function calSupportCardsInHand(Hand memory atkHand, Hand memory defHand) public view returns (Hand memory, Hand memory) {\\n        // If this card is included in player's hand, adds an additional power equal to the total of\\n        // all normal offense/defense cards\\n        bool isPower0CardIncluded = false;\\n        // Total sum of normal support cards\\n        int256 totalNormalPower = 0;\\n        // Cal attacker hand\\n        for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n            //Loop through every card the attacker has in his hand\\n            uint256 id = atkHand.supportCardInHandIds[i];\\n\\n            //Get the support cardStats\\n            PepemonCardOracle.SupportCardStats memory cardStats = _cardContract.getSupportCardById(id);\\n            if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.OFFENSE) {\\n                // Card type is OFFENSE.\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\\n                    \\n                    //Checks if that support card is triggered and by how much it is triggered by\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\n                    if (isTriggered) {\\n                        //use triggeredPower if triggered\\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\n                    }\\n                    else{\\n                        //use basePower if not\\n                        atkHand.currentBCstats.atk += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n            } else if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\n                // Card type is STRONG OFFENSE.\\n\\n                //Make sure unstackable cards can't be stacked\\n                if (cardStats.unstackable) {\\n                    bool isNew = true;\\n                    // Check if card is new to previous cards\\n                    for (uint256 j = 0; j < i; j++) {\\n                        if (id == atkHand.supportCardInHandIds[j]) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    if (!isNew) {\\n                        //If it isn't - skip card\\n                        continue;\\n                    }\\n                    // Check if card is new to temp support info cards\\n                    for (uint256 j = 0; j < atkHand.tableSupportCardStats; j++) {\\n                        if (id == atkHand.tableSupportCards[j].supportCardId) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    if (!isNew) {\\n                        //If it isn't - skip card\\n                        continue;\\n                    }\\n                }\\n\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\n                    if (isTriggered) {\\n                        //If triggered: use triggered power\\n                        if (multiplier > 1) {\\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\n                        } else {\\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_ATTACK) {\\n                                // If it's a use Special Attack instead of Attack card\\n                                atkHand.currentBCstats.atk = atkHand.currentBCstats.sAtk;\\n                                continue;\\n                            } else if (effectOne.triggeredPower == 0) {\\n                                // We have a card that says ATK is increased by amount\\n                                // Equal to the total of all offense cards in the current turn\\n                                isPower0CardIncluded = true;\\n                                continue;\\n                            }\\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower;\\n                        }\\n                    }\\n                    else{\\n                        //If not triggered: use base power instead\\n                        atkHand.currentBCstats.atk += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n                // If card lasts for >1 turns\\n                if (cardStats.effectMany.power != 0) {\\n                    // Add card  to table if <5 on table currently\\n                    if (atkHand.tableSupportCardStats < 5) {\\n                        atkHand.tableSupportCards[atkHand.tableSupportCardStats++] = TableSupportCardStats({\\n                            supportCardId: id,\\n                            effectMany: cardStats.effectMany\\n                        });\\n                    }\\n                }\\n            } else {\\n                // Other card type is ignored.\\n                continue;\\n            }\\n        }\\n        if (isPower0CardIncluded) {\\n            //If we have a card that says ATK is increased by amount equal to total of all offense cards\\n            atkHand.currentBCstats.atk += totalNormalPower;\\n        }\\n        // Cal defense hand\\n        isPower0CardIncluded = false;\\n        totalNormalPower = 0;\\n\\n        for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n            uint256 id = defHand.supportCardInHandIds[i];\\n            PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(id);\\n            if (card.supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\\n                // Card type is DEFENSE\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\n                    if (isTriggered) {\\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(multiplier);\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\n                    }\\n                    else{\\n                        //If not triggered, use base power instead\\n                        defHand.currentBCstats.def += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n            } else if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_DEFENSE) {\\n                // Card type is STRONG DEFENSE\\n                if (card.unstackable) {\\n                    bool isNew = true;\\n                    // Check if card is new to previous cards\\n                    for (uint256 j = 0; j < i; j++) {\\n                        if (id == defHand.supportCardInHandIds[j]) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    // Check if card is new to temp support info cards\\n                    for (uint256 j = 0; j < defHand.tableSupportCardStats; j++) {\\n                        if (id == defHand.tableSupportCards[j].supportCardId) {\\n                            isNew = false;\\n                            break;\\n                        }\\n                    }\\n                    if (!isNew) {\\n                        continue;\\n                    }\\n                }\\n                // Calc effects of EffectOne array\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    (bool isTriggered, uint256 num) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\n                    if (isTriggered) {\\n                        if (num > 0) {\\n                            defHand.currentBCstats.def += effectOne.triggeredPower * int256(num);\\n                        } else {\\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_DEFENSE) {\\n                                defHand.currentBCstats.def = defHand.currentBCstats.sDef;\\n                                continue;\\n                            } else if (effectOne.triggeredPower == 0) {\\n                                // Equal to the total of all defense cards in the current turn\\n                                isPower0CardIncluded = true;\\n                                continue;\\n                            }\\n                            defHand.currentBCstats.def += effectOne.triggeredPower;\\n                        }\\n                    }\\n                    else{\\n                        //If not triggered, use base stats instead\\n                        defHand.currentBCstats.def += effectOne.basePower;\\n                        totalNormalPower += effectOne.basePower;\\n                    }\\n                }\\n                // If card effect lasts >1 turn\\n                if (card.effectMany.power != 0) {\\n                    // Add card to table if there are <5 cards on table right now\\n                    if (defHand.tableSupportCardStats < 5) {\\n                        defHand.tableSupportCards[defHand.tableSupportCardStats++] = TableSupportCardStats({\\n                            supportCardId: id,\\n                            effectMany: card.effectMany\\n                        });\\n                    }\\n                }\\n            } else {\\n                // Other card type is ignored.\\n                continue;\\n            }\\n        }\\n        if (isPower0CardIncluded) {\\n            //If a \\\"add total of defense\\\" card is included\\n            defHand.currentBCstats.def += totalNormalPower;\\n        }\\n\\n        return (atkHand, defHand);\\n    }\\n\\n    //Strip important game information (like speed, intelligence, etc.) from battle card\\n    function getCardStats(PepemonCardOracle.BattleCardStats memory x) internal pure returns (CurrentBattleCardStats memory){\\n        CurrentBattleCardStats memory ret;\\n\\n        ret.spd = int(x.spd);\\n        ret.inte = x.inte;\\n        ret.def = int(x.def);\\n        ret.atk = int(x.atk);\\n        ret.sAtk = int(x.sAtk);\\n        ret.sDef = int(x.sDef);\\n\\n        return ret;\\n    }\\n\\n//Checks if the requirements are satisfied for a certain code\\n//returns bool - is satisfied?\\n// uint - the multiplier for the card's attack power\\n// for most cases multiplier is 1\\nfunction checkReqCode(\\n        Hand memory atkHand,\\n        Hand memory defHand,\\n        uint256 reqCode,\\n        bool isAttacker\\n    ) internal view returns (bool, uint256) {\\n        bool isTriggered = false;\\n        uint256 multiplier = 0;\\n        if (reqCode == 0) {\\n            // No requirement\\n            isTriggered = true;\\n            multiplier = 1;\\n        } else if (reqCode == 1) {\\n            // Intelligence of offense pepemon <= 5.\\n            isTriggered = (atkHand.currentBCstats.inte <= 5 );\\n            multiplier = 1;\\n\\n        } else if (reqCode == 2) {\\n            // Number of defense cards of defense pepemon is 0.\\n            isTriggered = true;\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardType supportCardType = _cardContract.getSupportCardTypeById(\\n                    defHand.supportCardInHandIds[i]\\n                );\\n                if (supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\\n                    isTriggered = false;\\n                    break;\\n                }\\n            }\\n            multiplier = 1;\\n        } else if (reqCode == 3) {\\n            // Each +2 offense cards of offense pepemon.\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 2) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 4) {\\n            // Each +3 offense cards of offense pepemon.\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 3) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 5) {\\n            // Each offense card of offense pepemon.\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\n                    continue;\\n                }\\n                multiplier++;\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 6) {\\n            // Each +3 defense card of defense pepemon.\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    defHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 3) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 7) {\\n            // Each +4 defense card of defense pepemon.\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    defHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\n                    if (effectOne.basePower == 4) {\\n                        multiplier++;\\n                    }\\n                }\\n            }\\n            isTriggered = (multiplier > 0 );\\n        } else if (reqCode == 8) {\\n            // Intelligence of defense pepemon <= 5.\\n            isTriggered = (defHand.currentBCstats.inte <= 5 );\\n            multiplier = 1;\\n        } else if (reqCode == 9) {\\n            // Intelligence of defense pepemon >= 7.\\n            isTriggered = (defHand.currentBCstats.inte >= 7 );\\n            multiplier = 1;\\n        } else if (reqCode == 10) {\\n            // Offense pepemon is using strong attack\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\n                    atkHand.supportCardInHandIds[i]\\n                );\\n                if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\n                    isTriggered = true;\\n                    break;\\n                }\\n            }\\n            multiplier = 1;\\n        } else if (reqCode == 11) {\\n            // The current HP is less than 50% of max HP.\\n            if (isAttacker) {\\n                isTriggered = (\\n                    atkHand.health * 2 <= int256(_cardContract.getBattleCardById(atkHand.battleCardId).hp)\\n                );\\n            } else {\\n                isTriggered = (\\n                    defHand.health * 2 <= int256(_cardContract.getBattleCardById(defHand.battleCardId).hp)\\n\\n                );\\n            }\\n            multiplier = 1;\\n        }\\n        return (isTriggered, multiplier);\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x2b16fdc64d8ba43abf83e27a6bb5a9d12cacaae8bb81e0952bd942d52de88231\",\"license\":\"MIT\"},\"contracts/PepemonCardDeck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n//pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./PepemonFactory.sol\\\";\\r\\nimport \\\"./PepemonCardOracle.sol\\\";\\r\\nimport \\\"./lib/Arrays.sol\\\";\\r\\n\\r\\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Deck {\\r\\n        uint256 battleCardId;\\r\\n        uint256 supportCardCount;\\r\\n        mapping(uint256 => SupportCardType) supportCardTypes;\\r\\n        uint256[] supportCardTypeList;\\r\\n    }\\r\\n\\r\\n    struct SupportCardType {\\r\\n        uint256 supportCardId;\\r\\n        uint256 count;\\r\\n        uint256 pointer;\\r\\n        bool isEntity;\\r\\n    }\\r\\n\\r\\n    struct SupportCardRequest {\\r\\n        uint256 supportCardId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    uint256 public MAX_SUPPORT_CARDS;\\r\\n    uint256 public MIN_SUPPORT_CARDS;\\r\\n\\r\\n    uint256 nextDeckId;\\r\\n    address public battleCardAddress;\\r\\n    address public supportCardAddress;\\r\\n\\r\\n    mapping(uint256 => Deck) public decks;\\r\\n    mapping(address => uint256[]) public playerToDecks;\\r\\n\\r\\n    constructor() ERC721(\\\"Pepedeck\\\", \\\"Pepedeck\\\") {\\r\\n        nextDeckId = 1;\\r\\n        MAX_SUPPORT_CARDS = 60;\\r\\n        MIN_SUPPORT_CARDS = 40;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override supportInterface .\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC1155Receiver)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier sendersDeck(uint256 _deckId) {\\r\\n        require(msg.sender == ownerOf(_deckId), \\\"PepemonCardDeck: Not your deck\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // PUBLIC METHODS\\r\\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\\r\\n        battleCardAddress = _battleCardAddress;\\r\\n    }\\r\\n\\r\\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\\r\\n        supportCardAddress = _supportCardAddress;\\r\\n    }\\r\\n\\r\\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\\r\\n        MAX_SUPPORT_CARDS = _maxSupportCards;\\r\\n    }\\r\\n\\r\\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\\r\\n        MIN_SUPPORT_CARDS = _minSupportCards;\\r\\n    }\\r\\n\\r\\n    function createDeck() public {\\r\\n        _safeMint(msg.sender, nextDeckId);\\r\\n        playerToDecks[msg.sender].push(nextDeckId);\\r\\n        nextDeckId = nextDeckId.add(1);\\r\\n    }\\r\\n\\r\\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\\r\\n        require(\\r\\n            PepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\\r\\n            \\\"PepemonCardDeck: Don't own battle card\\\"\\r\\n        );\\r\\n\\r\\n        require(battleCardId != decks[deckId].battleCardId, \\\"PepemonCardDeck: Card already in deck\\\");\\r\\n\\r\\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\\r\\n        decks[deckId].battleCardId = battleCardId;\\r\\n\\r\\n        PepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \\\"\\\");\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\\r\\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\\r\\n\\r\\n        decks[_deckId].battleCardId = 0;\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\\r\\n        for (uint256 i = 0; i < supportCards.length; i++) {\\r\\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\\r\\n        for (uint256 i = 0; i < _supportCards.length; i++) {\\r\\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // INTERNALS\\r\\n    function addSupportCardToDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \\\"PepemonCardDeck: Deck overflow\\\");\\r\\n        require(\\r\\n            PepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\\r\\n            \\\"PepemonCardDeck: You don't have enough of this card\\\"\\r\\n        );\\r\\n\\r\\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\\r\\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\\r\\n                supportCardId: _supportCardId,\\r\\n                count: _amount,\\r\\n                pointer: decks[_deckId].supportCardTypeList.length,\\r\\n                isEntity: true\\r\\n            });\\r\\n\\r\\n            // Prepend the ID to the list\\r\\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\\r\\n        } else {\\r\\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n            supportCard.count = supportCard.count.add(_amount);\\r\\n        }\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\\r\\n\\r\\n        PepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function removeSupportCardFromDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        supportCardList.count = supportCardList.count.sub(_amount);\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\\r\\n\\r\\n        if (supportCardList.count == 0) {\\r\\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\\r\\n\\r\\n            // update the pointer of the item to be swapped\\r\\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\\r\\n\\r\\n            // swap the last item of the list with the one to be deleted\\r\\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypeList.pop();\\r\\n\\r\\n            delete decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        }\\r\\n\\r\\n        PepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\\r\\n        if (_battleCardId != 0) {\\r\\n            PepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // VIEWS\\r\\n    function getDeckCount(address player) public view returns (uint256) {\\r\\n        return playerToDecks[player].length;\\r\\n    }\\r\\n\\r\\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\\r\\n        return decks[_deckId].battleCardId;\\r\\n    }\\r\\n\\r\\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n\\r\\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            supportCardTypes[i] = deck.supportCardTypeList[i];\\r\\n        }\\r\\n\\r\\n        return supportCardTypes;\\r\\n    }\\r\\n\\r\\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\\r\\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\\r\\n    }\\r\\n\\r\\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\\r\\n        return decks[deckId].supportCardCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns array of support cards for a deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\\r\\n        uint256 idx = 0;\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            uint256 supportCardId = deck.supportCardTypeList[i];\\r\\n            for (uint256 j = 0; j < deck.supportCardTypes[supportCardId].count; j++) {\\r\\n                supportCards[idx++] = supportCardId;\\r\\n            }\\r\\n        }\\r\\n        return supportCards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Shuffles deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\\r\\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\\r\\n        return Arrays.shuffle(totalSupportCards, _seed);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdb7a4694edf904ec8d629bfeb20d0e07992f7f59f8da5868ba50ae5583ef94f1\",\"license\":\"MIT\"},\"contracts/PepemonCardOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/AdminRole.sol\\\";\\n\\n/**\\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\\n**/\\ncontract PepemonCardOracle is AdminRole {\\n    enum BattleCardType {\\n        PLANT,\\n        FIRE\\n    }\\n\\n    enum SupportCardType {\\n        OFFENSE,\\n        STRONG_OFFENSE,\\n        DEFENSE,\\n        STRONG_DEFENSE\\n    }\\n\\n    enum EffectTo {\\n        ATTACK,\\n        STRONG_ATTACK,\\n        DEFENSE,\\n        STRONG_DEFENSE,\\n        SPEED,\\n        INTELLIGENCE\\n    }\\n\\n    enum EffectFor {\\n        ME,\\n        ENEMY\\n    }\\n\\n    struct BattleCardStats {\\n        uint256 battleCardId;\\n        BattleCardType battleCardType;\\n        string name;\\n        uint256 hp; // hitpoints\\n        uint256 spd; // speed\\n        uint256 inte; // intelligence\\n        uint256 def; // defense\\n        uint256 atk; // attack\\n        uint256 sAtk; // special attack\\n        uint256 sDef; // special defense\\n    }\\n\\n    struct SupportCardStats {\\n        uint256 supportCardId;\\n        SupportCardType supportCardType;\\n        string name;\\n        EffectOne[] effectOnes;\\n        EffectMany effectMany;\\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\\n        bool unstackable;\\n        // This property is for EffectMany now.\\n        // If true, assume the card is already in effect\\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\\n        bool unresettable;\\n    }\\n\\n    struct EffectOne {\\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\\n        \\n        //basePower = power if req not met\\n        int256 basePower;\\n\\n        //triggeredPower = power if req met\\n        int256 triggeredPower;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    struct EffectMany {\\n        int256 power;\\n        uint256 numTurns;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    mapping(uint256 => BattleCardStats) public battleCardStats;\\n    mapping(uint256 => SupportCardStats) public supportCardStats;\\n\\n    event BattleCardCreated(address sender, uint256 cardId);\\n    event BattleCardUpdated(address sender, uint256 cardId);\\n    event SupportCardCreated(address sender, uint256 cardId);\\n    event SupportCardUpdated(address sender, uint256 cardId);\\n\\n    function addBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId == 0, \\\"PepemonCard: BattleCard already exists\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.battleCardId = cardData.battleCardId;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.hp = cardData.hp;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardCreated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function updateBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.hp = cardData.hp;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardUpdated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function getBattleCardById(uint256 _id) public view returns (BattleCardStats memory) {\\n        require(battleCardStats[_id].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n        return battleCardStats[_id];\\n    }\\n\\n    function addSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId == 0, \\\"PepemonCard: SupportCard already exists\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardCreated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function updateSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardUpdated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function getSupportCardById(uint256 _id) public view returns (SupportCardStats memory) {\\n        require(supportCardStats[_id].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n        return supportCardStats[_id];\\n    }\\n\\n    /**\\n     * @dev Get supportCardType of supportCard\\n     * @param _id uint256\\n     */\\n    function getSupportCardTypeById(uint256 _id) public view returns (SupportCardType) {\\n        return getSupportCardById(_id).supportCardType;\\n    }\\n}\\n\",\"keccak256\":\"0x491c921c6ca5ce63e59a94385e481fb4ae7b7ffa84949bbb4765c34592684cb7\",\"license\":\"MIT\"},\"contracts/PepemonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface PepemonFactory {\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f04dfad7e690dca80f5924be4849209f7032ab29e1597745424ec6913ae459b\",\"license\":\"MIT\"},\"contracts/lib/AdminRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AdminRole {\\n  using Roles for Roles.Role;\\n\\n  event AdminAdded(address indexed account);\\n  event AdminRemoved(address indexed account);\\n\\n  Roles.Role private admins;\\n\\n  constructor() {\\n    _addAdmin(msg.sender);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender));\\n    _;\\n  }\\n\\n  function isAdmin(address account) public view returns (bool) {\\n    return admins.has(account);\\n  }\\n\\n  function addAdmin(address account) public onlyAdmin {\\n    _addAdmin(account);\\n  }\\n\\n  function renounceAdmin() public {\\n    _removeAdmin(msg.sender);\\n  }\\n\\n  function _addAdmin(address account) internal {\\n    admins.add(account);\\n    emit AdminAdded(account);\\n  }\\n\\n  function _removeAdmin(address account) internal {\\n    admins.remove(account);\\n    emit AdminRemoved(account);\\n  }\\n}\",\"keccak256\":\"0x087322ecbf7bdc39315bedc5ec603149a119a35910f82ceb131820c1b7bb9804\",\"license\":\"MIT\"},\"contracts/lib/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Arrays {\\n    //Shuffles an array of uints with random seed\\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            //Pick random index to swap current element with\\n            uint256 n = i + _seed % (_elements.length - i);\\n\\n            //swap elements\\n            uint256 temp = _elements[n];\\n            _elements[n] = _elements[i];\\n            _elements[i] = temp;\\n\\n            //Create new pseudorandom number using seed.\\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\\n        }\\n        return _elements;\\n    }\\n}\\n\",\"keccak256\":\"0x61371b66c2b9849ea3837a60073233c577f8978017339fcd3bf169cb498a1828\",\"license\":\"MIT\"},\"contracts/lib/ChainLinkRngOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"./AdminRole.sol\\\";\\n\\nabstract contract ChainLinkRngOracle is VRFConsumerBase, AdminRole {\\n    bytes32 immutable keyHash;\\n    bytes32 public lastRequestId;\\n    uint256 internal fee;\\n\\n    address constant maticLink = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\n    address constant maticVrfCoordinator = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\\n    bytes32 constant maticKeyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\\n\\n    address constant mumbaiLink = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\\n    address constant mumbaiVrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;\\n    bytes32 constant mumbaiKeyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\\n\\n\\n\\n    mapping(bytes32 => uint256) internal results;\\n\\n    constructor() VRFConsumerBase(mumbaiVrfCoordinator, mumbaiLink) {\\n        keyHash = mumbaiKeyHash;\\n        fee = 1 ether / 1000;\\n    }\\n\\n    //Get a new random number (paying link for it)\\n    //Only callable by admin\\n    function getNewRandomNumber() public onlyAdmin returns (bytes32 requestId) {\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        lastRequestId = requestRandomness(keyHash, fee);\\n        return lastRequestId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        results[requestId] = randomness;\\n    }\\n\\n    function fetchNumberByRequestId(bytes32 _requestId) public view returns (uint256) {\\n        return results[_requestId];\\n    }\\n\\n    //Get most recent random number and use that as randomness source    \\n    function getRandomNumber() public view returns (uint256){\\n        return fetchNumberByRequestId(lastRequestId);        \\n    }\\n}\\n\",\"keccak256\":\"0xed1b3081f066d98cdfbaa4f9a050e5186ff7e4c44925bf9222a98b15c0dae13f\",\"license\":\"MIT\"},\"contracts/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an account access to this role\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(!has(role, account));\\n\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev remove an account's access to this role\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(has(role, account));\\n\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev check if an account has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address account)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    require(account != address(0));\\n    return role.bearer[account];\\n  }\\n}\",\"keccak256\":\"0xd66f1c8050d61971204bf1249496bd98b69fd79b2011a630767f817d7201b56c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003eb138038062003eb183398101604081905262000034916200017c565b6200003f3362000087565b600380546001600160a01b039485166001600160a01b0319918216179091556004805493851693821693909317909255600580549190931691161790556001600255620001c5565b620000a2816000620000d960201b6200119e1790919060201c565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b6001600160a01b038116620000ed57600080fd5b620000f9828262000129565b156200010457600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166200013f57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b80516001600160a01b03811681146200017757600080fd5b919050565b60008060006060848603121562000191578283fd5b6200019c846200015f565b9250620001ac602085016200015f565b9150620001bc604085016200015f565b90509250925092565b613cdc80620001d56000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063abd6b07511610066578063abd6b075146100ff578063c3ee543b14610120578063c6b34e1c14610141578063edc85a9114610162578063ee56b3911461018257610093565b8063047a41301461009857806324d7806c146100c257806370480275146100e25780638bad0c0a146100f7575b600080fd5b6100ab6100a636600461351c565b6101a2565b6040516100b9929190613964565b60405180910390f35b6100d56100d036600461333e565b6101f5565b6040516100b99190613959565b6100f56100f036600461333e565b610209565b005b6100f5610227565b61011261010d36600461351c565b610232565b6040516100b99291906139d1565b61013361012e3660046135b2565b610298565b6040516100b9929190613a16565b61015461014f366004613358565b610c70565b6040516100b99291906139f9565b61017561017036600461351c565b61103e565b6040516100b991906139c2565b6101956101903660046136c7565b61118c565b6040516100b99190613a33565b600080600083602001516040015160000151136101c95750506020810151516001906101f0565b6040808401510151516000126101e95750506040810151516001906101f0565b5060009050805b915091565b600061020181836111ea565b90505b919050565b610212336101f5565b61021b57600080fd5b61022481611223565b50565b61023033611265565b565b61023a612c09565b6000610245836112a7565b925060005b61025384611930565b935061025e8461103e565b935060008061026c866101a2565b91509150811561027f5791506102919050565b61028886611b03565b9550505061024a565b9293915050565b6102a0612c6a565b6102a8612c6a565b60008060005b86604001516020015181101561076f576000876060015182600881106102e457634e487b7160e01b600052603260045260246000fd5b6020020151600354604051634ca7d96360e11b81529192506000916001600160a01b039091169063994fb2c69061031f908590600401613a33565b60006040518083038186803b15801561033757600080fd5b505afa15801561034b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037391908101906135e8565b905060008160200151600381111561039b57634e487b7160e01b600052602160045260246000fd5b141561048d5760005b816060015151811015610487576000826060015182815181106103d757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806103f58d8d85608001516001611b53565b9150915081156104485780836020015161040f9190613b0f565b8d604001516060018181516104249190613ab6565b9052506020830151610437908290613b0f565b6104419089613ab6565b9750610471565b825160408e0151606001805161045f908390613ab6565b905250825161046e9089613ab6565b97505b505050808061047f90613bff565b9150506103a4565b5061075a565b6001816020015160038111156104b357634e487b7160e01b600052602160045260246000fd5b1415610753578060a001511561059457600160005b8481101561051b578a6060015181600881106104f457634e487b7160e01b600052603260045260246000fd5b6020020151841415610509576000915061051b565b8061051381613bff565b9150506104c8565b50806105295750505061075d565b60005b8a60800151811015610584578a60a00151816005811061055c57634e487b7160e01b600052603260045260246000fd5b6020020151518414156105725760009150610584565b8061057c81613bff565b91505061052c565b50806105925750505061075d565b505b60005b8160600151518110156106e3576000826060015182815181106105ca57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806105e88d8d85608001516001611b53565b9150915081156106a45760018111156106285780836020015161060b9190613b0f565b8d604001516060018181516106209190613ab6565b90525061069f565b60018360400151600581111561064e57634e487b7160e01b600052602160045260246000fd5b141561066c5750505060408a015160808101516060909101526106d1565b602083015161068157600198505050506106d1565b82602001518d6040015160600181815161069b9190613ab6565b9052505b6106cd565b825160408e015160600180516106bb908390613ab6565b90525082516106ca9089613ab6565b97505b5050505b806106db81613bff565b915050610597565b506080810151511561074e5760058960800151101561074e5760408051808201909152828152608080830151602083015260a08b0151908b0180519061072882613bff565b90526005811061074857634e487b7160e01b600052603260045260246000fd5b60200201525b61075a565b505061075d565b50505b8061076781613bff565b9150506102ae565b5081156107905780866040015160600181815161078c9190613ab6565b9052505b506000905080805b856040015160200151811015610c45576000866060015182600881106107ce57634e487b7160e01b600052603260045260246000fd5b6020020151600354604051634ca7d96360e11b81529192506000916001600160a01b039091169063994fb2c690610809908590600401613a33565b60006040518083038186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085d91908101906135e8565b905060028160200151600381111561088557634e487b7160e01b600052602160045260246000fd5b14156109765760005b816060015151811015610970576000826060015182815181106108c157634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806108df8d8d85608001516000611b53565b915091508115610932578083602001516108f99190613b0f565b8c6040015160400181815161090e9190613ab6565b9052506020830151610921908290613b0f565b61092b9089613ab6565b975061095a565b82516040808e0151018051610948908390613ab6565b90525082516109579089613ab6565b97505b505050808061096890613bff565b91505061088e565b50610c30565b60038160200151600381111561099c57634e487b7160e01b600052602160045260246000fd5b1415610c29578060a0015115610a7057600160005b84811015610a0457896060015181600881106109dd57634e487b7160e01b600052603260045260246000fd5b60200201518414156109f25760009150610a04565b806109fc81613bff565b9150506109b1565b5060005b8960800151811015610a60578960a001518160058110610a3857634e487b7160e01b600052603260045260246000fd5b602002015151841415610a4e5760009150610a60565b80610a5881613bff565b915050610a08565b5080610a6e57505050610c33565b505b60005b816060015151811015610bb957600082606001518281518110610aa657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080610ac48d8d85608001516000611b53565b915091508115610b7b578015610b0157808360200151610ae49190613b0f565b8c60400151604001818151610af99190613ab6565b905250610b76565b600383604001516005811115610b2757634e487b7160e01b600052602160045260246000fd5b1415610b43575050506040808a015160a0810151910152610ba7565b6020830151610b585760019850505050610ba7565b82602001518c60400151604001818151610b729190613ab6565b9052505b610ba3565b82516040808e0151018051610b91908390613ab6565b9052508251610ba09089613ab6565b97505b5050505b80610bb181613bff565b915050610a73565b5060808101515115610c2457600588608001511015610c245760408051808201909152828152608080830151602083015260a08a0151908a01805190610bfe82613bff565b905260058110610c1e57634e487b7160e01b600052603260045260246000fd5b60200201525b610c30565b5050610c33565b50505b80610c3d81613bff565b915050610798565b508115610c6657808560400151604001818151610c629190613ab6565b9052505b5093949293505050565b610c78612c09565b6000610c83336101f5565b610c8c57600080fd5b836001600160a01b0316866001600160a01b03161415610cc75760405162461bcd60e51b8152600401610cbe9061397d565b60405180910390fd5b6004805460405163a090195d60e01b81526000926001600160a01b039092169163a090195d91610cf9918a9101613a33565b604080518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4891906136f7565b506004805460405163a090195d60e01b81529293506000926001600160a01b039091169163a090195d91610d7e91899101613a33565b604080518083038186803b158015610d9557600080fd5b505afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd91906136f7565b50600354604051632552294360e11b81529192506000916001600160a01b0390911690634aa4528690610e04908690600401613a33565b60006040518083038186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e589190810190613444565b600354604051632552294360e11b81529192506000916001600160a01b0390911690634aa4528690610e8e908690600401613a33565b60006040518083038186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ee29190810190613444565b9050610eec612c09565b600254816000018181525050826060015181602001516040015160000181815250508481602001516040015160200181815250508a8160200151600001906001600160a01b031690816001600160a01b031681525050898160200151602001818152505081606001518160400151604001516000018181525050838160400151604001516020018181525050888160400151600001906001600160a01b031690816001600160a01b0316815250508781604001516020018181525050610fb181612684565b60016000600254815260200190815260200160002081905550886001600160a01b03168b6001600160a01b03167ffc09ac3d11089b107ccf634445378f0fd381d1be0f6ef37cf5dcc6272c433f1760025460405161100f9190613a33565b60405180910390a3600280548291600061102883613bff565b9190505596509650505050505094509492505050565b611046612c09565b61104e612c6a565b611056612c6a565b60008460800151600181111561107c57634e487b7160e01b600052602160045260246000fd5b141561109d57836020015160400151915083604001516040015190506110b4565b836040015160400151915083602001516040015190505b6110be8282610298565b80925081935050508060400151604001518260400151606001511315611111578060400151604001518260400151606001516110fa9190613b92565b81518290611109908390613b92565b905250611128565b6001816000018181516111249190613b92565b9052505b60008460800151600181111561114e57634e487b7160e01b600052602160045260246000fd5b141561116e57602084015160409081018390528085015101819052611184565b6020840151604090810182905280850151018290525b509192915050565b60016020526000908152604090205481565b6001600160a01b0381166111b157600080fd5b6111bb82826111ea565b156111c557600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166111ff57600080fd5b506001600160a01b03811660009081526020839052604090205460ff165b92915050565b61122e60008261119e565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b611270600082612758565b6040516001600160a01b038216907fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90600090a250565b6112af612c09565b60208083015160408085015160035482840151909401519151632552294360e11b8152929390926000926001600160a01b0390921691634aa45286916112f89190600401613a33565b60006040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261134c9190810190613444565b600354604080850151602001519051632552294360e11b81529293506000926001600160a01b0390921691634aa452869161138991600401613a33565b60006040518083038186803b1580156113a157600080fd5b505afa1580156113b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113dd9190810190613444565b90506113e8826127a0565b60408086015101526113f9816127a0565b6040808501518101919091526004805460208701519251639895d74960e01b81526000936001600160a01b0390921692639895d7499261143b92909101613a33565b60206040518083038186803b15801561145357600080fd5b505afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b91906136df565b600480546020870151604051639895d74960e01b81529394506000936001600160a01b0390921692639895d749926114c4929101613a33565b60206040518083038186803b1580156114dc57600080fd5b505afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151491906136df565b90506000600589606001516115299190613c1a565b15905080156117595760045460208801516000916001600160a01b031690637b8ef8279061155860458e6127f5565b6040518363ffffffff1660e01b8152600401611575929190613a3c565b60006040518083038186803b15801561158d57600080fd5b505afa1580156115a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c9919081019061339b565b905060005b84811015611639578181815181106115f657634e487b7160e01b600052603260045260246000fd5b6020026020010151896060015182603c811061162257634e487b7160e01b600052603260045260246000fd5b60200201528061163181613bff565b9150506115ce565b5060006080890181905260045460208901516001600160a01b0390911690637b8ef827906116696101a48f6127f5565b6040518363ffffffff1660e01b8152600401611686929190613a3c565b60006040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116da919081019061339b565b905060005b8481101561174a5781818151811061170757634e487b7160e01b600052603260045260246000fd5b6020026020010151896060015182603c811061173357634e487b7160e01b600052603260045260246000fd5b60200201528061174281613bff565b9150506116df565b50506000608088015250611785565b61176b87604001518760400151612821565b604080890182905287015161177f91612821565b60408701525b60005b8760400151604001516020015181101561181e578760600151848960800151836117b29190613af7565b6117bc9190613c1a565b603c81106117da57634e487b7160e01b600052603260045260246000fd5b6020020151886040015160600151826008811061180757634e487b7160e01b600052603260045260246000fd5b60200201528061181681613bff565b915050611788565b50866040015160400151602001518760800181815161183d9190613af7565b90525060005b866040015160400151602001518110156118d95786606001518388608001518361186d9190613af7565b6118779190613c1a565b603c811061189557634e487b7160e01b600052603260045260246000fd5b602002015187604001516060015182600881106118c257634e487b7160e01b600052603260045260246000fd5b6020020152806118d181613bff565b915050611843565b5085604001516040015160200151866080018181516118f89190613af7565b90525060208901879052604089018690526060890180519061191982613bff565b90525050600060a089015250959695505050505050565b611938612c09565b6020820151604090810151810151818401518201519091015160008460a00151600181111561197757634e487b7160e01b600052602160045260246000fd5b1415611a7e578051825113156119b7576080840160005b908160018111156119af57634e487b7160e01b600052602160045260246000fd5b905250611a79565b8051825112156119cc5760808401600161198e565b8060200151826020015111156119e75760808401600061198e565b806020015182602001511015611a025760808401600161198e565b60006002611a1362010f2c876127f5565b611a1d9190613c1a565b90508015611a2c576001611a2f565b60005b85608001906001811115611a5357634e487b7160e01b600052602160045260246000fd5b90816001811115611a7457634e487b7160e01b600052602160045260246000fd5b905250505b611184565b600084608001516001811115611aa457634e487b7160e01b600052602160045260246000fd5b14611ab0576000611ab3565b60015b84608001906001811115611ad757634e487b7160e01b600052602160045260246000fd5b90816001811115611af857634e487b7160e01b600052602160045260246000fd5b905250929392505050565b611b0b612c09565b60008260a001516001811115611b3157634e487b7160e01b600052602160045260246000fd5b1415611b4357600160a0830152611b4f565b611b4c826112a7565b91505b5090565b600080808085611b6857506001905080612677565b8560011415611b87575050604086015160200151600510156001612677565b8560021415611ca3576001915060005b876040015160200151811015611c995760035460608901516000916001600160a01b031690634bcb9613908460088110611be157634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b8152600401611c029190613a33565b60206040518083038186803b158015611c1a57600080fd5b505afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c52919061342a565b90506002816003811115611c7657634e487b7160e01b600052602160045260246000fd5b1415611c86576000935050611c99565b5080611c9181613bff565b915050611b97565b5060019050612677565b8560031415611e305760005b886040015160200151811015611e245760035460608a01516000916001600160a01b03169063994fb2c6908460088110611cf957634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b8152600401611d1a9190613a33565b60006040518083038186803b158015611d3257600080fd5b505afa158015611d46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6e91908101906135e8565b9050600081602001516003811115611d9657634e487b7160e01b600052602160045260246000fd5b14611da15750611e12565b60005b816060015151811015611e0f57600082606001518281518110611dd757634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160021415611dfc5784611df881613bff565b9550505b5080611e0781613bff565b915050611da4565b50505b80611e1c81613bff565b915050611caf565b50600081119150612677565b8560041415611fb15760005b886040015160200151811015611e245760035460608a01516000916001600160a01b03169063994fb2c6908460088110611e8657634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b8152600401611ea79190613a33565b60006040518083038186803b158015611ebf57600080fd5b505afa158015611ed3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611efb91908101906135e8565b9050600081602001516003811115611f2357634e487b7160e01b600052602160045260246000fd5b14611f2e5750611f9f565b60005b816060015151811015611f9c57600082606001518281518110611f6457634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160031415611f895784611f8581613bff565b9550505b5080611f9481613bff565b915050611f31565b50505b80611fa981613bff565b915050611e3c565b85600514156120d05760005b886040015160200151811015611e245760035460608a01516000916001600160a01b03169063994fb2c690846008811061200757634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016120289190613a33565b60006040518083038186803b15801561204057600080fd5b505afa158015612054573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261207c91908101906135e8565b90506000816020015160038111156120a457634e487b7160e01b600052602160045260246000fd5b146120af57506120be565b826120b981613bff565b935050505b806120c881613bff565b915050611fbd565b85600614156122515760005b876040015160200151811015611e245760035460608901516000916001600160a01b03169063994fb2c690846008811061212657634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016121479190613a33565b60006040518083038186803b15801561215f57600080fd5b505afa158015612173573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261219b91908101906135e8565b90506002816020015160038111156121c357634e487b7160e01b600052602160045260246000fd5b146121ce575061223f565b60005b81606001515181101561223c5760008260600151828151811061220457634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160031415612229578461222581613bff565b9550505b508061223481613bff565b9150506121d1565b50505b8061224981613bff565b9150506120dc565b85600714156123d25760005b876040015160200151811015611e245760035460608901516000916001600160a01b03169063994fb2c69084600881106122a757634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016122c89190613a33565b60006040518083038186803b1580156122e057600080fd5b505afa1580156122f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261231c91908101906135e8565b905060028160200151600381111561234457634e487b7160e01b600052602160045260246000fd5b1461234f57506123c0565b60005b8160600151518110156123bd5760008260600151828151811061238557634e487b7160e01b600052603260045260246000fd5b602002602001015190508060000151600414156123aa57846123a681613bff565b9550505b50806123b581613bff565b915050612352565b50505b806123ca81613bff565b91505061225d565b85600814156123f1575050604085015160200151600510156001612677565b8560091415612410575050604085015160200151600711156001612677565b85600a14156125265760005b886040015160200151811015611c995760035460608a01516000916001600160a01b03169063994fb2c690846008811061246657634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b81526004016124879190613a33565b60006040518083038186803b15801561249f57600080fd5b505afa1580156124b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124db91908101906135e8565b905060018160200151600381111561250357634e487b7160e01b600052602160045260246000fd5b1415612513576001935050611c99565b508061251e81613bff565b91505061241c565b85600b14156126775784156125d6576003546020890151604051632552294360e11b81526001600160a01b0390921691634aa452869161256891600401613a33565b60006040518083038186803b15801561258057600080fd5b505afa158015612594573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125bc9190810190613444565b6060015188516125cd906002613b0f565b13159150612673565b6003546020880151604051632552294360e11b81526001600160a01b0390921691634aa452869161260991600401613a33565b60006040518083038186803b15801561262157600080fd5b505afa158015612635573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261265d9190810190613444565b60600151875161266e906002613b0f565b131591505b5060015b9097909650945050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663dbdff2c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d557600080fd5b505afa1580156126e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270d91906136df565b905060004382856020015160000151866040015160000151604051602001612738949392919061390f565b60408051808303601f190181529190528051602090910120949350505050565b6001600160a01b03811661276b57600080fd5b61277582826111ea565b61277e57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6127a8612cac565b6127b0612cac565b608080840151825260a080850151602084015260c0850151604084015260e0850151606084015261010085015191830191909152610120840151908201529050919050565b606081015181516000908152600160209081526040808320549051929384936127389388939101613943565b612829612c6a565b60005b83608001518110156111845760008460a00151826005811061285e57634e487b7160e01b600052603260045260246000fd5b602002015190506000816020015190506001816020015110612bf4576000816060015160018111156128a057634e487b7160e01b600052602160045260246000fd5b14156129d9576000816040015160058111156128cc57634e487b7160e01b600052602160045260246000fd5b14156128f1578051604087015160600180516128e9908390613ab6565b9052506129d4565b60028160400151600581111561291757634e487b7160e01b600052602160045260246000fd5b14156129335780516040808801510180516128e9908390613ab6565b60048160400151600581111561295957634e487b7160e01b600052602160045260246000fd5b1415612973578051604087015180516128e9908390613ab6565b60058160400151600581111561299957634e487b7160e01b600052602160045260246000fd5b14156129d45780516040870151602001516000916129b691613ab6565b9050600081136129c75760006129c9565b805b604088015160200152505b612b07565b6000816040015160058111156129ff57634e487b7160e01b600052602160045260246000fd5b1415612a2457805160408601516060018051612a1c908390613ab6565b905250612b07565b600281604001516005811115612a4a57634e487b7160e01b600052602160045260246000fd5b1415612a66578051604080870151018051612a1c908390613ab6565b600481604001516005811115612a8c57634e487b7160e01b600052602160045260246000fd5b1415612aa657805160408601518051612a1c908390613ab6565b600581604001516005811115612acc57634e487b7160e01b600052602160045260246000fd5b1415612b07578051604086015160200151600091612ae991613ab6565b905060008113612afa576000612afc565b805b604087015160200152505b60208101805190612b1782613be8565b9052506020810151612bf45760018660800151612b349190613bd1565b831015612b9e578560a0015160018760800151612b519190613bd1565b60058110612b6f57634e487b7160e01b600052603260045260246000fd5b60200201518660a001518460058110612b9857634e487b7160e01b600052603260045260246000fd5b60200201525b8560a0015160018760800151612bb49190613bd1565b60058110612bd257634e487b7160e01b600052603260045260246000fd5b60200201612bde612ce2565b905260808601805190612bf082613be8565b9052505b50508080612c0190613bff565b91505061282c565b6040518060c0016040528060008152602001612c23612cfc565b8152602001612c30612cfc565b81526020016000815260200160006001811115612c5d57634e487b7160e01b600052602160045260246000fd5b815260200160005b905290565b6040518060c001604052806000815260200160008152602001612c8b612cac565b8152602001612c98612d35565b815260200160008152602001612c65612d54565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001612c65612d81565b6040805160a08101825260008082526020820152908101612d1b612c6a565b8152602001612d28612dc7565b8152602001600081525090565b6040518061010001604052806008906020820280368337509192915050565b6040518060a001604052806005905b612d6b612ce2565b815260200190600190039081612d635790505090565b6040518060a00160405280600081526020016000815260200160006005811115612dbb57634e487b7160e01b600052602160045260246000fd5b81526020016000612d28565b604051806107800160405280603c906020820280368337509192915050565b6000612df9612df484613a96565b613a4a565b9050808260208681870286011115612e1057600080fd5b60005b86811015612e2f57823584529281019291810191600101612e13565b505050509392505050565b80356001600160a01b038116811461020457600080fd5b600082601f830112612e61578081fd5b81516020612e71612df483613a73565b8281528181019085830160a080860288018501891015612e8f578687fd5b865b86811015612f1c5781838b031215612ea7578788fd5b604080518381018181106001600160401b0382111715612ec957612ec9613c66565b825284518152878501518882015284820151612ee481613c99565b80838301525060609150612ef9828601613079565b918101919091526080848101519082015285529385019391810191600101612e91565b509198975050505050505050565b600082601f830112612f3a578081fd5b6005612f48612df482613a96565b8084866103c087011115612f5a578485fd5b845b8481101561302f5781880360c080821215612f75578788fd5b604080518181016001600160401b038282108183111715612f9857612f98613c66565b9083528635825260209060a0601f198701811315612fb4578c8dfd5b845196508087018781108382111715612fcf57612fcf613c66565b855288830135875288850135878401526060915081890135612ff081613c99565b80868901525060809450613005858a0161306e565b91870191909152870135928501929092528082019390935291865294019390910190600101612f5c565b50909695505050505050565b600082601f83011261304b578081fd5b61305783600884612de6565b9392505050565b8051801515811461020457600080fd5b803561020481613c8c565b805161020481613c8c565b80516004811061020457600080fd5b600082601f8301126130a3578081fd5b81516001600160401b038111156130bc576130bc613c66565b60206130d0601f8301601f19168201613a4a565b82815285828487010111156130e3578384fd5b835b838110156131005785810183015182820184015282016130e5565b8381111561311057848385840101525b5095945050505050565b600060c0828403121561312b578081fd5b60405160c081018181106001600160401b038211171561314d5761314d613c66565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b600060a082840312156131a3578081fd5b60405160a081018181106001600160401b03821117156131c5576131c5613c66565b8060405250809150825181526020830151602082015260408301516131e981613c99565b604082015260608301516131fc81613c8c565b6060820152608092830151920191909152919050565b60006105e08284031215613224578081fd5b60405160c081018181106001600160401b038211171561324657613246613c66565b80604052508091508235815260208301356020820152613269846040850161311a565b604082015261327c84610100850161303b565b6060820152610200830135608082015261329a846102208501612f2a565b60a08201525092915050565b6000610dc082840312156132b8578081fd5b60405160a081018181106001600160401b03821117156132da576132da613c66565b6040529050806132e983612e3a565b8152602083013560208201526133028460408501613212565b60408201528361063f84011261331757600080fd5b61332784603c6106208601612de6565b6060820152610da083013560808201525092915050565b60006020828403121561334f578081fd5b61305782612e3a565b6000806000806080858703121561336d578283fd5b61337685612e3a565b93506020850135925061338b60408601612e3a565b9396929550929360600135925050565b600060208083850312156133ad578182fd5b82516001600160401b038111156133c2578283fd5b8301601f810185136133d2578283fd5b80516133e0612df482613a73565b81815283810190838501858402850186018910156133fc578687fd5b8694505b8385101561341e578051835260019490940193918501918501613400565b50979650505050505050565b60006020828403121561343b578081fd5b61305782613084565b600060208284031215613455578081fd5b81516001600160401b038082111561346b578283fd5b8184019150610140808387031215613481578384fd5b61348a81613a4a565b90508251815261349c60208401613079565b60208201526040830151828111156134b2578485fd5b6134be87828601613093565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100915081830151828201526101209150818301518282015280935050505092915050565b6000611c00828403121561352e578081fd5b60405160c081018181106001600160401b038211171561355057613550613c66565b6040528235815261356484602085016132a6565b602082015261357784610de085016132a6565b6040820152611ba08301356060820152613594611bc0840161306e565b60808201526135a6611be0840161306e565b60a08201529392505050565b600080610bc083850312156135c5578182fd5b6135cf8484613212565b91506135df846105e08501613212565b90509250929050565b6000602082840312156135f9578081fd5b81516001600160401b038082111561360f578283fd5b908301906101608286031215613623578283fd5b61362d60e0613a4a565b8251815261363d60208401613084565b6020820152604083015182811115613653578485fd5b61365f87828601613093565b604083015250606083015182811115613676578485fd5b61368287828601612e51565b6060830152506136958660808501613192565b60808201526136a7610120840161305e565b60a08201526136b9610140840161305e565b60c082015295945050505050565b6000602082840312156136d8578081fd5b5035919050565b6000602082840312156136f0578081fd5b5051919050565b60008060408385031215613709578182fd5b505080516020909101519092909150565b8060005b6005811015613797578151805185526020908101518051828701528082015160408088019190915281015190919060606006821061375e5761375e613c50565b87810191909152820151608061377382613c7c565b87810191909152919091015160a086015260c090940193919091019060010161371e565b50505050565b8060005b60088110156137975781518452602093840193909101906001016137a1565b8051825260208101516137d660208401826138a8565b5060408101516137ea610de08401826138a8565b506060810151611ba0830152608081015161380481613c7c565b611bc083015260a081015161381881613c7c565b80611be0840152505050565b80518252602081015160208301526040810151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015250606081015161388461010084018261379d565b50608081015161020083015260a08101516138a361022084018261371a565b505050565b80516001600160a01b0316825260208082015181840152604080830151906138d290850182613824565b506060820151610620840160005b603c8110156138fd578251825291830191908301906001016138e0565b5050505060800151610da09190910152565b93845260208401929092526bffffffffffffffffffffffff19606091821b8116604085015291901b16605482015260680190565b9283526020830191909152604082015260600190565b901515815260200190565b91151582526001600160a01b0316602082015260400190565b60208082526025908201527f506570656d6f6e426174746c653a2043616e6e6f7420626174746c6520796f756040820152643939b2b63360d91b606082015260800190565b611c00810161121d82846137c0565b611c2081016139e082856137c0565b6001600160a01b0392909216611c009190910152919050565b611c208101613a0882856137c0565b82611c008301529392505050565b610bc08101613a258285613824565b6130576105e0830184613824565b90815260200190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613a6b57613a6b613c66565b604052919050565b60006001600160401b03821115613a8c57613a8c613c66565b5060209081020190565b60006001600160401b03821115613aaf57613aaf613c66565b5060200290565b600080821280156001600160ff1b0384900385131615613ad857613ad8613c3a565b600160ff1b8390038412811615613af157613af1613c3a565b50500190565b60008219821115613b0a57613b0a613c3a565b500190565b60006001600160ff1b0381841382841380821686840486111615613b3557613b35613c3a565b600160ff1b84871282811687830589121615613b5357613b53613c3a565b858712925087820587128484161615613b6e57613b6e613c3a565b87850587128184161615613b8457613b84613c3a565b505050929093029392505050565b60008083128015600160ff1b850184121615613bb057613bb0613c3a565b6001600160ff1b0384018313811615613bcb57613bcb613c3a565b50500390565b600082821015613be357613be3613c3a565b500390565b600081613bf757613bf7613c3a565b506000190190565b6000600019821415613c1357613c13613c3a565b5060010190565b600082613c3557634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6002811061022457610224613c50565b6002811061022457600080fd5b6006811061022457600080fdfea264697066735822122036fd8d3fa89f845fd8f7a8f05d1484c800100f73ea52114e5461686a0c4bd26d64736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBattle(address,uint256,address,uint256)": {
        "details": "Create battle",
        "params": {
          "p1Addr": "address player1",
          "p1DeckId": "uint256",
          "p2Addr": "address player2",
          "p2DeckId": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8828,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "admins",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)9316_storage"
      },
      {
        "astId": 3575,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "battleIdRNGSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3661,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_nextBattleId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3664,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_cardContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(PepemonCardOracle)7819"
      },
      {
        "astId": 3667,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_deckContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PepemonCardDeck)7224"
      },
      {
        "astId": 3670,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_randNrGenContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ChainLinkRngOracle)9112"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ChainLinkRngOracle)9112": {
        "encoding": "inplace",
        "label": "contract ChainLinkRngOracle",
        "numberOfBytes": "20"
      },
      "t_contract(PepemonCardDeck)7224": {
        "encoding": "inplace",
        "label": "contract PepemonCardDeck",
        "numberOfBytes": "20"
      },
      "t_contract(PepemonCardOracle)7819": {
        "encoding": "inplace",
        "label": "contract PepemonCardOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Role)9316_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 9315,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}