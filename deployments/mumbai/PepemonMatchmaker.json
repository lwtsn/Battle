{
  "address": "0xE589CA40d821b1db4e9Ac2Ea85d26b0b82887aE5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "defaultRanking",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "battleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deckAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardPoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "loser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "BattleFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deckOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deckId",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deckId",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "winnerRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loserRating",
          "type": "uint256"
        }
      ],
      "name": "getEloRatingChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWaitingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerRanking",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "setAllowBattleAgainstOneself",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "battleContractAddress",
          "type": "address"
        }
      ],
      "name": "setBattleContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deckContractAddress",
          "type": "address"
        }
      ],
      "name": "setDeckContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "kFactor",
          "type": "uint256"
        }
      ],
      "name": "setKFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "matchRange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "matchRangePerMinute",
          "type": "uint256"
        }
      ],
      "name": "setMatchRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardPoolAddress",
          "type": "address"
        }
      ],
      "name": "setRewardPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "waitingDecks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deckId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enterTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43cacd91032bebabbe18732ae13eec997059be88c86ecee9f5b8d32157907fe5",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0xE589CA40d821b1db4e9Ac2Ea85d26b0b82887aE5",
    "transactionIndex": 11,
    "gasUsed": "2019077",
    "logsBloom": "0x
    "blockHash": "0x33cfb9886c7af0e130c39fe9bbe6f0b0d204c1261fbc829044381fb0b5726345",
    "transactionHash": "0x43cacd91032bebabbe18732ae13eec997059be88c86ecee9f5b8d32157907fe5",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 32109044,
        "transactionHash": "0x43cacd91032bebabbe18732ae13eec997059be88c86ecee9f5b8d32157907fe5",
        "address": "0xE589CA40d821b1db4e9Ac2Ea85d26b0b82887aE5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x33cfb9886c7af0e130c39fe9bbe6f0b0d204c1261fbc829044381fb0b5726345"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 32109044,
        "transactionHash": "0x43cacd91032bebabbe18732ae13eec997059be88c86ecee9f5b8d32157907fe5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000072c56ff5bf20000000000000000000000000000000000000000000000000008138c41037968bc000000000000000000000000000000000000000000002d2df95fead25c444d5b000000000000000000000000000000000000000000000000080c5fea041d76bc000000000000000000000000000000000000000000002d2df96717295ba03f5b",
        "logIndex": 30,
        "blockHash": "0x33cfb9886c7af0e130c39fe9bbe6f0b0d204c1261fbc829044381fb0b5726345"
      }
    ],
    "blockNumber": 32109044,
    "cumulativeGasUsed": "3302553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2000,
    "0xBE460f139372436F69cF53b80353c14333d316f3",
    "0xa784b4fcFe0cF627aD2Be650d5467597FCFBFf67",
    "0xaE99c778ae8fBD1A4B327bdcf29EF6888dE18b25"
  ],
  "numDeployments": 8,
  "solcInputHash": "8ad67612a8651d4669453837132d0d0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultRanking\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"battleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deckAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"BattleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deckOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winnerRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loserRating\",\"type\":\"uint256\"}],\"name\":\"getEloRatingChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerRanking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowBattleAgainstOneself\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"battleContractAddress\",\"type\":\"address\"}],\"name\":\"setBattleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deckContractAddress\",\"type\":\"address\"}],\"name\":\"setDeckContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kFactor\",\"type\":\"uint256\"}],\"name\":\"setKFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"matchRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchRangePerMinute\",\"type\":\"uint256\"}],\"name\":\"setMatchRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardPoolAddress\",\"type\":\"address\"}],\"name\":\"setRewardPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waitingDecks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"enter(uint256)\":{\"params\":{\"deckId\":\"The Deck of who called this function\"}},\"exit(uint256)\":{\"params\":{\"deckId\":\"The Deck of the owner\"}},\"getEloRatingChange(uint256,uint256)\":{\"details\":\"The returned number has 2 decimals of precision, so 1501 = 15.01 Elo change\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setKFactor(uint256)\":{\"details\":\"Dictates the rate of change, has a direct influence on how much a player wins/loses in the ranking\",\"params\":{\"kFactor\":\"Value used to calculate the rate of change in getEloRatingChange\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"enter(uint256)\":{\"notice\":\"Tries to initiate a battle using a specified deck. If no opponents are found, the deck is placed in a wait list.\"},\"exit(uint256)\":{\"notice\":\"Transfers a deck back to its owner and removes from the wait list\"},\"getEloRatingChange(uint256,uint256)\":{\"notice\":\"Calculates the Elo change based on the winner's and loser's ratings.\"},\"getWaitingCount()\":{\"notice\":\"Retrieves the number of waiting decks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonMatchmaker.sol\":\"PepemonMatchmaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd260defa45bc1bbdf5e6d74298fb2705bf058c3d2beb17fb1158fa1a430c5024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/PepemonBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"./lib/AdminRole.sol\\\";\\r\\nimport \\\"./PepemonCardDeck.sol\\\";\\r\\nimport \\\"./PepemonCardOracle.sol\\\";\\r\\nimport \\\"./lib/ChainLinkRngOracle.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract PepemonBattle is AdminRole {\\r\\n\\r\\n    event BattleCreated(\\r\\n        address indexed player1Addr,\\r\\n        address indexed player2Addr,\\r\\n        uint256 battleId,\\r\\n        uint256 p1DeckId,\\r\\n        uint256 p2DeckId\\r\\n    );\\r\\n\\r\\n    mapping (uint => uint) public battleIdRNGSeed;\\r\\n\\r\\n    uint constant _max_inte = 8;\\r\\n    uint constant _max_cards_on_table = 5;\\r\\n    uint constant _refreshTurn = 5;\\r\\n\\r\\n    //Attacker can either be PLAYER_ONE or PLAYER_TWO\\r\\n    enum Attacker {\\r\\n        PLAYER_ONE,\\r\\n        PLAYER_TWO\\r\\n    }\\r\\n\\r\\n    //Game can either be in FIRST_HALF or SECOND_HALF\\r\\n    enum TurnHalves {\\r\\n        FIRST_HALF,\\r\\n        SECOND_HALF\\r\\n    }\\r\\n\\r\\n    //Battle contains:\\r\\n    //battleId = ID of this battle\\r\\n    //player1, player2 = players\\r\\n    //currentTurn\\r\\n    //attacker\\r\\n    //turnHalves => first half or second half?\\r\\n    struct Battle {\\r\\n        uint256 battleId;\\r\\n        Player player1;\\r\\n        Player player2;\\r\\n        uint256 currentTurn;\\r\\n        Attacker attacker;\\r\\n        TurnHalves turnHalves;\\r\\n    }\\r\\n\\r\\n    //playerAddr\\r\\n    //deckId = Id of deck\\r\\n    //hand = keeps track of current player's stats (such as health)\\r\\n    //totalSupportCardIds = all IDs of support cards\\r\\n    //playedCardCount = number of cards played already\\r\\n    struct Player {\\r\\n        address playerAddr;\\r\\n        uint256 deckId;\\r\\n        Hand hand;\\r\\n        uint256[60] totalSupportCardIds;\\r\\n        uint256 playedCardCount;\\r\\n    }\\r\\n\\r\\n    //health - health of player's battle card\\r\\n    // battleCardId = card id of player\\r\\n    // currentBCstats = all stats of the player's battle cards currently\\r\\n    // supportCardInHandIds = IDs of the support cards in your current hand\\r\\n    //                  the amount of support cards a player can play is determined by intelligence\\r\\n    // tableSupportCardStats = Number of support cards that are currently played on the table\\r\\n    // currentSuportCards = cards on the table, based on which turn ago they were played\\r\\n    //                      Notice that the number of turns is limited by _refreshTurn\\r\\n    struct Hand {\\r\\n        int256 health;\\r\\n        uint256 battleCardId;\\r\\n        CurrentBattleCardStats currentBCstats;\\r\\n        uint256[_max_inte] supportCardInHandIds;\\r\\n        uint256 tableSupportCardStats;\\r\\n        TableSupportCardStats[_max_cards_on_table] tableSupportCards;\\r\\n    }\\r\\n    //spd, inte, def, atk, sAtk, sDef - Current stats of battle card (with powerups included)\\r\\n    //Each param can go into the negatives\\r\\n    struct CurrentBattleCardStats {\\r\\n        int256 spd;\\r\\n        uint256 inte;\\r\\n        int256 def;\\r\\n        int256 atk;\\r\\n        int256 sAtk;\\r\\n        int256 sDef;\\r\\n    }\\r\\n\\r\\n    //links supportCardID with effectMany\\r\\n    struct TableSupportCardStats {\\r\\n        uint256 supportCardId;\\r\\n        PepemonCardOracle.EffectMany effectMany;\\r\\n    }\\r\\n\\r\\n    uint256 private _nextBattleId;\\r\\n\\r\\n    bool private _allowBattleAgainstOneself;\\r\\n\\r\\n    PepemonCardOracle private _cardContract;\\r\\n    PepemonCardDeck private _deckContract;\\r\\n    ChainLinkRngOracle private _randNrGenContract;\\r\\n\\r\\n    constructor(\\r\\n        address cardOracleAddress,\\r\\n        address deckOracleAddress,\\r\\n        address randOracleAddress\\r\\n    ) {\\r\\n        _cardContract = PepemonCardOracle(cardOracleAddress);\\r\\n        _deckContract = PepemonCardDeck(deckOracleAddress);\\r\\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\\r\\n        _nextBattleId = 1;\\r\\n        _allowBattleAgainstOneself = false;\\r\\n    }\\r\\n\\r\\n    function setCardContractAddress(address cardOracleAddress) public onlyAdmin {\\r\\n        _cardContract = PepemonCardOracle(cardOracleAddress);\\r\\n    }\\r\\n\\r\\n    function setBattleContractAddress(address deckOracleAddress) public onlyAdmin {\\r\\n        _deckContract = PepemonCardDeck(deckOracleAddress);\\r\\n    }\\r\\n\\r\\n    function setRandNrGenContractAddress(address randOracleAddress) public onlyAdmin {\\r\\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\\r\\n    }\\r\\n\\r\\n    function setAllowBattleAgainstOneself(bool allow) public onlyAdmin {\\r\\n        _allowBattleAgainstOneself = allow;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create battle\\r\\n     * @param p1Addr address player1\\r\\n     * @param p1DeckId uint256\\r\\n     * @param p2Addr address player2\\r\\n     * @param p2DeckId uint256\\r\\n     */\\r\\n    function createBattle(\\r\\n        address p1Addr,\\r\\n        uint256 p1DeckId,\\r\\n        address p2Addr,\\r\\n        uint256 p2DeckId\\r\\n    ) public onlyAdmin returns (Battle memory, uint256 battleId)  {\\r\\n        require(_allowBattleAgainstOneself || p1Addr != p2Addr, \\\"PepemonBattle: Cannot battle yourself\\\");\\r\\n\\r\\n        (uint256 p1BattleCardId, ) = _deckContract.decks(p1DeckId);\\r\\n        (uint256 p2BattleCardId, ) = _deckContract.decks(p2DeckId);\\r\\n\\r\\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(p1BattleCardId);\\r\\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(p2BattleCardId);\\r\\n\\r\\n        Battle memory newBattle;\\r\\n        // Initiate battle ID\\r\\n        newBattle.battleId = _nextBattleId;\\r\\n        // Initiate player1\\r\\n        newBattle.player1.hand.health = int256(p1BattleCard.hp);\\r\\n        newBattle.player1.hand.battleCardId = p1BattleCardId;\\r\\n        newBattle.player1.playerAddr = p1Addr;\\r\\n        newBattle.player1.deckId = p1DeckId;\\r\\n        // Initiate player2\\r\\n        newBattle.player2.hand.health = int256(p2BattleCard.hp);\\r\\n        newBattle.player2.hand.battleCardId = p2BattleCardId;\\r\\n        newBattle.player2.playerAddr = p2Addr;\\r\\n        newBattle.player2.deckId = p2DeckId;\\r\\n        // Set the RNG seed\\r\\n        battleIdRNGSeed[_nextBattleId] = _randSeed(newBattle);\\r\\n\\r\\n        //Emit event\\r\\n        emit BattleCreated(p1Addr, p2Addr, _nextBattleId, p1DeckId, p2DeckId);\\r\\n        return (newBattle, _nextBattleId++);\\r\\n    }\\r\\n\\r\\n    function goForBattle(Battle memory battle) public view returns (Battle memory, address winner) {\\r\\n\\r\\n        //Initialize battle by starting the first turn\\r\\n        battle = goForNewTurn(battle);\\r\\n        address winnerAddr;\\r\\n        // Battle goes!\\r\\n        while (true) {\\r\\n            // Resolve attacker in the current turn\\r\\n            battle = resolveAttacker(battle);\\r\\n            // Fight\\r\\n            console.log(\\\"goForBattle battle.currentTurn\\\", battle.currentTurn);\\r\\n            console.log(\\\"goForBattle (before fight) battle.player1.hand.health & battle.player2.hand.health:\\\");\\r\\n            console.logInt(battle.player1.hand.health);\\r\\n            console.logInt(battle.player2.hand.health);\\r\\n            battle = fight(battle);\\r\\n            console.log(\\\"goForBattle (after fight) battle.player1.hand.health & battle.player2.hand.health:\\\");\\r\\n            console.logInt(battle.player1.hand.health);\\r\\n            console.logInt(battle.player2.hand.health);\\r\\n\\r\\n            // Check if battle ended\\r\\n            (bool isEnded, address win) = checkIfBattleEnded(battle);\\r\\n            if (isEnded) {\\r\\n                winnerAddr = win;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            // Resolve turn halves\\r\\n            battle = updateTurnInfo(battle);\\r\\n        }\\r\\n        return (battle, winnerAddr);\\r\\n    }\\r\\n\\r\\n    //If currently in first half -> go to second half\\r\\n    //If currently in second half -> make a new turn\\r\\n    function updateTurnInfo(Battle memory battle) internal view returns (Battle memory) {\\r\\n        // If the current half is first, go over second half\\r\\n        // or go over next turn\\r\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\r\\n            battle.turnHalves = TurnHalves.SECOND_HALF;\\r\\n        } else {\\r\\n            battle = goForNewTurn(battle);\\r\\n        }\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    //Things this function does:\\r\\n    //Reset both players hand infos back to base stats (stats with no support card powerups)\\r\\n    //Check if support cards need to be scrambled and redealt\\r\\n    //Redeal support cards if necessary\\r\\n    //Calculate support card's power\\r\\n    //Finally, draw Pepemon's intelligence number of cards.\\r\\n    function goForNewTurn(Battle memory battle) internal view returns (Battle memory) {\\r\\n        Player memory player1 = battle.player1;\\r\\n        Player memory player2 = battle.player2;\\r\\n\\r\\n        // Get base battle card stats (stats without any powerups)\\r\\n        PepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(\\r\\n            player1.hand.battleCardId\\r\\n        );\\r\\n        PepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(\\r\\n            player2.hand.battleCardId\\r\\n        );\\r\\n\\r\\n        //Reset both players' hand infos to base stats\\r\\n        player1.hand.currentBCstats = getCardStats(p1BattleCard);\\r\\n        player2.hand.currentBCstats = getCardStats(p2BattleCard);\\r\\n\\r\\n        uint256 p1SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player1.deckId);\\r\\n        uint256 p2SupportCardIdsLength = _deckContract.getSupportCardCountInDeck(player2.deckId);\\r\\n\\r\\n        //Refresh cards every 5 turns\\r\\n        bool isRefreshTurn = (battle.currentTurn % _refreshTurn == 0);\\r\\n\\r\\n        if (isRefreshTurn) {\\r\\n            //Need to refresh decks\\r\\n\\r\\n            // Shuffle player1 support cards\\r\\n            //Create a pseudorandom seed and shuffle the cards \\r\\n            uint[] memory scrambled = _deckContract.shuffleDeck(player1.deckId, // tbd: use in-place shuffling\\r\\n                _randMod(\\r\\n                    69, battle\\r\\n                )\\r\\n            );\\r\\n            //Copy back scrambled cards to original list\\r\\n            for (uint i = 0 ; i < p1SupportCardIdsLength; i++){\\r\\n                player1.totalSupportCardIds[i]=scrambled[i];\\r\\n                console.log(\\\"player1.totalSupportCardIds[i]=\\\", player1.totalSupportCardIds[i]);\\r\\n            }\\r\\n            \\r\\n            //Reset played card count\\r\\n            player1.playedCardCount = 0;\\r\\n\\r\\n            //Shuffling player 2 support cards\\r\\n            //Create a pseudorandom seed and shuffle the cards\\r\\n            uint[] memory scrambled2 = _deckContract.shuffleDeck(player2.deckId, \\r\\n                _randMod(\\r\\n                    420, battle\\r\\n                )\\r\\n            );\\r\\n\\r\\n            //Copy the support cards back into the list\\r\\n            for (uint256 i = 0; i < p2SupportCardIdsLength; i++) {\\r\\n                player2.totalSupportCardIds[i]=scrambled2[i];\\r\\n                console.log(\\\"player2.totalSupportCardIds[i]=\\\", player2.totalSupportCardIds[i]);\\r\\n            }\\r\\n            \\r\\n            //Reset player2 played card counts\\r\\n            player2.playedCardCount = 0;\\r\\n        }\\r\\n        else \\r\\n        {\\r\\n            //Don't need to refresh cards now\\r\\n\\r\\n            // Get temp support info of previous turn's hands and calculate their effect for the new turn\\r\\n            player1.hand = calSupportCardsOnTable(player1.hand, player2.hand);\\r\\n            player2.hand = calSupportCardsOnTable(player2.hand, player1.hand);\\r\\n        }\\r\\n\\r\\n        // Draw player1 support cards for the new turn\\r\\n        for (uint256 i = 0; i < player1.hand.currentBCstats.inte; i++) {\\r\\n            player1.hand.supportCardInHandIds[i] = player1.totalSupportCardIds[(i + player1.playedCardCount) % p1SupportCardIdsLength];\\r\\n        }\\r\\n        player1.playedCardCount += player1.hand.currentBCstats.inte;\\r\\n\\r\\n        // Draw player2 support cards for the new turn\\r\\n        for (uint256 i = 0; i < player2.hand.currentBCstats.inte; i++) {\\r\\n            player2.hand.supportCardInHandIds[i] = player2.totalSupportCardIds[(i + player2.playedCardCount) % p2SupportCardIdsLength];\\r\\n        }\\r\\n        player2.playedCardCount += player2.hand.currentBCstats.inte;\\r\\n\\r\\n        //Update current battle info\\r\\n        battle.player1 = player1;\\r\\n        battle.player2 = player2;\\r\\n\\r\\n        // Increment current turn number of battle\\r\\n        battle.currentTurn++;\\r\\n\\r\\n        // Go for first half in turn\\r\\n        battle.turnHalves = TurnHalves.FIRST_HALF;\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    //This method calculates the battle card's stats after taking into consideration all the support cards currently being played\\r\\n    function calSupportCardsOnTable(Hand memory hand, Hand memory oppHand) internal pure returns (Hand memory) {\\r\\n        for (uint256 i = 0; i < hand.tableSupportCardStats; i++) {\\r\\n            //Loop through every support card currently played\\r\\n\\r\\n            //Get the support card being considered now\\r\\n            TableSupportCardStats memory tableSupportCardStat = hand.tableSupportCards[i];\\r\\n            \\r\\n            //Get the effect of that support card\\r\\n            PepemonCardOracle.EffectMany memory effect = tableSupportCardStat.effectMany;\\r\\n            \\r\\n            //If there is at least 1 turn left\\r\\n            if (effect.numTurns >= 1) {\\r\\n\\r\\n                //If the effect is for me\\r\\n                if (effect.effectFor == PepemonCardOracle.EffectFor.ME) {\\r\\n                    // Change my card's stats using that support card\\r\\n                    // Currently effectTo of EffectMany can be ATTACK, DEFENSE, SPEED and INTELLIGENCE\\r\\n                    //Get the statistic changed and update it \\r\\n                    //Intelligence can't go into the negatives\\r\\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\\r\\n                        hand.currentBCstats.atk += effect.power;\\r\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\\r\\n                        hand.currentBCstats.def += effect.power;\\r\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\\r\\n                        hand.currentBCstats.spd += effect.power;\\r\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\\r\\n                        int temp;\\r\\n                        temp = int256(hand.currentBCstats.inte) + effect.power;\\r\\n                        hand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\r\\n                    }\\r\\n                } else {\\r\\n                    //The card affects the opp's pepemon\\r\\n                    //Update card stats of the opp's pepemon\\r\\n                    //Make sure INT stat can't go below zero\\r\\n                    if (effect.effectTo == PepemonCardOracle.EffectTo.ATTACK) {\\r\\n                        oppHand.currentBCstats.atk += effect.power;\\r\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.DEFENSE) {\\r\\n                        oppHand.currentBCstats.def += effect.power;\\r\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.SPEED) {\\r\\n                        oppHand.currentBCstats.spd += effect.power;\\r\\n                    } else if (effect.effectTo == PepemonCardOracle.EffectTo.INTELLIGENCE) {\\r\\n                        int temp;\\r\\n                        temp = int256(oppHand.currentBCstats.inte) + effect.power;\\r\\n                        oppHand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\r\\n                    }\\r\\n                }\\r\\n                // Decrease effect numTurns by 1 since 1 turn has already passed\\r\\n                effect.numTurns--;\\r\\n                // Delete this one from tableSupportCardStat if all turns of the card have been exhausted\\r\\n                if (effect.numTurns == 0) {\\r\\n                    if (i < hand.tableSupportCardStats - 1) {\\r\\n                        hand.tableSupportCards[i] = hand.tableSupportCards[hand.tableSupportCardStats - 1];\\r\\n                    }\\r\\n                    delete hand.tableSupportCards[hand.tableSupportCardStats - 1];\\r\\n                    hand.tableSupportCardStats--;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return hand;\\r\\n    }\\r\\n\\r\\n    //This method gets the current attacker\\r\\n    function resolveAttacker(Battle memory battle) internal view returns (Battle memory) {\\r\\n        CurrentBattleCardStats memory p1CurrentBattleCardStats = battle.player1.hand.currentBCstats;\\r\\n        CurrentBattleCardStats memory p2CurrentBattleCardStats = battle.player2.hand.currentBCstats;\\r\\n\\r\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\r\\n            //Player with highest speed card goes first\\r\\n            if (p1CurrentBattleCardStats.spd > p2CurrentBattleCardStats.spd) {\\r\\n                battle.attacker = Attacker.PLAYER_ONE;\\r\\n            } else if (p1CurrentBattleCardStats.spd < p2CurrentBattleCardStats.spd) {\\r\\n                battle.attacker = Attacker.PLAYER_TWO;\\r\\n            } else {\\r\\n                //Tiebreak: intelligence\\r\\n                if (p1CurrentBattleCardStats.inte > p2CurrentBattleCardStats.inte) {\\r\\n                    battle.attacker = Attacker.PLAYER_ONE;\\r\\n                } else if (p1CurrentBattleCardStats.inte < p2CurrentBattleCardStats.inte) {\\r\\n                    battle.attacker = Attacker.PLAYER_TWO;\\r\\n                } else {\\r\\n                    //Second tiebreak: use RNG\\r\\n                    uint256 rand = _randMod(69420, battle) % 2;\\r\\n                    battle.attacker = (rand == 0 ? Attacker.PLAYER_ONE : Attacker.PLAYER_TWO);\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            //For second half, switch players\\r\\n            battle.attacker = (battle.attacker == Attacker.PLAYER_ONE ? Attacker.PLAYER_TWO : Attacker.PLAYER_ONE);\\r\\n        }\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    //Create a random seed, using the chainlink number and the addresses of the combatants as entropy\\r\\n    function _randSeed(Battle memory battle) private view returns (uint256) {\\r\\n        //Get the chainlink random number\\r\\n        uint chainlinkNumber = _randNrGenContract.getRandomNumber();\\r\\n        //Create a new pseudorandom number using the seed and battle info as entropy\\r\\n        //This makes sure the RNG returns a different number every time\\r\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(block.number, chainlinkNumber, battle.player1.playerAddr, battle.player2.playerAddr)));\\r\\n        return randomNumber;\\r\\n    }\\r\\n\\r\\n    function _randMod(uint256 seed, Battle memory battle) private view returns (uint256) {\\r\\n        console.log(\\\"_randMod seed\\\", seed);\\r\\n        console.log(\\\"_randMod battle.currentTurn\\\", battle.currentTurn);\\r\\n        console.log(\\\"_randMod battleIdRNGSeed[battle.battleId]\\\", battleIdRNGSeed[battle.battleId]);\\r\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(seed, battle.currentTurn, battleIdRNGSeed[battle.battleId])));\\r\\n        console.log(\\\"_randMod randomNumber\\\", randomNumber);\\r\\n        return randomNumber;\\r\\n    }\\r\\n\\r\\n    //Check if battle ended by looking at player's health\\r\\n    function checkIfBattleEnded(Battle memory battle) public pure returns (bool, address) {\\r\\n        if (battle.player1.hand.health <= 0) {\\r\\n            return (true, battle.player1.playerAddr);\\r\\n        } else if (battle.player2.hand.health <= 0) {\\r\\n            return (true, battle.player2.playerAddr);\\r\\n        } else {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fight(Battle memory battle) public view returns (Battle memory) {\\r\\n        Hand memory atkHand;\\r\\n        Hand memory defHand;\\r\\n        console.log(\\\"fight battle.attacker == Attacker.PLAYER_ONE: \\\", battle.attacker == Attacker.PLAYER_ONE);\\r\\n        //Get attacker and defender for current turn\\r\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\r\\n            atkHand = battle.player1.hand;\\r\\n            defHand = battle.player2.hand;\\r\\n        } else {\\r\\n            atkHand = battle.player2.hand;\\r\\n            defHand = battle.player1.hand;\\r\\n        }\\r\\n\\r\\n        (atkHand, defHand) = calSupportCardsInHand(atkHand, defHand);\\r\\n        console.log(\\\"fight atkHand.currentBCstats.atk:\\\", uint256(atkHand.currentBCstats.atk));\\r\\n        console.log(\\\"fight defHand.currentBCstats.def=\\\", uint256(defHand.currentBCstats.def));\\r\\n\\r\\n        // Fight\\r\\n\\r\\n        //Calculate HP loss for defending player\\r\\n        if (atkHand.currentBCstats.atk > defHand.currentBCstats.def) {\\r\\n            //If attacker's attack > defender's defense, find difference. That is the defending player's HP loss\\r\\n            defHand.health -= (atkHand.currentBCstats.atk - defHand.currentBCstats.def);\\r\\n        } else {\\r\\n            //Otherwise, defender loses 1 HP\\r\\n            defHand.health -= 1;\\r\\n        }\\r\\n\\r\\n        //Write updated info back into battle\\r\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\r\\n            battle.player1.hand = atkHand;\\r\\n            battle.player2.hand = defHand;\\r\\n        } else {\\r\\n            battle.player1.hand = defHand;\\r\\n            battle.player2.hand = atkHand;\\r\\n        }\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    \\r\\n    //We calculate the effect of every card in the player's hand\\r\\n    function calSupportCardsInHand(Hand memory atkHand, Hand memory defHand) public view returns (Hand memory, Hand memory) {\\r\\n        // If this card is included in player's hand, adds an additional power equal to the total of\\r\\n        // all normal offense/defense cards\\r\\n        bool isPower0CardIncluded = false;\\r\\n        // Total sum of normal support cards\\r\\n        int256 totalNormalPower = 0;\\r\\n        // Cal attacker hand\\r\\n        for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n            //Loop through every card the attacker has in his hand\\r\\n            uint256 id = atkHand.supportCardInHandIds[i];\\r\\n\\r\\n            //Get the support cardStats\\r\\n            PepemonCardOracle.SupportCardStats memory cardStats = _cardContract.getSupportCardById(id);\\r\\n            if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.OFFENSE) {\\r\\n                // Card type is OFFENSE.\\r\\n                // Calc effects of EffectOne array\\r\\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\\r\\n                    \\r\\n                    //Checks if that support card is triggered and by how much it is triggered by\\r\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\r\\n                    if (isTriggered) {\\r\\n                        //use triggeredPower if triggered\\r\\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\r\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\r\\n                    }\\r\\n                    else{\\r\\n                        //use basePower if not\\r\\n                        atkHand.currentBCstats.atk += effectOne.basePower;\\r\\n                        totalNormalPower += effectOne.basePower;\\r\\n                    }\\r\\n                }\\r\\n            } else if (cardStats.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\r\\n                // Card type is STRONG OFFENSE.\\r\\n\\r\\n                //Make sure unstackable cards can't be stacked\\r\\n                if (cardStats.unstackable) {\\r\\n                    bool isNew = true;\\r\\n                    // Check if card is new to previous cards\\r\\n                    for (uint256 j = 0; j < i; j++) {\\r\\n                        if (id == atkHand.supportCardInHandIds[j]) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    if (!isNew) {\\r\\n                        //If it isn't - skip card\\r\\n                        continue;\\r\\n                    }\\r\\n                    // Check if card is new to temp support info cards\\r\\n                    for (uint256 j = 0; j < atkHand.tableSupportCardStats; j++) {\\r\\n                        if (id == atkHand.tableSupportCards[j].supportCardId) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    if (!isNew) {\\r\\n                        //If it isn't - skip card\\r\\n                        continue;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Calc effects of EffectOne array\\r\\n                for (uint256 j = 0; j < cardStats.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = cardStats.effectOnes[j];\\r\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\r\\n                    if (isTriggered) {\\r\\n                        //If triggered: use triggered power\\r\\n                        if (multiplier > 1) {\\r\\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\r\\n                        } else {\\r\\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_ATTACK) {\\r\\n                                // If it's a use Special Attack instead of Attack card\\r\\n                                atkHand.currentBCstats.atk = atkHand.currentBCstats.sAtk;\\r\\n                                continue;\\r\\n                            } else if (effectOne.triggeredPower == 0) {\\r\\n                                // We have a card that says ATK is increased by amount\\r\\n                                // Equal to the total of all offense cards in the current turn\\r\\n                                isPower0CardIncluded = true;\\r\\n                                continue;\\r\\n                            }\\r\\n                            atkHand.currentBCstats.atk += effectOne.triggeredPower;\\r\\n                        }\\r\\n                    }\\r\\n                    else{\\r\\n                        //If not triggered: use base power instead\\r\\n                        atkHand.currentBCstats.atk += effectOne.basePower;\\r\\n                        totalNormalPower += effectOne.basePower;\\r\\n                    }\\r\\n                }\\r\\n                // If card lasts for >1 turns\\r\\n                if (cardStats.effectMany.power != 0) {\\r\\n                    // Add card  to table if <5 on table currently\\r\\n                    if (atkHand.tableSupportCardStats < 5) {\\r\\n                        atkHand.tableSupportCards[atkHand.tableSupportCardStats++] = TableSupportCardStats({\\r\\n                            supportCardId: id,\\r\\n                            effectMany: cardStats.effectMany\\r\\n                        });\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                // Other card type is ignored.\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n        if (isPower0CardIncluded) {\\r\\n            //If we have a card that says ATK is increased by amount equal to total of all offense cards\\r\\n            atkHand.currentBCstats.atk += totalNormalPower;\\r\\n        }\\r\\n        // Cal defense hand\\r\\n        isPower0CardIncluded = false;\\r\\n        totalNormalPower = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\r\\n            uint256 id = defHand.supportCardInHandIds[i];\\r\\n            PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(id);\\r\\n            if (card.supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\\r\\n                // Card type is DEFENSE\\r\\n                // Calc effects of EffectOne array\\r\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\r\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\r\\n                    if (isTriggered) {\\r\\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(multiplier);\\r\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\r\\n                    }\\r\\n                    else{\\r\\n                        //If not triggered, use base power instead\\r\\n                        defHand.currentBCstats.def += effectOne.basePower;\\r\\n                        totalNormalPower += effectOne.basePower;\\r\\n                    }\\r\\n                }\\r\\n            } else if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_DEFENSE) {\\r\\n                // Card type is STRONG DEFENSE\\r\\n                if (card.unstackable) {\\r\\n                    bool isNew = true;\\r\\n                    // Check if card is new to previous cards\\r\\n                    for (uint256 j = 0; j < i; j++) {\\r\\n                        if (id == defHand.supportCardInHandIds[j]) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    // Check if card is new to temp support info cards\\r\\n                    for (uint256 j = 0; j < defHand.tableSupportCardStats; j++) {\\r\\n                        if (id == defHand.tableSupportCards[j].supportCardId) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    if (!isNew) {\\r\\n                        continue;\\r\\n                    }\\r\\n                }\\r\\n                // Calc effects of EffectOne array\\r\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\r\\n                    (bool isTriggered, uint256 num) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\r\\n                    if (isTriggered) {\\r\\n                        if (num > 0) {\\r\\n                            defHand.currentBCstats.def += effectOne.triggeredPower * int256(num);\\r\\n                        } else {\\r\\n                            if (effectOne.effectTo == PepemonCardOracle.EffectTo.STRONG_DEFENSE) {\\r\\n                                defHand.currentBCstats.def = defHand.currentBCstats.sDef;\\r\\n                                continue;\\r\\n                            } else if (effectOne.triggeredPower == 0) {\\r\\n                                // Equal to the total of all defense cards in the current turn\\r\\n                                isPower0CardIncluded = true;\\r\\n                                continue;\\r\\n                            }\\r\\n                            defHand.currentBCstats.def += effectOne.triggeredPower;\\r\\n                        }\\r\\n                    }\\r\\n                    else{\\r\\n                        //If not triggered, use base stats instead\\r\\n                        defHand.currentBCstats.def += effectOne.basePower;\\r\\n                        totalNormalPower += effectOne.basePower;\\r\\n                    }\\r\\n                }\\r\\n                // If card effect lasts >1 turn\\r\\n                if (card.effectMany.power != 0) {\\r\\n                    // Add card to table if there are <5 cards on table right now\\r\\n                    if (defHand.tableSupportCardStats < 5) {\\r\\n                        defHand.tableSupportCards[defHand.tableSupportCardStats++] = TableSupportCardStats({\\r\\n                            supportCardId: id,\\r\\n                            effectMany: card.effectMany\\r\\n                        });\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                // Other card type is ignored.\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n        if (isPower0CardIncluded) {\\r\\n            //If a \\\"add total of defense\\\" card is included\\r\\n            defHand.currentBCstats.def += totalNormalPower;\\r\\n        }\\r\\n\\r\\n        return (atkHand, defHand);\\r\\n    }\\r\\n\\r\\n    //Strip important game information (like speed, intelligence, etc.) from battle card\\r\\n    function getCardStats(PepemonCardOracle.BattleCardStats memory x) internal pure returns (CurrentBattleCardStats memory){\\r\\n        CurrentBattleCardStats memory ret;\\r\\n\\r\\n        ret.spd = int(x.spd);\\r\\n        ret.inte = x.inte;\\r\\n        ret.def = int(x.def);\\r\\n        ret.atk = int(x.atk);\\r\\n        ret.sAtk = int(x.sAtk);\\r\\n        ret.sDef = int(x.sDef);\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n//Checks if the requirements are satisfied for a certain code\\r\\n//returns bool - is satisfied?\\r\\n// uint - the multiplier for the card's attack power\\r\\n// for most cases multiplier is 1\\r\\nfunction checkReqCode(\\r\\n        Hand memory atkHand,\\r\\n        Hand memory defHand,\\r\\n        uint256 reqCode,\\r\\n        bool isAttacker\\r\\n    ) internal view returns (bool, uint256) {\\r\\n        bool isTriggered = false;\\r\\n        uint256 multiplier = 0;\\r\\n        if (reqCode == 0) {\\r\\n            // No requirement\\r\\n            isTriggered = true;\\r\\n            multiplier = 1;\\r\\n        } else if (reqCode == 1) {\\r\\n            // Intelligence of offense pepemon <= 5.\\r\\n            isTriggered = (atkHand.currentBCstats.inte <= 5 );\\r\\n            multiplier = 1;\\r\\n\\r\\n        } else if (reqCode == 2) {\\r\\n            // Number of defense cards of defense pepemon is 0.\\r\\n            isTriggered = true;\\r\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardType supportCardType = _cardContract.getSupportCardTypeById(\\r\\n                    defHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (supportCardType == PepemonCardOracle.SupportCardType.DEFENSE) {\\r\\n                    isTriggered = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            multiplier = 1;\\r\\n        } else if (reqCode == 3) {\\r\\n            // Each +2 offense cards of offense pepemon.\\r\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    atkHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\r\\n                    continue;\\r\\n                }\\r\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\r\\n                    if (effectOne.basePower == 2) {\\r\\n                        multiplier++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            isTriggered = (multiplier > 0 );\\r\\n        } else if (reqCode == 4) {\\r\\n            // Each +3 offense cards of offense pepemon.\\r\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    atkHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\r\\n                    continue;\\r\\n                }\\r\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\r\\n                    if (effectOne.basePower == 3) {\\r\\n                        multiplier++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            isTriggered = (multiplier > 0 );\\r\\n        } else if (reqCode == 5) {\\r\\n            // Each offense card of offense pepemon.\\r\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    atkHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.OFFENSE) {\\r\\n                    continue;\\r\\n                }\\r\\n                multiplier++;\\r\\n            }\\r\\n            isTriggered = (multiplier > 0 );\\r\\n        } else if (reqCode == 6) {\\r\\n            // Each +3 defense card of defense pepemon.\\r\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    defHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\\r\\n                    continue;\\r\\n                }\\r\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\r\\n                    if (effectOne.basePower == 3) {\\r\\n                        multiplier++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            isTriggered = (multiplier > 0 );\\r\\n        } else if (reqCode == 7) {\\r\\n            // Each +4 defense card of defense pepemon.\\r\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    defHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType != PepemonCardOracle.SupportCardType.DEFENSE) {\\r\\n                    continue;\\r\\n                }\\r\\n                for (uint256 j = 0; j < card.effectOnes.length; j++) {\\r\\n                    PepemonCardOracle.EffectOne memory effectOne = card.effectOnes[j];\\r\\n                    if (effectOne.basePower == 4) {\\r\\n                        multiplier++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            isTriggered = (multiplier > 0 );\\r\\n        } else if (reqCode == 8) {\\r\\n            // Intelligence of defense pepemon <= 5.\\r\\n            isTriggered = (defHand.currentBCstats.inte <= 5 );\\r\\n            multiplier = 1;\\r\\n        } else if (reqCode == 9) {\\r\\n            // Intelligence of defense pepemon >= 7.\\r\\n            isTriggered = (defHand.currentBCstats.inte >= 7 );\\r\\n            multiplier = 1;\\r\\n        } else if (reqCode == 10) {\\r\\n            // Offense pepemon is using strong attack\\r\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n                PepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    atkHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType == PepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\r\\n                    isTriggered = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            multiplier = 1;\\r\\n        } else if (reqCode == 11) {\\r\\n            // The current HP is less than 50% of max HP.\\r\\n            if (isAttacker) {\\r\\n                isTriggered = (\\r\\n                    atkHand.health * 2 <= int256(_cardContract.getBattleCardById(atkHand.battleCardId).hp)\\r\\n                );\\r\\n            } else {\\r\\n                isTriggered = (\\r\\n                    defHand.health * 2 <= int256(_cardContract.getBattleCardById(defHand.battleCardId).hp)\\r\\n\\r\\n                );\\r\\n            }\\r\\n            multiplier = 1;\\r\\n        }\\r\\n        return (isTriggered, multiplier);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x73bbc21da3419067f7ca6a2cb69e7f57c8cf8d7140cf605a38f8f5615e026a49\",\"license\":\"MIT\"},\"contracts/PepemonCardDeck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n//pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./PepemonFactory.sol\\\";\\r\\nimport \\\"./PepemonCardOracle.sol\\\";\\r\\nimport \\\"./lib/Arrays.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Deck {\\r\\n        uint256 battleCardId;\\r\\n        uint256 supportCardCount;\\r\\n        mapping(uint256 => SupportCardType) supportCardTypes;\\r\\n        uint256[] supportCardTypeList;\\r\\n    }\\r\\n\\r\\n    struct SupportCardType {\\r\\n        uint256 supportCardId;\\r\\n        uint256 count;\\r\\n        uint256 pointer;\\r\\n        bool isEntity;\\r\\n    }\\r\\n\\r\\n    struct SupportCardRequest {\\r\\n        uint256 supportCardId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    uint256 public MAX_SUPPORT_CARDS;\\r\\n    uint256 public MIN_SUPPORT_CARDS;\\r\\n\\r\\n    uint256 nextDeckId;\\r\\n    address public battleCardAddress;\\r\\n    address public supportCardAddress;\\r\\n\\r\\n    mapping(uint256 => Deck) public decks;\\r\\n    mapping(address => uint256[]) public playerToDecks;\\r\\n\\r\\n    constructor() ERC721(\\\"Pepedeck\\\", \\\"Pepedeck\\\") {\\r\\n        nextDeckId = 1;\\r\\n        MAX_SUPPORT_CARDS = 60;\\r\\n        MIN_SUPPORT_CARDS = 40;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override supportInterface .\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC1155Receiver)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier sendersDeck(uint256 _deckId) {\\r\\n        require(msg.sender == ownerOf(_deckId), \\\"PepemonCardDeck: Not your deck\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // PUBLIC METHODS\\r\\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\\r\\n        battleCardAddress = _battleCardAddress;\\r\\n    }\\r\\n\\r\\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\\r\\n        supportCardAddress = _supportCardAddress;\\r\\n    }\\r\\n\\r\\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\\r\\n        MAX_SUPPORT_CARDS = _maxSupportCards;\\r\\n    }\\r\\n\\r\\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\\r\\n        MIN_SUPPORT_CARDS = _minSupportCards;\\r\\n    }\\r\\n\\r\\n    function createDeck() public {\\r\\n        _safeMint(msg.sender, nextDeckId);\\r\\n        playerToDecks[msg.sender].push(nextDeckId);\\r\\n        nextDeckId = nextDeckId.add(1);\\r\\n    }\\r\\n\\r\\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\\r\\n        require(\\r\\n            PepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\\r\\n            \\\"PepemonCardDeck: Don't own battle card\\\"\\r\\n        );\\r\\n\\r\\n        require(battleCardId != decks[deckId].battleCardId, \\\"PepemonCardDeck: Card already in deck\\\");\\r\\n\\r\\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\\r\\n        decks[deckId].battleCardId = battleCardId;\\r\\n\\r\\n        PepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \\\"\\\");\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\\r\\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\\r\\n\\r\\n        decks[_deckId].battleCardId = 0;\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\\r\\n        for (uint256 i = 0; i < supportCards.length; i++) {\\r\\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\\r\\n        for (uint256 i = 0; i < _supportCards.length; i++) {\\r\\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // INTERNALS\\r\\n    function addSupportCardToDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \\\"PepemonCardDeck: Deck overflow\\\");\\r\\n        require(\\r\\n            PepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\\r\\n            \\\"PepemonCardDeck: You don't have enough of this card\\\"\\r\\n        );\\r\\n\\r\\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\\r\\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\\r\\n                supportCardId: _supportCardId,\\r\\n                count: _amount,\\r\\n                pointer: decks[_deckId].supportCardTypeList.length,\\r\\n                isEntity: true\\r\\n            });\\r\\n\\r\\n            // Prepend the ID to the list\\r\\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\\r\\n        } else {\\r\\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n            supportCard.count = supportCard.count.add(_amount);\\r\\n        }\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\\r\\n\\r\\n        PepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function removeSupportCardFromDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        supportCardList.count = supportCardList.count.sub(_amount);\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\\r\\n\\r\\n        if (supportCardList.count == 0) {\\r\\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\\r\\n\\r\\n            // update the pointer of the item to be swapped\\r\\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\\r\\n\\r\\n            // swap the last item of the list with the one to be deleted\\r\\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypeList.pop();\\r\\n\\r\\n            delete decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        }\\r\\n\\r\\n        PepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\\r\\n        if (_battleCardId != 0) {\\r\\n            PepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // VIEWS\\r\\n    function getDeckCount(address player) public view returns (uint256) {\\r\\n        return playerToDecks[player].length;\\r\\n    }\\r\\n\\r\\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\\r\\n        return decks[_deckId].battleCardId;\\r\\n    }\\r\\n\\r\\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n\\r\\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            supportCardTypes[i] = deck.supportCardTypeList[i];\\r\\n        }\\r\\n\\r\\n        return supportCardTypes;\\r\\n    }\\r\\n\\r\\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\\r\\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\\r\\n    }\\r\\n\\r\\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\\r\\n        return decks[deckId].supportCardCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns array of support cards for a deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\\r\\n        uint256 idx = 0;\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            uint256 supportCardId = deck.supportCardTypeList[i];\\r\\n            for (uint256 j = 0; j < deck.supportCardTypes[supportCardId].count; j++) {\\r\\n                supportCards[idx++] = supportCardId;\\r\\n            }\\r\\n        }\\r\\n        return supportCards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Shuffles deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\\r\\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\\r\\n        console.log(\\\"shuffleDeck seed=\\\", _seed);\\r\\n        return Arrays.shuffle(totalSupportCards, _seed);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb6040eb206fdb23fa57d1adb915793bae8ade0f9785ae5e346330d440504b0cd\",\"license\":\"MIT\"},\"contracts/PepemonCardOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/AdminRole.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\\n**/\\ncontract PepemonCardOracle is AdminRole {\\n    enum BattleCardType {\\n        FIRE,\\n        GRASS,\\n        WATER,\\n        LIGHTNING,\\n        WIND,\\n        POISON,\\n        GHOST,\\n        FAIRY,\\n        EARTH,\\n        UNKNOWN,\\n        NONE\\n    }\\n\\n    enum SupportCardType {\\n        OFFENSE,\\n        STRONG_OFFENSE,\\n        DEFENSE,\\n        STRONG_DEFENSE\\n    }\\n\\n    enum EffectTo {\\n        ATTACK,\\n        STRONG_ATTACK,\\n        DEFENSE,\\n        STRONG_DEFENSE,\\n        SPEED,\\n        INTELLIGENCE\\n    }\\n\\n    enum EffectFor {\\n        ME,\\n        ENEMY\\n    }\\n\\n    struct BattleCardStats {\\n        uint256 battleCardId;\\n        BattleCardType battleCardType;\\n        string name;\\n        uint256 hp; // hitpoints\\n        uint256 spd; // speed\\n        uint256 inte; // intelligence\\n        uint256 def; // defense\\n        uint256 atk; // attack\\n        uint256 sAtk; // special attack\\n        uint256 sDef; // special defense\\n    }\\n\\n    struct SupportCardStats {\\n        uint256 supportCardId;\\n        SupportCardType supportCardType;\\n        string name;\\n        EffectOne[] effectOnes;\\n        EffectMany effectMany;\\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\\n        bool unstackable;\\n        // This property is for EffectMany now.\\n        // If true, assume the card is already in effect\\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\\n        bool unresettable;\\n    }\\n\\n    struct EffectOne {\\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\\n        \\n        //basePower = power if req not met\\n        int256 basePower;\\n\\n        //triggeredPower = power if req met\\n        int256 triggeredPower;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    struct EffectMany {\\n        int256 power;\\n        uint256 numTurns;\\n        EffectTo effectTo;\\n        EffectFor effectFor;\\n        uint256 reqCode; //requirement code\\n    }\\n\\n    mapping(uint256 => BattleCardStats) public battleCardStats;\\n    mapping(uint256 => SupportCardStats) public supportCardStats;\\n\\n    event BattleCardCreated(address sender, uint256 cardId);\\n    event BattleCardUpdated(address sender, uint256 cardId);\\n    event SupportCardCreated(address sender, uint256 cardId);\\n    event SupportCardUpdated(address sender, uint256 cardId);\\n\\n    function addBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId == 0, \\\"PepemonCard: BattleCard already exists\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.battleCardId = cardData.battleCardId;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.hp = cardData.hp;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        console.log(\\\"addBattleCard:\\\", cardData.battleCardId);\\n        emit BattleCardCreated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function updateBattleCard(BattleCardStats memory cardData) public onlyAdmin {\\n        require(battleCardStats[cardData.battleCardId].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n\\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\\n        _card.hp = cardData.hp;\\n        _card.battleCardType = cardData.battleCardType;\\n        _card.name = cardData.name;\\n        _card.spd = cardData.spd;\\n        _card.inte = cardData.inte;\\n        _card.def = cardData.def;\\n        _card.atk = cardData.atk;\\n        _card.sDef = cardData.sDef;\\n        _card.sAtk = cardData.sAtk;\\n\\n        emit BattleCardUpdated(msg.sender, cardData.battleCardId);\\n    }\\n\\n    function getBattleCardById(uint256 _id) public view returns (BattleCardStats memory) {\\n        console.log(\\\"getBattleCardById:\\\", _id);\\n        require(battleCardStats[_id].battleCardId != 0, \\\"PepemonCard: BattleCard not found\\\");\\n        return battleCardStats[_id];\\n    }\\n\\n    function addSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId == 0, \\\"PepemonCard: SupportCard already exists\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        console.log(\\\"addSupportCard:\\\", cardData.supportCardId);\\n        emit SupportCardCreated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function updateSupportCard(SupportCardStats memory cardData) public onlyAdmin {\\n        require(supportCardStats[cardData.supportCardId].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n\\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\\n        _card.supportCardId = cardData.supportCardId;\\n        _card.supportCardType = cardData.supportCardType;\\n        _card.name = cardData.name;\\n        for (uint256 i = 0; i < cardData.effectOnes.length; i++) {\\n            _card.effectOnes.push(cardData.effectOnes[i]);\\n        }\\n        _card.effectMany = cardData.effectMany;\\n        _card.unstackable = cardData.unstackable;\\n        _card.unresettable = cardData.unresettable;\\n\\n        emit SupportCardUpdated(msg.sender, cardData.supportCardId);\\n    }\\n\\n    function getSupportCardById(uint256 _id) public view returns (SupportCardStats memory) {\\n        console.log(\\\"getSupportCardById:\\\", _id);\\n        require(supportCardStats[_id].supportCardId != 0, \\\"PepemonCard: SupportCard not found\\\");\\n        return supportCardStats[_id];\\n    }\\n\\n    /**\\n     * @dev Get supportCardType of supportCard\\n     * @param _id uint256\\n     */\\n    function getSupportCardTypeById(uint256 _id) public view returns (SupportCardType) {\\n        return getSupportCardById(_id).supportCardType;\\n    }\\n}\\n\",\"keccak256\":\"0x0b58ff08242ff03f3511c530af080f3d71e70889fad30c801c8a7b62fb80ef3c\",\"license\":\"MIT\"},\"contracts/PepemonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface PepemonFactory {\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _amount,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function setApprovalForAll(\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa411026e7e8c1b0c12e6b0eb13add41953eceebc433a1d52a2cfa299db1a72c6\",\"license\":\"MIT\"},\"contracts/PepemonMatchmaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./PepemonCardDeck.sol\\\";\\r\\nimport \\\"./lib/RewardPool.sol\\\";\\r\\nimport \\\"./lib/Elo.sol\\\";\\r\\nimport \\\"./PepemonCardOracle.sol\\\";\\r\\nimport \\\"./PepemonBattle.sol\\\";\\r\\n\\r\\ncontract PepemonMatchmaker is ERC1155Holder, ERC721Holder, Ownable {\\r\\n    event BattleFinished(address indexed winner, address indexed loser, uint256 battleId);\\r\\n\\r\\n    struct waitingDeckData {\\r\\n        uint256 deckId;\\r\\n        uint256 enterTimestamp;\\r\\n    }\\r\\n\\r\\n    address private _battleAddress;\\r\\n    address private _deckAddress;\\r\\n    address private _rewardPoolAddress;\\r\\n    bool private _allowBattleAgainstOneself;\\r\\n\\r\\n    uint256 private immutable _defaultRanking;\\r\\n    uint256 private _matchRange = 300;\\r\\n    uint256 private _matchRangePerMinute = 1;\\r\\n    uint256 private _kFactor = 16;\\r\\n\\r\\n    mapping(uint256 => uint256) internal _waitingDecksIndex; // _waitingDecksIndex[deckId] -> index of waitingDecks\\r\\n    mapping(uint256 => address) public deckOwner;\\r\\n    waitingDeckData[] public waitingDecks;\\r\\n\\r\\n    mapping(address => uint256) public playerRanking;\\r\\n\\r\\n    constructor (uint256 defaultRanking, address battleAddress, address deckAddress, address rewardPoolAddress) {\\r\\n        _defaultRanking = defaultRanking; // suggested: 2000\\r\\n        _battleAddress = battleAddress;\\r\\n        _deckAddress = deckAddress;\\r\\n        _rewardPoolAddress = rewardPoolAddress;\\r\\n        _allowBattleAgainstOneself = false;\\r\\n    }\\r\\n\\r\\n    function setAllowBattleAgainstOneself(bool allow) public onlyOwner {\\r\\n        _allowBattleAgainstOneself = allow;\\r\\n    }\\r\\n\\r\\n    function setDeckContractAddress(address deckContractAddress) public onlyOwner {\\r\\n        _deckAddress = deckContractAddress;\\r\\n    }\\r\\n\\r\\n    function setBattleContractAddress(address battleContractAddress) public onlyOwner {\\r\\n        _battleAddress = battleContractAddress;\\r\\n    }\\r\\n\\r\\n    function setRewardPoolAddress(address rewardPoolAddress) public onlyOwner {\\r\\n        _rewardPoolAddress = rewardPoolAddress;\\r\\n    }\\r\\n\\r\\n    function setMatchRange(uint256 matchRange, uint256 matchRangePerMinute) public onlyOwner {\\r\\n        _matchRange = matchRange;\\r\\n        _matchRangePerMinute = matchRangePerMinute;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Dictates the rate of change, has a direct influence on how much a player wins/loses in the ranking\\r\\n     * @param kFactor Value used to calculate the rate of change in getEloRatingChange\\r\\n     */\\r\\n    function setKFactor(uint256 kFactor) public onlyOwner {\\r\\n        _kFactor = kFactor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Tries to initiate a battle using a specified deck. If no opponents are found, the deck\\r\\n     * is placed in a wait list.\\r\\n     * @param deckId The Deck of who called this function\\r\\n     */\\r\\n    function enter(uint256 deckId) public {\\r\\n        require(msg.sender == PepemonCardDeck(_deckAddress).ownerOf(deckId), \\\"PepemonMatchmaker: Not your deck\\\");\\r\\n        // If playerRanking is empty, set default ranking\\r\\n        if (playerRanking[msg.sender] == 0) {\\r\\n            playerRanking[msg.sender] = _defaultRanking;\\r\\n        }\\r\\n\\r\\n        // Try find matchmaking partner\\r\\n        uint256 opponentDeckId = findMatchmakingOpponent(deckId);\\r\\n\\r\\n        // If one is found then start the battle, otherwise put in a wait list\\r\\n        if (opponentDeckId > 0) {\\r\\n            // start battle\\r\\n            processMatch(deckId, opponentDeckId);\\r\\n            // prevent other matches from starting immediately after this one finishes\\r\\n            removeWaitingDeck(opponentDeckId);\\r\\n        } else {\\r\\n            addWaitingDeck(deckId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers a deck back to its owner and removes from the wait list\\r\\n     * @param deckId The Deck of the owner\\r\\n     */\\r\\n    function exit(uint256 deckId) public {\\r\\n        require(waitingDecks.length > 0 && waitingDecks[_waitingDecksIndex[deckId]].deckId != 0, \\\"PepemonMatchmaker: Deck is not in the wait list\\\");\\r\\n        require(msg.sender == deckOwner[deckId], \\\"PepemonMatchmaker: Not your deck\\\");\\r\\n        removeWaitingDeck(deckId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the Elo change based on the winner's and loser's ratings.\\r\\n     * @dev The returned number has 2 decimals of precision, so 1501 = 15.01 Elo change\\r\\n     */\\r\\n    function getEloRatingChange(uint256 winnerRating, uint256 loserRating) public view returns (uint256) {\\r\\n        (uint256 change,) = Elo.ratingChange(winnerRating, loserRating, 100, _kFactor);\\r\\n        return change;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the number of waiting decks\\r\\n     */\\r\\n    function getWaitingCount() public view returns (uint256) {\\r\\n        return waitingDecks.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers a deck from its owner onto this contract, then adds the deck to the wait list\\r\\n     * @param deckId The Deck of the owner\\r\\n     */\\r\\n    function addWaitingDeck(uint256 deckId) internal {\\r\\n        deckOwner[deckId] = msg.sender;\\r\\n        PepemonCardDeck(_deckAddress).safeTransferFrom(msg.sender, address(this), deckId, \\\"\\\");\\r\\n\\r\\n        _waitingDecksIndex[deckId] = waitingDecks.length;\\r\\n        waitingDecks.push(waitingDeckData(deckId, block.timestamp));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes a deck from the wait list\\r\\n     * @dev Works by replacing the current element by the last element of the array. See https://stackoverflow.com/a/74668959\\r\\n     * @param deckId The Deck of the owner\\r\\n     */\\r\\n    function removeWaitingDeck(uint256 deckId) internal {\\r\\n        // Transfer deck back to owner\\r\\n        PepemonCardDeck(_deckAddress).safeTransferFrom(address(this), deckOwner[deckId], deckId, \\\"\\\");\\r\\n        delete deckOwner[deckId];\\r\\n\\r\\n        uint256 lastItemIndex = waitingDecks.length - 1;\\r\\n\\r\\n        uint256 lastDeckId = waitingDecks[lastItemIndex].deckId;\\r\\n\\r\\n        // update the index of the item to be swapped \\r\\n        _waitingDecksIndex[lastDeckId] = _waitingDecksIndex[deckId];\\r\\n\\r\\n        // swap the last item of the list with the one to be deleted\\r\\n        waitingDecks[_waitingDecksIndex[deckId]] = waitingDecks[lastItemIndex];\\r\\n        waitingDecks.pop();\\r\\n        delete _waitingDecksIndex[deckId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the battle between player 1's and player 2's deck, sends a reward for the winner,\\r\\n     * and ajust their ranking\\r\\n     * @param player1deckId Deck of the first player\\r\\n     * @param player2deckId Deck of the second player\\r\\n     */\\r\\n    function processMatch(uint256 player1deckId, uint256 player2deckId) internal {\\r\\n        // Evaluate the battle winner\\r\\n        (address winner, address loser, uint256 battleId) = doBattle(player1deckId, player2deckId);\\r\\n        // Declare loser and winner\\r\\n        emit BattleFinished(winner, loser, battleId);\\r\\n\\r\\n        // TODO: uncomment this before deploying to mainnet, this logic is important but makes testing difficult\\r\\n        // Send a reward to the winner\\r\\n        //RewardPool(_rewardPoolAddress).sendReward(battleId, winner);\\r\\n        // Adjust ranking accordingly. Change is adjusted to remove the extra precision from getEloRatingChange\\r\\n        uint256 change = getEloRatingChange(playerRanking[winner], playerRanking[loser]) / 100;\\r\\n        playerRanking[winner] += change;\\r\\n        // Prevent underflow or rank reset if it gets below or equal to zero. Unlikely, but possible.\\r\\n        if(int256(playerRanking[loser]) - int256(change) > 0) {\\r\\n            playerRanking[loser] = playerRanking[loser] - change;\\r\\n        } else {\\r\\n            playerRanking[loser] = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to find an opponent's deck based off all waiting player's ratings. The acceptable\\r\\n     * difference between players ratings is increased over time by an amount defined by _matchRangePerMinute\\r\\n     * @param deckId Deck of the current player trying to start a match\\r\\n     * @return opponentDeckId Deck of the opponent, if found. 0 when not found\\r\\n     */\\r\\n    function findMatchmakingOpponent(uint256 deckId) internal view returns (uint256) {\\r\\n        // Find a waiting deck with a ranking that is within matchRange\\r\\n        for (uint256 i = 0; i < waitingDecks.length; ++i) {\\r\\n            uint256 currentIterDeck = waitingDecks[i].deckId;\\r\\n\\r\\n            // Skip own deck, as well as other decks of the same owner IF _allowBattleAgainstOneself is false\\r\\n            if (i == deckId || (!_allowBattleAgainstOneself && msg.sender == deckOwner[currentIterDeck])) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // increase precision to allow increasing playerMatchRange every second\\r\\n            uint256 mins = (120 * (block.timestamp - waitingDecks[i].enterTimestamp)) / 60;\\r\\n            uint256 playerMatchRange = _matchRange + (mins * _matchRangePerMinute) / 120;\\r\\n            // Assume deckOwner[deckId] is msg.sender, because we are not storing msg.sender in deckOwner[deckId], saving gas\\r\\n            if (\\r\\n                playerRanking[msg.sender] > (playerRanking[deckOwner[currentIterDeck]] - playerMatchRange) &&\\r\\n                playerRanking[msg.sender] < (playerRanking[deckOwner[currentIterDeck]] + playerMatchRange)\\r\\n            ) {\\r\\n                return waitingDecks[i].deckId;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new battle in the PepemonBattle contract and executes the battle logic\\r\\n     * @param player1deckId Deck of the first player\\r\\n     * @param player2deckId Deck of the second player\\r\\n     * @return winner Address of the winner\\r\\n     * @return loser Address of the loser\\r\\n     * @return battleId Random seed generated for the battle\\r\\n     */\\r\\n    function doBattle(uint256 player1deckId, uint256 player2deckId) internal returns (address, address, uint256) {\\r\\n        // Assume deckOwner[player1deckId] is msg.sender, because we are not storing msg.sender in deckOwner[player1deckId], saving gas\\r\\n        (PepemonBattle.Battle memory battle, uint256 battleId) = PepemonBattle(_battleAddress).createBattle(\\r\\n            msg.sender,\\r\\n            player1deckId,\\r\\n            deckOwner[player2deckId],\\r\\n            player2deckId\\r\\n        );\\r\\n        (, address winner) = PepemonBattle(_battleAddress).goForBattle(battle);\\r\\n        address loser = (winner == msg.sender ? deckOwner[player2deckId] : msg.sender);\\r\\n        return (winner, loser, battleId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7840e622fdc8befc59d812593ff97fd3a88438c66b16cda6c26b0fca3472e00d\",\"license\":\"MIT\"},\"contracts/lib/AdminRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AdminRole {\\n  using Roles for Roles.Role;\\n\\n  event AdminAdded(address indexed account);\\n  event AdminRemoved(address indexed account);\\n\\n  Roles.Role private admins;\\n\\n  constructor() {\\n    _addAdmin(msg.sender);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender));\\n    _;\\n  }\\n\\n  function isAdmin(address account) public view returns (bool) {\\n    return admins.has(account);\\n  }\\n\\n  function addAdmin(address account) public onlyAdmin {\\n    _addAdmin(account);\\n  }\\n\\n  function renounceAdmin() public {\\n    _removeAdmin(msg.sender);\\n  }\\n\\n  function _addAdmin(address account) internal {\\n    admins.add(account);\\n    emit AdminAdded(account);\\n  }\\n\\n  function _removeAdmin(address account) internal {\\n    admins.remove(account);\\n    emit AdminRemoved(account);\\n  }\\n}\",\"keccak256\":\"0x087322ecbf7bdc39315bedc5ec603149a119a35910f82ceb131820c1b7bb9804\",\"license\":\"MIT\"},\"contracts/lib/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Arrays {\\n    //Shuffles an array of uints with random seed\\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            //Pick random index to swap current element with\\n            uint256 n = i + _seed % (_elements.length - i);\\n\\n            //swap elements\\n            uint256 temp = _elements[n];\\n            _elements[n] = _elements[i];\\n            _elements[i] = temp;\\n\\n            //Create new pseudorandom number using seed.\\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\\n        }\\n        return _elements;\\n    }\\n}\\n\",\"keccak256\":\"0x61371b66c2b9849ea3837a60073233c577f8978017339fcd3bf169cb498a1828\",\"license\":\"MIT\"},\"contracts/lib/ChainLinkRngOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"./AdminRole.sol\\\";\\n\\nabstract contract ChainLinkRngOracle is VRFConsumerBase, AdminRole {\\n    bytes32 immutable keyHash;\\n    bytes32 public lastRequestId;\\n    uint256 internal fee;\\n\\n    address constant maticLink = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\n    address constant maticVrfCoordinator = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\\n    bytes32 constant maticKeyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\\n\\n    address constant mumbaiLink = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\\n    address constant mumbaiVrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;\\n    bytes32 constant mumbaiKeyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\\n\\n\\n\\n    mapping(bytes32 => uint256) internal results;\\n\\n    constructor() VRFConsumerBase(mumbaiVrfCoordinator, mumbaiLink) {\\n        keyHash = mumbaiKeyHash;\\n        fee = 1 ether / 1000;\\n    }\\n\\n    //Get a new random number (paying link for it)\\n    //Only callable by admin\\n    function getNewRandomNumber() public onlyAdmin returns (bytes32 requestId) {\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        lastRequestId = requestRandomness(keyHash, fee);\\n        return lastRequestId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        results[requestId] = randomness;\\n    }\\n\\n    function fetchNumberByRequestId(bytes32 _requestId) public view returns (uint256) {\\n        return results[_requestId];\\n    }\\n\\n    //Get most recent random number and use that as randomness source    \\n    function getRandomNumber() public view returns (uint256){\\n        return fetchNumberByRequestId(lastRequestId);        \\n    }\\n}\\n\",\"keccak256\":\"0xed1b3081f066d98cdfbaa4f9a050e5186ff7e4c44925bf9222a98b15c0dae13f\",\"license\":\"MIT\"},\"contracts/lib/Elo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://github.com/saucepoint/elo-lib/blob/main/src/Elo.sol\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {FixedPointMathLib as fp} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\n\\r\\nlibrary Elo {\\r\\n    /// @notice Get the 16th root of a number, used in ELO calculations\\r\\n    /// @dev Elo calculations require the 400th root (10 ^ (x / 400)), however this can be simplified to the 16th root (10 ^ ((x / 25) / 16))\\r\\n    function sixteenthRoot(uint256 x) internal pure returns (uint256) {\\r\\n        return fp.sqrt(fp.sqrt(fp.sqrt(fp.sqrt(x))));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the change in ELO rating, after a given outcome.\\r\\n    /// @param ratingA the ELO rating of the player A\\r\\n    /// @param ratingB the ELO rating of the player B\\r\\n    /// @param score the score of the player A, scaled by 100. 100 = win, 50 = draw, 0 = loss\\r\\n    /// @param kFactor the k-factor or development multiplier used to calculate the change in ELO rating. 20 is the typical value\\r\\n    /// @return change the change in ELO rating of player A, with 2 decimals of precision. 1501 = 15.01 ELO change\\r\\n    /// @return negative the directional change of player A's ELO. Opposite sign for player B\\r\\n    function ratingChange(uint256 ratingA, uint256 ratingB, uint256 score, uint256 kFactor)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 change, bool negative)\\r\\n    {\\r\\n        uint256 _kFactor; // scaled up `kFactor` by 100\\r\\n        bool _negative = ratingB < ratingA;\\r\\n        uint256 ratingDiff; // absolute value difference between `ratingA` and `ratingB`\\r\\n\\r\\n        unchecked {\\r\\n            // scale up the inputs by a factor of 100\\r\\n            // since our elo math is scaled up by 100 (to avoid low precision integer division)\\r\\n            _kFactor = kFactor * 10_000;\\r\\n            ratingDiff = _negative ? ratingA - ratingB : ratingB - ratingA;\\r\\n        }\\r\\n\\r\\n        // checks against overflow/underflow, discovered via fuzzing\\r\\n        // large rating diffs leads to 10^ratingDiff being too large to fit in a uint256\\r\\n        require(ratingDiff < 1126, \\\"Rating difference too large\\\");\\r\\n        // large rating diffs when applying the scale factor leads to underflow (800 - ratingDiff)\\r\\n        if (_negative) require(ratingDiff < 800, \\\"Rating difference too large\\\");\\r\\n\\r\\n        // ----------------------------------------------------------------------\\r\\n        // Below, we'll be running simplified versions of the following formulas:\\r\\n        // expected score = 1 / (1 + 10 ^ (ratingDiff / 400))\\r\\n        // elo change = kFactor * (score - expectedScore)\\r\\n\\r\\n        uint256 n; // numerator of the power, with scaling, (numerator of `ratingDiff / 400`)\\r\\n        uint256 _powered; // the value of 10 ^ numerator\\r\\n        uint256 powered; // the value of 16th root of 10 ^ numerator (fully resolved 10 ^ (ratingDiff / 400))\\r\\n        uint256 kExpectedScore; // the expected score with K factor distributed\\r\\n        uint256 kScore; // the actual score with K factor distributed\\r\\n\\r\\n        unchecked {\\r\\n            // apply offset of 800 to scale the result by 100\\r\\n            n = _negative ? 800 - ratingDiff : 800 + ratingDiff;\\r\\n\\r\\n            // (x / 400) is the same as ((x / 25) / 16))\\r\\n            _powered = fp.rpow(10, n / 25, 1); // divide by 25 to avoid reach uint256 max\\r\\n            powered = sixteenthRoot(_powered); // x ^ (1 / 16) is the same as 16th root of x\\r\\n\\r\\n            // given `change = kFactor * (score - expectedScore)` we can distribute kFactor to both terms\\r\\n            kExpectedScore = _kFactor / (100 + powered); // both numerator and denominator scaled up by 100\\r\\n            kScore = kFactor * score; // input score is already scaled up by 100\\r\\n\\r\\n            // determines the sign of the ELO change\\r\\n            negative = kScore < kExpectedScore;\\r\\n            change = negative ? kExpectedScore - kScore : kScore - kExpectedScore;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdb33b4fc2d9a21abc5b1765f8ef8bc14730e00d1e4912afad1c6d1cd0b51a871\",\"license\":\"MIT\"},\"contracts/lib/RewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface RewardPool {\\r\\n    /**\\r\\n     * @dev Adds a single reward into the pool.\\r\\n     * @param tokenAddress Reward address\\r\\n     * @param tokenId Reward id\\r\\n     */\\r\\n    function addReward(address tokenAddress, uint256 tokenId) external; //onlyAdmin\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer an amount of a given token from the sender into the rewardPool\\r\\n     * @param tokenAddress Reward address\\r\\n     * @param tokenId Reward id\\r\\n     * @param amount The number of items to be added to the pool.\\r\\n     */\\r\\n    function addRewards(address tokenAddress, uint256 tokenId, uint256 amount) external; //onlyAdmin\\r\\n\\r\\n    /**\\r\\n     * @dev Takes a random reward from rewardPool and sends it to someone.\\r\\n     * @param rngSeed RNG seed of a Battle\\r\\n     * @param account Address of who will receive the reward\\r\\n     */\\r\\n    function sendReward(uint256 rngSeed, address account) external; //onlyAdmin\\r\\n}\",\"keccak256\":\"0xb3f1162e83844f1f4f0a1c2c8acb070700718aa17469aaa345cbe1d4e1150409\",\"license\":\"MIT\"},\"contracts/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an account access to this role\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(!has(role, account));\\n\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev remove an account's access to this role\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(has(role, account));\\n\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev check if an account has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address account)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    require(account != address(0));\\n    return role.bearer[account];\\n  }\\n}\",\"keccak256\":\"0xd66f1c8050d61971204bf1249496bd98b69fd79b2011a630767f817d7201b56c\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefb05e8a873d48e94de34a758b809b04ff2cbf62918990fb809a22d83c0edde5\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "enter(uint256)": {
        "params": {
          "deckId": "The Deck of who called this function"
        }
      },
      "exit(uint256)": {
        "params": {
          "deckId": "The Deck of the owner"
        }
      },
      "getEloRatingChange(uint256,uint256)": {
        "details": "The returned number has 2 decimals of precision, so 1501 = 15.01 Elo change"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setKFactor(uint256)": {
        "details": "Dictates the rate of change, has a direct influence on how much a player wins/loses in the ranking",
        "params": {
          "kFactor": "Value used to calculate the rate of change in getEloRatingChange"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "enter(uint256)": {
        "notice": "Tries to initiate a battle using a specified deck. If no opponents are found, the deck is placed in a wait list."
      },
      "exit(uint256)": {
        "notice": "Transfers a deck back to its owner and removes from the wait list"
      },
      "getEloRatingChange(uint256,uint256)": {
        "notice": "Calculates the Elo change based on the winner's and loser's ratings."
      },
      "getWaitingCount()": {
        "notice": "Retrieves the number of waiting decks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 273,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6999,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_battleAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7001,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_deckAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7003,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_rewardPoolAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7005,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_allowBattleAgainstOneself",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 7010,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_matchRange",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7013,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_matchRangePerMinute",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7016,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_kFactor",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7020,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "_waitingDecksIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7024,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "deckOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7028,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "waitingDecks",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(waitingDeckData)6997_storage)dyn_storage"
      },
      {
        "astId": 7032,
        "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
        "label": "playerRanking",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(waitingDeckData)6997_storage)dyn_storage": {
        "base": "t_struct(waitingDeckData)6997_storage",
        "encoding": "dynamic_array",
        "label": "struct PepemonMatchmaker.waitingDeckData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(waitingDeckData)6997_storage": {
        "encoding": "inplace",
        "label": "struct PepemonMatchmaker.waitingDeckData",
        "members": [
          {
            "astId": 6994,
            "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
            "label": "deckId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6996,
            "contract": "contracts/PepemonMatchmaker.sol:PepemonMatchmaker",
            "label": "enterTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}